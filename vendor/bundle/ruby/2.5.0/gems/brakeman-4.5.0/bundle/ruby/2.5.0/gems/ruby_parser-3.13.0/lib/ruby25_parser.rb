#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby25Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-625,919,609,225,226,609,-94,-625,-625,-625,-111,609,95,-625,-625,-103',
'-625,-110,273,274,96,-80,650,-111,589,-625,586,585,584,862,587,-102',
'658,128,605,604,-625,-625,127,-625,-625,-625,-625,-625,-532,-113,609',
'-101,-113,884,888,-532,-523,272,271,655,-104,765,-110,-523,285,-109',
'646,-115,-109,-110,609,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,-621,-103,-625,-625,-625,-108,683,-112,-116',
'-114,-625,-115,236,-625,657,225,226,-102,-625,285,-625,881,-625,-625',
'-625,-625,-625,-625,-625,-114,-625,-625,-625,-101,-102,128,-103,654',
'128,-103,127,-101,-104,127,128,-625,-625,-116,-625,127,-625,-303,-102',
'861,-103,-102,-111,-625,-303,-303,-303,-111,-625,-112,-303,-303,287',
'-303,-101,918,-102,-101,-104,-621,-108,-622,128,-104,-113,128,-104,127',
'965,-113,127,-100,-101,-303,-303,-112,-303,-303,-303,-303,-303,-104',
'-115,-109,-110,128,285,-115,-109,-110,127,236,287,-622,225,226,-99,3',
'-103,-107,-105,285,-106,235,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,128,935,-303,-303,-303,127,682,231,594',
'724,-303,-114,639,-303,281,-619,-114,-276,-303,597,-303,236,-303,-303',
'-303,-303,-303,-303,-303,-116,-303,940,-303,-433,-116,-621,589,639,586',
'585,584,622,587,639,-537,-303,-303,833,-303,639,-303,-303,605,604,-636',
'287,-108,-303,-303,-303,-303,-108,-303,-114,-303,-303,236,-303,-526',
'833,287,-112,232,641,640,-526,-112,850,639,944,-619,832,797,851,-526',
'639,598,-303,-303,236,-303,-303,-303,-303,-303,106,107,236,641,640,652',
'-108,-619,832,641,640,742,106,107,233,641,640,647,795,1013,888,-618',
'616,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,947,-526,-303,-303,-303,231,682,641,640,642,-303,-538,620,-303',
'641,640,637,639,-303,-107,-303,618,-303,-303,-303,-303,-303,-303,-303',
'594,-303,231,-303,949,-116,709,128,-523,230,951,597,127,108,109,-523',
'-303,-303,228,-105,-618,-303,-625,482,-523,108,109,128,-303,-625,-625',
'-625,127,-303,-114,-625,-625,566,-625,-109,565,232,-618,128,605,604',
'233,-625,127,641,640,637,128,231,553,-625,953,127,-625,-625,556,-625',
'-625,-625,-625,-625,953,232,236,480,-534,1043,-303,-523,634,-537,-530',
'-534,598,-303,-116,635,824,-530,-622,225,226,825,-303,-625,-625,-625',
'-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-116,-538,-625',
'-625,-625,-625,683,236,-115,-531,-625,639,-625,-625,-99,232,-531,-621',
'-625,959,-625,-625,-625,-625,-625,-625,-625,-625,-625,-108,-625,-625',
'-625,-304,-303,-303,-111,-304,732,-625,-304,-113,-303,-100,-304,-625',
'-625,-622,-103,-304,-625,-303,-625,-304,553,225,226,-625,-109,-625,-625',
'-625,-625,-112,-625,-625,-625,777,-625,231,-625,778,641,640,659,-526',
'780,-625,-625,-625,-625,676,-526,-294,677,782,621,811,-625,-625,-294',
'-625,-625,-625,-625,-625,-106,-536,-304,-294,-303,231,-304,-533,-536',
'420,639,-528,546,644,-533,-115,676,-536,-528,566,732,544,568,-625,-625',
'-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,616,232',
'-625,-625,-625,-111,826,-625,-113,566,-625,-110,568,-625,-625,-294,-625',
'732,-625,256,-625,-102,-625,-625,-625,-625,-625,-625,-625,-536,-625',
'-625,-625,232,641,640,-111,569,589,236,586,585,584,594,587,-625,-625',
'-625,-625,677,-625,253,-625,-535,597,255,254,-625,-523,732,-535,-529',
'-625,-112,732,-523,-523,-523,-529,-535,-523,-523,-523,236,-523,589,592',
'586,585,584,256,587,-523,977,-523,-523,-523,605,604,231,566,-104,-279',
'568,-523,-523,1034,-523,-523,-523,-523,-523,1064,231,563,782,-113,231',
'231,256,479,554,253,751,1040,1034,255,254,-535,480,978,598,754,1038',
'782,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523',
'-523,884,888,-523,-523,-523,742,-523,-523,225,226,-523,981,811,-523',
'-523,232,-523,984,-523,986,-523,988,-523,-523,-523,-523,-523,-523,-523',
'232,-523,236,-523,232,232,990,1006,231,586,585,584,550,587,290,669,-523',
'-523,-523,-523,236,-523,293,-523,667,-101,429,547,-523,-526,1002,431',
'430,-523,-523,1003,-526,-526,-526,540,-110,-526,-526,-526,589,-526,586',
'585,584,594,587,539,236,-526,-79,-526,-526,-526,909,910,597,1015,911',
'122,123,-526,-526,528,-526,-526,-526,-526,-526,232,-345,131,132,133',
'134,135,526,-345,592,589,732,586,585,584,789,587,-345,602,601,605,604',
'523,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,290,256,-526,-526,-526,513,-526,-526,235,1032,-526,751,484,-526',
'-526,483,-526,598,-526,1035,-526,850,-526,-526,-526,-526,-526,-526,-526',
'-345,-526,481,-526,253,432,427,1041,255,254,251,252,410,1044,953,953',
'-526,-526,-526,-526,953,-526,1049,-526,1015,407,404,401,-526,-303,742',
'1058,1060,-526,-526,1062,-303,-303,-303,1064,1064,-303,-303,-303,589',
'-303,586,585,584,594,587,377,729,236,339,-303,-303,-303,338,1015,597',
'732,732,276,227,-303,-303,-622,-303,-303,-303,-303,-303,589,-621,586',
'585,584,236,587,224,223,592,222,589,953,586,585,584,1015,587,602,601',
'605,604,1087,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,732,751,-303,-303,-303,616,827,-303,732,732,-303,761',
'751,-303,-303,758,-303,598,-303,759,-303,958,-303,-303,-303,-303,-303',
'-303,-303,757,-303,784,-303,789,749,747,745,589,798,586,585,584,594',
'587,799,-303,-303,-303,-303,800,-303,743,-303,597,-277,742,739,-303',
'-311,528,735,732,-303,-114,1064,-311,-311,-311,812,729,-311,-311,-311',
'256,-311,592,589,724,586,585,584,559,587,513,-311,-311,605,604,236,266',
'267,713,513,1064,-311,-311,1064,-311,-311,-311,-311,-311,-94,236,236',
'253,829,259,276,255,254,251,252,427,751,257,838,258,840,526,598,528',
'236,754,236,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311',
'-311,-311,724,256,-311,-311,-311,236,693,-311,290,293,-311,290,724,-311',
'-311,256,-311,236,-311,236,-311,879,-311,-311,-311,-311,-311,-311,-311',
'236,-311,888,-311,253,732,236,256,255,254,251,252,256,256,256,290,-311',
'-311,-626,-311,675,-311,674,236,670,-626,-626,-626,-311,666,-626,-626',
'-626,-311,-626,256,1006,665,586,585,584,-276,587,-626,-626,-626,-626',
'-278,663,236,124,266,267,656,-626,-626,653,-626,-626,-626,-626,-626',
'589,,586,585,584,253,587,259,,255,254,251,252,,,257,589,258,586,585',
'584,,587,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,,751,-626,-626,-626,,,-626,,,-626,,,-626,-626,,-626,751,-626',
',-626,,-626,-626,-626,-626,-626,-626,-626,,-626,-626,-626,589,,586,585',
'584,594,587,131,132,133,134,135,-626,-626,-626,-626,597,-626,-295,-626',
',,,,-626,-295,-295,-295,,-626,-295,-295,-295,,-295,256,,,592,131,132',
'133,134,135,-295,-295,-295,602,601,605,604,266,267,,-295,-295,,-295',
'-295,-295,-295,-295,589,,586,585,584,253,587,259,,255,254,251,252,236',
'131,132,133,134,135,,,598,,-295,-295,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,,751,-295,-295,-295,,,-295,,,-295,,,-295,-295',
',-295,,-295,,-295,,-295,-295,-295,-295,-295,-295,-295,,-295,,-295,589',
',586,585,584,594,587,,,,,,-295,-295,-295,-295,597,-295,-627,-295,,,',
',-295,-627,-627,-627,,-295,-627,-627,-627,,-627,256,,,592,,,,,-627,-627',
'-627,-627,,,605,604,266,267,,-627,-627,,-627,-627,-627,-627,-627,,,',
',,253,,,,255,254,251,252,,,,,,,,,598,,-627,-627,-627,-627,-627,-627',
'-627,-627,-627,-627,-627,-627,-627,-627,,,-627,-627,-627,,,-627,,,-627',
',,-627,-627,,-627,,-627,,-627,,-627,-627,-627,-627,-627,-627,-627,,-627',
'-627,-627,589,,586,585,584,594,587,,,,,,-627,-627,-627,-627,597,-627',
'-441,-627,,,,,-627,-441,-441,-441,,-627,-441,-441,-441,,-441,256,,,592',
',,,,-441,-441,-441,,602,601,605,604,266,267,,-441,-441,,-441,-441,-441',
'-441,-441,,,,,,253,,259,,255,254,251,252,,,,,,,,,598,,-441,-441,-441',
'-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,,,-441,-441,-441',
',,-441,,290,-441,,,-441,-441,,-441,,-441,,-441,,-441,-441,-441,-441',
'-441,-441,-441,,-441,-441,-441,,,,,,,,,,,,,-441,-441,-647,-441,,-441',
',,,-647,-647,-647,-441,,-647,-647,-647,-441,-647,589,,586,585,584,594',
'587,,-647,-647,,,,,,,597,,,-647,-647,,-647,-647,-647,-647,-647,,,,,',
',,,,,,592,,,,,,,,,602,601,605,604,,,,,,,,,,,-647,,-647,,,,,-647,,-647',
'-647,-647,290,-647,-647,-647,-647,,-647,,,,598,,,,,-647,-647,-647,,',
',,-647,-647,,,-647,-647,,-647,-647,-647,-647,-647,,,-647,,,,,-647,,',
',,,,-647,,,,,-647,,,,-647,-647,-647,-647,-647,-647,-647,-647,-647,-647',
'-647,-647,-647,-647,,,-647,-647,-647,,,-647,,290,-647,,,-647,-647,,-647',
',-647,,-647,,-647,-647,-647,-647,-647,-647,-647,,-647,-647,-647,,,,',
',,,,,,,,-647,-647,,-647,,-647,312,85,86,87,12,78,-647,,,79,80,-647,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,671',
'11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267',
',43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,270,,-251,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,671,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,236,270,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274',
'268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
'256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269',
'264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270',
',,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,268,269,264,265,,-648,-648,,,266,267,,43,,,36',
',,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,',
'-648,-648,,,266,267,,43,,,316,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263',
'273,274,,,264,265,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48',
'255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,268,,264,265,,,,,,266,267,,43,,,316,,,62,63',
',,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,256,-648,-648,-648,-648,273,274,,,-648,-648,,,,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,-648,-648,-648,-648,273',
'274,,,-648,-648,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,-648',
'-648,-648,-648,273,274,,,-648,-648,,,,,,266,267,,43,,,36,,,62,63,,,64',
',38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,-648,-648,-648,-648,273,274,,,-648,-648,,,,,,266,267,',
'43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,-648,-648,-648,-648,273,274,,,-648',
'-648,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,-648,-648,-648',
'-648,273,274,,,-648,-648,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'316,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,',
',,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,236,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,992,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,',
',,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,',
'120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,',
',103,303,97,98,99,101,,,,96,104,236,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,706,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,420,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335',
',,,,,,,,,,,,,,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,542,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,706,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325',
',,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,999,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,803,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,706,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,',
'66,,306,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,',
',,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66',
',306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99',
'101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,320,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,337,,,66,,,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,706,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,',
',,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
',,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,371,,,36,,,62',
'63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,420,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,437,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',437,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,',
',,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,',
',,,,,,,,,,,,,,,,,992,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,559,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
'300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,303,97,98',
'99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,437,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'623,60,112,111,624,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,625',
',,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,623,60,112,111,624,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,625,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,',
',,,,184,191,182,183,179,180,181,139,141,138,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,',
'104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,417',
'416,140,,418,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,',
',175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186',
'206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205,207',
'199,192,,,,208,215,210,386,385,387,384,185,204,203,,,,,,184,191,182',
'183,381,382,383,379,141,112,111,380,,114,,,,,,,173,174,,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,393,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,',
',,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188',
'214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197',
'185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173',
'174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141',
',,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186',
'206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205,207',
'199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182',
'183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178',
'189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219',
'198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203',
',,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,',
'104,,687,464,,,688,,,170,,,,,178,173,174,,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,774,471,,,775,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,772,464,,,773,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1073,471,,,1074',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1071,464,,,1072,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',1068,471,,,1067,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,460,464,,,461,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,467,471,,,466,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,589,177,586,585,584,594,587',
',,,,511,464,,,512,597,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,592,575,,175,176,161,162,,,602,601,605,604,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,598,689',
'471,,,690,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,511,464,,,512,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,895,471,,,896,,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,717,464,,,718,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,720,471,,,721,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,687,464,,,688',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,689,471,,,690,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',808,471,,,807,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,805,464,,,806,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',589,177,586,585,584,594,587,589,,586,585,584,594,587,,,597,,,,,170',
',597,,589,178,586,585,584,594,587,,,,,,,592,,,597,,,,592,,602,601,605',
'604,,,,602,601,605,604,,,,,589,592,586,585,584,594,587,,,,,,605,604',
',,597,,,,589,598,586,585,584,594,587,589,598,586,585,584,594,587,,,597',
',592,,,,,597,,,598,,,605,604,589,,586,585,584,594,587,592,,,,,,,592',
',597,,605,604,,,,602,601,605,604,,,,,,598,,,,,589,592,586,585,584,594',
'587,,,,602,601,605,604,,598,597,,,,,589,598,586,585,584,594,587,589',
',586,585,584,594,587,,,597,592,,,,,,597,,598,,,605,604,589,,586,585',
'584,594,587,589,592,586,585,584,594,587,,592,597,,,605,604,,,597,,,605',
'604,,,,,598,,,,,,592,,,,,,,592,,602,601,605,604,,,598,,,605,604,,,598',
',,,,,,,,,,,,,,,,,,,,,,598,,,,,,,598' ]
        racc_action_table = arr = ::Array.new(26366, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'808,828,939,727,727,962,712,808,808,808,772,360,92,808,808,720,808,893',
'47,47,92,712,404,1071,754,808,754,754,754,737,754,717,411,970,742,742',
'808,808,970,808,808,808,808,808,382,1072,892,845,773,1051,1051,382,379',
'47,47,408,718,611,828,379,65,369,401,1041,997,1085,361,808,808,808,808',
'808,808,808,808,808,808,808,808,808,808,720,720,808,808,808,368,808',
'774,372,775,808,621,727,808,411,792,792,717,808,330,808,754,808,808',
'808,808,808,808,808,1074,808,808,808,845,772,939,720,408,962,720,939',
'893,718,962,360,808,808,1000,808,360,808,807,717,737,720,717,1071,808',
'807,807,807,1071,808,808,807,807,65,807,845,813,717,845,773,774,996',
'775,611,718,1072,892,718,611,892,1072,892,369,845,807,807,1073,807,807',
'807,807,807,718,1041,997,1085,361,29,1041,997,1085,361,792,330,1074',
'476,476,368,1,774,372,775,696,621,22,807,807,807,807,807,807,807,807',
'807,807,807,807,807,807,309,837,807,807,807,309,807,27,739,844,807,1074',
'651,807,27,624,1074,854,807,739,807,22,807,807,807,807,807,807,807,1000',
'807,855,807,29,1000,1073,958,405,958,958,958,373,958,648,239,807,807',
'839,807,402,807,466,739,739,62,29,996,807,466,466,466,996,807,807,466',
'466,476,466,624,694,696,1073,27,651,651,624,1073,728,397,863,624,839',
'651,728,624,530,739,466,466,62,466,466,466,466,466,335,335,864,405,405',
'405,239,624,694,648,648,865,44,44,20,402,402,402,648,958,1018,623,1018',
'466,466,466,466,466,466,466,466,466,466,466,466,466,466,869,624,466',
'466,466,370,466,397,397,397,466,240,370,466,530,530,530,395,466,20,466',
'370,466,466,466,466,466,466,466,978,466,19,466,870,20,530,365,623,19',
'872,978,365,335,335,623,466,466,19,466,623,466,467,242,623,44,44,5,466',
'467,467,467,5,466,466,467,467,352,467,240,352,370,623,905,978,978,444',
'467,905,395,395,395,901,341,481,895,873,901,467,467,341,467,467,467',
'467,467,875,19,1004,341,383,1004,896,623,389,41,387,383,978,896,242',
'389,687,387,896,359,359,688,896,467,467,467,467,467,467,467,467,467',
'467,467,467,467,467,444,42,467,467,467,895,467,878,481,384,467,413,895',
'467,41,341,384,895,467,880,467,895,467,467,467,467,467,467,467,41,467',
'467,467,547,896,721,687,778,883,895,547,688,721,42,778,467,467,721,467',
'547,467,721,689,778,339,17,17,467,42,689,689,689,467,467,689,689,689',
'625,689,627,895,625,413,413,413,380,627,689,689,689,689,805,380,326',
'806,627,371,915,689,689,326,689,689,689,689,689,339,323,547,326,721',
'324,778,381,323,367,399,385,324,399,381,339,460,323,385,572,889,324',
'572,689,689,689,689,689,689,689,689,689,689,689,689,689,689,366,627',
'689,689,689,805,689,689,806,734,689,915,734,689,689,326,689,894,689',
'488,689,460,689,689,689,689,689,689,689,323,689,689,689,324,399,399',
'460,354,1087,898,1087,1087,1087,1087,1087,689,689,689,689,461,689,488',
'689,322,1087,488,488,689,110,902,322,386,689,689,903,110,110,110,386',
'322,110,110,110,904,110,751,1087,751,751,751,487,751,110,913,110,110',
'110,1087,1087,991,353,461,914,353,110,110,991,110,110,110,110,110,1092',
'238,350,991,461,998,1033,343,238,340,487,751,998,1033,487,487,322,238',
'921,1087,751,998,1033,110,110,110,110,110,110,110,110,110,110,110,110',
'110,110,760,760,110,110,110,922,110,110,786,786,110,924,672,110,110',
'991,110,925,110,926,110,928,110,110,110,110,110,110,110,238,110,929',
'110,998,1033,930,944,443,944,944,944,336,944,334,443,110,110,110,110',
'329,110,328,110,443,672,138,325,110,113,942,138,138,110,110,943,113',
'113,113,319,672,113,113,113,1058,113,1058,1058,1058,1058,1058,318,317',
'113,315,113,113,113,793,793,1058,960,793,793,793,113,113,301,113,113',
'113,113,113,443,50,313,313,313,313,313,298,50,1058,881,969,881,881,881',
'976,881,50,1058,1058,1058,1058,297,113,113,113,113,113,113,113,113,113',
'113,113,113,113,113,286,503,113,113,113,282,113,113,248,989,113,881',
'244,113,113,243,113,1058,113,992,113,994,113,113,113,113,113,113,113',
'50,113,241,113,503,220,136,999,503,503,503,503,102,1008,1009,1010,113',
'113,113,113,1011,113,1012,113,1014,101,100,99,113,690,1023,1026,1027',
'113,113,1028,690,690,690,1029,1031,690,690,690,575,690,575,575,575,575',
'575,73,1037,49,43,690,690,690,40,1050,575,1055,1056,25,18,690,690,1067',
'690,690,690,690,690,1013,1068,1013,1013,1013,1070,1013,16,15,575,13',
'879,1076,879,879,879,1077,879,575,575,575,575,1081,690,690,690,690,690',
'690,690,690,690,690,690,690,690,690,615,1013,690,690,690,614,690,690',
'613,612,690,608,879,690,690,603,690,575,690,606,690,879,690,690,690',
'690,690,690,690,599,690,629,690,632,591,582,581,1064,655,1064,1064,1064',
'1064,1064,658,690,690,690,690,660,690,580,690,1064,664,578,577,690,31',
'573,570,561,690,690,1082,31,31,31,673,560,31,31,31,507,31,1064,592,551',
'592,592,592,548,592,678,31,31,1064,1064,543,507,507,541,684,1083,31',
'31,1084,31,31,31,31,31,538,537,691,507,692,507,695,507,507,507,507,536',
'592,507,698,507,700,703,1064,705,520,592,519,31,31,31,31,31,31,31,31',
'31,31,31,31,31,31,714,502,31,31,31,716,508,31,719,31,31,722,723,31,31',
'726,31,733,31,738,31,753,31,31,31,31,31,31,31,755,31,762,31,502,768',
'771,492,502,502,502,502,491,490,489,468,31,31,471,31,459,31,458,455',
'445,471,471,471,31,441,471,471,471,31,471,557,1043,438,1043,1043,1043',
'436,1043,471,471,471,471,802,433,804,3,557,557,410,471,471,407,471,471',
'471,471,471,1015,,1015,1015,1015,557,1015,557,,557,557,557,557,,,557',
'1049,557,1049,1049,1049,,1049,471,471,471,471,471,471,471,471,471,471',
'471,471,471,471,,1015,471,471,471,,,471,,,471,,,471,471,,471,1049,471',
',471,,471,471,471,471,471,471,471,,471,471,471,832,,832,832,832,832',
'832,9,9,9,9,9,471,471,471,471,832,471,60,471,,,,,471,60,60,60,,471,60',
'60,60,,60,494,,,832,562,562,562,562,562,60,60,60,832,832,832,832,494',
'494,,60,60,,60,60,60,60,60,959,,959,959,959,494,959,494,,494,494,494',
'494,832,535,535,535,535,535,,,832,,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,,959,60,60,60,,,60,,,60,,,60,60,,60,,60,,60,,60,60,60,60,60',
'60,60,,60,,60,747,,747,747,747,747,747,,,,,,60,60,60,60,747,60,472,60',
',,,,60,472,472,472,,60,472,472,472,,472,495,,,747,,,,,472,472,472,472',
',,747,747,495,495,,472,472,,472,472,472,472,472,,,,,,495,,,,495,495',
'495,495,,,,,,,,,747,,472,472,472,472,472,472,472,472,472,472,472,472',
'472,472,,,472,472,472,,,472,,,472,,,472,472,,472,,472,,472,,472,472',
'472,472,472,472,472,,472,472,472,745,,745,745,745,745,745,,,,,,472,472',
'472,472,745,472,30,472,,,,,472,30,30,30,,472,30,30,30,,30,493,,,745',
',,,,30,30,30,,745,745,745,745,493,493,,30,30,,30,30,30,30,30,,,,,,493',
',493,,493,493,493,493,,,,,,,,,745,,30,30,30,30,30,30,30,30,30,30,30',
'30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,,30,30,30,30,30',
'30,30,,30,30,30,,,,,,,,,,,,,30,30,510,30,,30,,,,510,510,510,30,,510',
'510,510,30,510,743,,743,743,743,743,743,,510,510,,,,,,,743,,,510,510',
',510,510,510,510,510,,,,,,,,,,,,743,,,,,,,,,743,743,743,743,,,,,,,,',
',,510,,462,,,,,510,,462,462,462,510,510,462,462,462,,462,,,,743,,,,',
'462,462,462,,,,,510,510,,,462,462,,462,462,462,462,462,,,510,,,,,510',
',,,,,,510,,,,,510,,,,462,462,462,462,462,462,462,462,462,462,462,462',
'462,462,,,462,462,462,,,462,,462,462,,,462,462,,462,,462,,462,,462,462',
'462,462,462,462,462,,462,462,462,,,,,,,,,,,,,462,462,,462,,462,995,995',
'995,995,995,995,462,,,995,995,462,,,995,,995,995,995,995,995,995,995',
',,,,,995,995,995,995,995,995,995,,,995,,,,,448,995,995,995,995,995,995',
'995,995,995,995,995,995,,995,995,995,,995,995,,995,995,995,448,448,448',
'448,448,448,448,448,448,448,448,,448,448,,,448,448,,995,,,995,,,995',
'995,,,995,,995,448,,448,995,448,448,448,448,448,448,448,995,448,,,,995',
'995,995,995,995,995,,,,995,995,,448,,448,,,995,,,995,995,995,,,995,995',
'966,966,966,966,966,966,,,,966,966,,,,966,,966,966,966,966,966,966,966',
',,,,,966,966,966,966,966,966,966,,,966,,,,,454,966,966,966,966,966,966',
'966,966,966,966,966,966,,966,966,966,,966,966,,966,966,966,454,454,454',
'454,454,454,454,454,454,454,454,,454,454,,,454,454,,966,,,966,,,966',
'966,,,966,,966,454,,454,966,454,454,454,454,454,454,454,966,454,,,,966',
'966,966,966,966,966,,,,966,966,,454,,,,,966,,,966,966,966,,,966,966',
'899,899,899,899,899,899,,,,899,899,,,,899,,899,899,899,899,899,899,899',
',,,,,899,899,899,899,899,899,899,,,899,,,,,,899,899,899,899,899,899',
'899,899,899,899,899,899,,899,899,899,,899,899,,899,899,899,506,506,506',
'506,506,506,506,506,506,506,506,,506,506,,,506,506,,899,,,899,,,899',
'899,,,899,,899,506,,506,899,506,506,506,506,506,506,506,899,506,,,,899',
'899,899,899,899,899,,,,899,899,506,506,,,,,899,,,899,899,899,,,899,899',
'1022,1022,1022,1022,1022,1022,,,,1022,1022,,,,1022,,1022,1022,1022,1022',
'1022,1022,1022,,,,,,1022,1022,1022,1022,1022,1022,1022,,,1022,,,,,,1022',
'1022,1022,1022,1022,1022,1022,1022,1022,1022,1022,1022,,1022,1022,1022',
',1022,1022,,1022,1022,1022,920,920,920,920,920,920,920,920,920,920,920',
',920,920,,,920,920,,1022,,,1022,,,1022,1022,,,1022,,1022,920,,920,1022',
'920,920,920,920,920,920,920,1022,920,,,,1022,1022,1022,1022,1022,1022',
',,,1022,1022,,920,,,,,1022,,,1022,1022,1022,,,1022,1022,1021,1021,1021',
'1021,1021,1021,,,,1021,1021,,,,1021,,1021,1021,1021,1021,1021,1021,1021',
',,,,,1021,1021,1021,1021,1021,1021,1021,,,1021,,,,,,1021,1021,1021,1021',
'1021,1021,1021,1021,1021,1021,1021,1021,,1021,1021,1021,,1021,1021,',
'1021,1021,1021,810,810,810,810,810,810,810,810,810,810,810,,810,810',
',,810,810,,1021,,,1021,,,1021,1021,,,1021,,1021,810,,810,1021,810,810',
'810,810,810,810,810,1021,810,,,,1021,1021,1021,1021,1021,1021,,,,1021',
'1021,,810,,,,,1021,,,1021,1021,1021,,,1021,1021,247,247,247,247,247',
'247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247',
'247,247,247,247,,,247,,,,,,247,247,247,247,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,,247,247,247,24,24,24,24,24,24,24,24,24,24',
'24,,24,24,,,24,24,,247,,,247,,,247,247,,,247,,247,24,,24,247,24,24,24',
'24,24,24,24,247,24,,,,247,247,247,247,247,247,,,,247,247,,24,,,,,247',
',,247,247,247,,,247,247,936,936,936,936,936,936,,,,936,936,,,,936,,936',
'936,936,936,936,936,936,,,,,,936,936,936,936,936,936,936,,,936,,,,,',
'936,936,936,936,936,936,936,936,936,936,936,936,,936,936,936,,936,936',
',936,936,936,558,558,558,558,558,558,558,558,558,558,558,,558,558,,',
'558,558,,936,,,936,,,936,936,,,936,,936,558,,558,936,558,558,558,558',
'558,558,558,936,558,,,,936,936,936,936,936,936,,,,936,936,,558,,,,,936',
',,936,936,936,,,936,936,1016,1016,1016,1016,1016,1016,,,,1016,1016,',
',,1016,,1016,1016,1016,1016,1016,1016,1016,,,,,,1016,1016,1016,1016',
'1016,1016,1016,,,1016,,,,,,1016,1016,1016,1016,1016,1016,1016,1016,1016',
'1016,1016,1016,,1016,1016,1016,,1016,1016,,1016,1016,1016,295,295,295',
'295,295,295,295,295,295,295,295,,295,295,,,295,295,,1016,,,1016,,,1016',
'1016,,,1016,,1016,295,,295,1016,295,295,295,295,295,295,295,1016,295',
',,,1016,1016,1016,1016,1016,1016,,,,1016,1016,,295,,,,,1016,,,1016,1016',
'1016,,,1016,1016,852,852,852,852,852,852,,,,852,852,,,,852,,852,852',
'852,852,852,852,852,,,,,,852,852,852,852,852,852,852,,,852,,,,,,852',
'852,852,852,852,852,852,852,852,852,852,852,,852,852,852,,852,852,,852',
'852,852,486,486,486,486,486,486,486,486,486,486,486,,486,486,,,486,486',
',852,,,852,,,852,852,,,852,,852,486,,486,852,486,486,486,486,486,486',
'486,852,486,,,,852,852,852,852,852,852,,,,852,852,,,,,,,852,,,852,852',
'852,,,852,852,316,316,316,316,316,316,,,,316,316,,,,316,,316,316,316',
'316,316,316,316,,,,,,316,316,316,316,316,316,316,,,316,,,,,,316,316',
'316,316,316,316,316,316,316,316,316,316,,316,316,316,,316,316,,316,316',
'316,485,485,485,485,485,485,485,485,485,485,485,,485,485,,,485,485,',
'316,,,316,,,316,316,,,316,,316,485,,485,316,485,485,485,485,485,485',
'485,316,485,,,,316,316,316,316,316,316,,,,316,316,,,,,,,316,,,316,316',
'316,,,316,316,861,861,861,861,861,861,,,,861,861,,,,861,,861,861,861',
'861,861,861,861,,,,,,861,861,861,861,861,861,861,,,861,,,,,,861,861',
'861,861,861,861,861,861,861,861,861,861,,861,861,861,,861,861,,861,861',
'861,504,504,504,504,504,504,504,,,504,504,,,,,,504,504,,861,,,861,,',
'861,861,,,861,,861,504,,504,861,504,504,504,504,504,504,504,861,504',
',,,861,861,861,861,861,861,,,,861,861,,,,,,,861,,,861,861,861,,,861',
'861,321,321,321,321,321,321,,,,321,321,,,,321,,321,321,321,321,321,321',
'321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,321,321,321,321,321',
'321,321,321,321,321,321,321,,321,321,321,,321,321,,321,321,321,505,505',
'505,505,505,505,505,505,,505,505,,,,,,505,505,,321,,,321,,,321,321,',
',321,,321,505,,505,321,505,505,505,505,505,505,505,321,505,,,,321,321',
'321,321,321,321,,,,321,321,,,,,,,321,,,321,321,321,,,321,321,794,794',
'794,794,794,794,,,,794,794,,,,794,,794,794,794,794,794,794,794,,,,,',
'794,794,794,794,794,794,794,,,794,,,,,,794,794,794,794,794,794,794,794',
'794,794,794,794,,794,794,794,,794,794,,794,794,794,496,496,496,496,496',
'496,496,,,496,496,,,,,,496,496,,794,,,794,,,794,794,,,794,,794,496,',
'496,794,496,496,496,496,496,496,496,794,496,,,,794,794,794,794,794,794',
',,,794,794,,,,,,,794,,,794,794,794,,,794,794,776,776,776,776,776,776',
',,,776,776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776,776,776',
'776,776,776,,,776,,,,,,776,776,776,776,776,776,776,776,776,776,776,776',
',776,776,776,,776,776,,776,776,776,497,497,497,497,497,497,497,,,497',
'497,,,,,,497,497,,776,,,776,,,776,776,,,776,,776,497,,497,776,497,497',
'497,497,497,497,497,776,497,,,,776,776,776,776,776,776,,,,776,776,,',
',,,,776,,,776,776,776,,,776,776,937,937,937,937,937,937,,,,937,937,',
',,937,,937,937,937,937,937,937,937,,,,,,937,937,937,937,937,937,937',
',,937,,,,,,937,937,937,937,937,937,937,937,937,937,937,937,,937,937',
'937,,937,937,,937,937,937,500,500,500,500,500,500,500,,,500,500,,,,',
',500,500,,937,,,937,,,937,937,,,937,,937,500,,500,937,500,500,500,500',
'500,500,500,937,500,,,,937,937,937,937,937,937,,,,937,937,,,,,,,937',
',,937,937,937,,,937,937,862,862,862,862,862,862,,,,862,862,,,,862,,862',
'862,862,862,862,862,862,,,,,,862,862,862,862,862,862,862,,,862,,,,,',
'862,862,862,862,862,862,862,862,862,862,862,862,,862,862,862,,862,862',
',862,862,862,498,498,498,498,498,498,498,,,498,498,,,,,,498,498,,862',
',,862,,,862,862,,,862,,862,498,,498,862,498,498,498,498,498,498,498',
'862,498,,,,862,862,862,862,862,862,,,,862,862,,,,,,,862,,,862,862,862',
',,862,862,888,888,888,888,888,888,,,,888,888,,,,888,,888,888,888,888',
'888,888,888,,,,,,888,888,888,888,888,888,888,,,888,,,,,,888,888,888',
'888,888,888,888,888,888,888,888,888,,888,888,888,,888,888,,888,888,888',
'499,499,499,499,499,499,499,,,499,499,,,,,,499,499,,888,,,888,,,888',
'888,,,888,,888,499,,499,888,499,499,499,499,499,499,499,888,499,,,,888',
'888,888,888,888,888,,,,888,888,,,,,,,888,,,888,888,888,,,888,888,222',
'222,222,222,222,222,,,,222,222,,,,222,,222,222,222,222,222,222,222,',
',,,,222,222,222,222,222,222,222,,,222,,,,,,222,222,222,222,222,222,222',
'222,222,222,222,222,,222,222,222,,222,222,,222,222,222,501,501,501,501',
'501,501,501,,,501,501,,,,,,501,501,,222,,,222,,,222,222,,,222,,222,501',
',501,222,501,501,501,501,501,501,501,222,501,,,,222,222,222,222,222',
'222,,,,222,222,,,,,,,222,,,222,222,222,,,222,222,427,427,427,427,427',
'427,,,,427,427,,,,427,,427,427,427,427,427,427,427,,,,,,427,427,427',
'427,427,427,427,,,427,,,,,,427,427,427,427,427,427,427,427,427,427,427',
'427,,427,427,427,,427,427,,427,427,427,,,,,,,,,,,,,,,,,,,,427,,,427',
',,427,427,,,427,,427,,,,427,,,,,,,,427,,,,,427,427,427,427,427,427,',
',,427,427,,,,,,,427,,,427,427,427,,,427,427,2,2,2,2,2,2,,,,2,2,,,,2',
',2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,',
'2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,,,,,,,',
'2,,,,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,,,2,2,36,36,36,36,36,36,,,',
'36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,',
',,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,,,',
',,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,,,,36,,,,,,,,36,,,,,36,36,36',
'36,36,36,,,,36,36,,,,,,,36,,,36,36,36,,,36,36,364,364,364,364,364,364',
',,,364,364,,,,364,,364,364,364,364,364,364,364,,,,,,364,364,364,364',
'364,364,364,,,364,,,,,,364,364,364,364,364,364,364,364,364,364,364,364',
',364,364,364,,364,364,,364,364,364,,,,,,,,,,,,,,,,,,,,364,,,364,,,364',
'364,,,364,,364,,,,364,,,,,,,,364,,,,,364,364,364,364,364,364,,,,364',
'364,,,,,,,364,,,364,364,364,,,364,364,610,610,610,610,610,610,,,,610',
'610,,,,610,,610,610,610,610,610,610,610,,,,,,610,610,610,610,610,610',
'610,,,610,,,,,,610,610,610,610,610,610,610,610,610,610,610,610,,610',
'610,610,,610,610,,610,610,610,,,,,,,,,,,,,,,,,,,,610,,,610,,,610,610',
',,610,,610,,,,610,,,,,,,,610,,,,,610,610,610,610,610,610,,,,610,610',
',,,,,,610,,,610,610,610,,,610,610,347,347,347,347,347,347,,,,347,347',
',,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347',
',,347,,,,,,347,347,347,347,347,347,347,347,347,347,347,347,,347,347',
'347,,347,347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347',
',347,,,,347,,,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347,,,,,,',
'347,,,347,347,347,,,347,347,788,788,788,788,788,788,,,,788,788,,,,788',
',788,788,788,788,788,788,788,,,,,,788,788,788,788,788,788,788,,,788',
',,,,,788,788,788,788,788,788,788,788,788,788,788,788,,788,788,788,,788',
'788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,788,',
',,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788,,,,,,,788,,',
'788,788,788,,,788,788,787,787,787,787,787,787,,,,787,787,,,,787,,787',
'787,787,787,787,787,787,,,,,,787,787,787,787,787,787,787,,,787,,,,,',
'787,787,787,787,787,787,787,787,787,787,787,787,,787,787,787,,787,787',
',787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,787,,,,787',
',,,,,,,787,,,,,787,787,787,787,787,787,,,,787,787,,,,,,,787,,,787,787',
'787,,,787,787,607,607,607,607,607,607,,,,607,607,,,,607,,607,607,607',
'607,607,607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,,607,607',
'607,607,607,607,607,607,607,607,607,607,,607,607,607,,607,607,,607,607',
'607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,,,607,,607,,,,607,,,,,,,',
'607,,,,,607,607,607,607,607,607,,,,607,607,,,,,,,607,,,607,607,607,',
',607,607,834,834,834,834,834,834,,,,834,834,,,,834,,834,834,834,834',
'834,834,834,,,,,,834,834,834,834,834,834,834,,,834,,,,,,834,834,834',
'834,834,834,834,834,834,834,834,834,,834,834,834,,834,834,,834,834,834',
',,,,,,,,,,,,,,,,,,,834,,,834,,,834,834,,,834,,834,,,,834,,,,,,,,834',
',,,,834,834,834,834,834,834,,,,834,834,,,,,,,834,,,834,834,834,,,834',
'834,363,363,363,363,363,363,,,,363,363,,,,363,,363,363,363,363,363,363',
'363,,,,,,363,363,363,363,363,363,363,,,363,,,,,,363,363,363,363,363',
'363,363,363,363,363,363,363,,363,363,363,,363,363,,363,363,363,,,,,',
',,,,,,,,,,,,,,363,,,363,,,363,363,,,363,,363,,,,363,,,,,,,,363,,,,,363',
'363,363,363,363,363,,,,363,363,,,,,,,363,,,363,363,363,,,363,363,228',
'228,228,,228,,,,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228',
'228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228',
'228,228,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228',
',,228,228,,,228,,228,,228,,228,,,,,,,,228,,,,,228,228,228,228,228,228',
',,,228,228,,,,,,,228,,228,228,228,228,,,228,228,233,233,233,,233,,,',
'233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233',
'233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233',
',233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,',
',,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233',
',,233,233,233,,,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234',
'234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234',
',,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234',
',,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,',
',234,234,234,234,234,234,,,,234,234,,,,,,,234,,,234,234,234,,,234,234',
'235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235,,,,',
',235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235',
'235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,',
'235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235',
',,,235,235,235,,,,,,235,,,235,235,235,,,235,235,550,550,550,,550,,,',
'550,550,,,,550,,550,550,550,550,550,550,550,,,,,,550,550,550,550,550',
'550,550,,,550,,,,,,,550,,,550,550,550,550,550,550,550,550,,550,550,550',
',550,550,,,,550,,,,,,,,,,,,,,,,,,,,550,,,550,,,550,550,,,550,,,,,,,',
',,,,,,,,,,,550,550,550,550,550,550,,,,550,550,,,,,,,550,,,550,550,550',
',,550,550,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,',
'8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,',
',8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8',
'8,8,,,8,8,677,677,677,,677,,,,677,677,,,,677,,677,677,677,677,677,677',
'677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677',
'677,677,677,677,,677,677,677,,677,677,,677,677,677,,,,,,,,,,,,,,,,,',
',,677,,,677,,,677,677,,,677,,,,,,677,,,,,,,,677,,,,,677,677,677,677',
'677,677,,,,677,677,,,,,,,677,,,677,677,677,,,677,677,990,990,990,,990',
',,,990,990,,,,990,,990,990,990,990,990,990,990,,,,,,990,990,990,990',
'990,990,990,,,990,,,,,,,990,,,990,990,990,990,990,990,990,990,,990,990',
'990,,990,990,,,,990,,,,,,,,,,,,,,,,,,,,990,,,990,,,990,990,,,990,,,',
',,,,,,,,,,,,,,,990,990,990,990,990,990,,,,990,990,,,,,,,990,,,990,990',
'990,,,990,990,246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,',
',,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246',
'246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,544,544,544',
',544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,,,544,544,544',
'544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544,544,544,544',
'544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544',
'544,,,544,,544,,544,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544',
'544,,,,,,,544,,544,544,544,544,,,544,544,249,249,249,,249,,,,249,249',
',,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249',
',,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249',
'249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249',
',,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249',
'249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,',
',,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250',
'250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251',
',251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251',
'251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251',
'251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251',
',,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,',
',,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252',
',,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252',
'252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253',
',,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253',
',,,253,253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254',
'254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254',
'254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,',
'254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,',
',254,254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256',
'256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256',
',,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256',
'256,,,,,,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,',
',257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,',
',257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257',
',257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,',
',,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257',
'257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,',
',,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258',
'258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259',
',259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260',
'260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,',
',260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260',
'260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260',
',,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260',
'260,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261',
',,,261,261,,,,,,,261,,,261,261,261,,,261,261,262,262,262,,262,,,,262',
'262,,,,262,,262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262',
'262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,',
'262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,',
',,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,',
',262,262,262,,,262,262,263,263,263,,263,,,,263,263,,,,263,,263,263,263',
'263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263',
'263,263,263,263,263,263,263,,263,263,263,,263,263,,263,263,263,,,,,',
',,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263',
'263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263,263,,,263,263,264',
'264,264,,264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264',
'264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264',
'264,,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264',
',,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264',
'264,,,,,,,264,,,264,264,264,,,264,264,265,265,265,,265,,,,265,265,,',
',265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265,',
',265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265,265,,265,265',
',265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,',
',,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265',
'265,,,265,265,266,266,266,,266,,,,266,266,,,,266,,266,266,266,266,266',
'266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266',
'266,266,266,266,266,,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,',
',,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266',
'266,266,266,,,,266,266,,,,,,,266,,,266,266,266,,,266,266,267,267,267',
',267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267',
'267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267',
'267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267',
',,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,',
',,,267,,,267,267,267,,,267,267,268,268,268,,268,,,,268,268,,,,268,,268',
'268,268,268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,',
',268,,,268,268,268,268,268,268,268,268,,268,268,268,,268,268,,268,268',
'268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268',
',,,,268,268,268,268,268,268,,,,268,268,,,,,,,268,,,268,268,268,,,268',
'268,269,269,269,,269,,,,269,269,,,,269,,269,269,269,269,269,269,269',
',,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269',
'269,269,269,,269,269,269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269',
',,269,,,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269',
',,,269,269,,,,,,,269,,,269,269,269,,,269,269,270,270,270,,270,,,,270',
'270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270',
'270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,',
'270,270,,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,',
',,,270,,,,,,,,270,,,,,270,270,270,270,270,270,,,,270,270,,,,,,,270,',
',270,270,270,,,270,270,275,275,275,,275,,,,275,275,,,,275,,275,275,275',
'275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275',
'275,275,275,275,275,275,275,,275,275,275,,275,275,,275,275,275,,,,,',
',,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,275,,,,,275',
'275,275,275,275,275,,,,275,275,,,,,,,275,,,275,275,275,,,275,275,682',
'682,682,,682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,,,682',
'682,682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682,682,682',
'682,,682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682',
',,682,682,,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682',
'682,,,,,,,682,,,682,682,682,,,682,682,283,283,283,,283,,,,283,283,,',
',283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283,',
',283,,,,,,,283,,,283,283,283,283,283,283,283,283,283,283,283,283,,283',
'283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,283,',
'283,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283',
',283,283,283,283,,,283,283,542,542,542,,542,,,,542,542,,,,542,,542,542',
'542,542,542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542',
',,542,542,542,542,542,542,542,542,,542,542,542,,542,542,,,,542,,,,,',
',,,,,,,,,,,,,,542,,,542,,,542,542,,,542,,,,,,,,,,,,,,,,,,,542,542,542',
'542,542,542,,,,542,542,,,,,,,542,,,542,542,542,,,542,542,290,290,290',
',290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290',
'290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,290',
'290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290',
'290,,,290,,290,,290,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290',
'290,,,,,,,290,,290,290,290,290,,,290,290,293,293,293,,293,,,,293,293',
',,,293,,293,293,293,293,293,293,293,,,,,,293,293,293,293,293,293,293',
',,293,,,,,,,293,,,293,293,293,293,293,293,293,293,293,293,293,293,,293',
'293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,,293,,293,',
'293,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293,293,293,,,,,',
'293,,293,293,293,293,,,293,293,683,683,683,,683,,,,683,683,,,,683,,683',
'683,683,683,683,683,683,,,,,,683,683,683,683,683,683,683,,,683,,,,,',
',683,,,683,683,683,683,683,683,683,683,,683,683,683,,683,683,,683,683',
'683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683,683,,,683,,,,,,683,,,,,,,,683',
',,,,683,683,683,683,683,683,,,,683,683,,,,,,,683,,,683,683,683,,,683',
'683,300,300,300,,300,,,,300,300,,,,300,,300,300,300,300,300,300,300',
',,,,,300,300,300,300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300',
'300,300,300,,300,300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300',
',,300,,,300,300,,,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300',
',,,300,300,,,,,,,300,,,300,300,300,,,300,300,965,965,965,,965,,,,965',
'965,,,,965,,965,965,965,965,965,965,965,,,,,,965,965,965,965,965,965',
'965,,,965,,,,,,,965,,,965,965,965,965,965,965,965,965,,965,965,965,',
'965,965,,965,965,965,,,,,,,,,,,,,,,,,,,,965,,,965,,,965,965,,,965,,965',
',,,965,,,,,,,,965,,,,,965,965,965,965,965,965,,,,965,965,,,,,,,965,',
',965,965,965,,,965,965,302,302,302,,302,,,,302,302,,,,302,,302,302,302',
'302,302,302,302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302,,,302',
'302,302,302,302,302,302,302,,302,302,302,,302,302,,302,302,302,,,,,',
',,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,,,,302,,,,,,,,302,,,,,302',
'302,302,302,302,302,,,,302,302,,,,,,,302,,,302,302,302,,,302,302,305',
'305,305,,305,,,,305,305,,,,305,,305,305,305,305,305,305,305,,,,,,305',
'305,305,305,305,305,305,,,305,,,,,,,305,,,305,305,305,305,305,305,305',
'305,,305,305,305,,305,305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305',
',,305,305,,,305,,,,,,305,,,,,,,,305,,,,,305,305,305,305,305,305,,,,305',
'305,,,,,,,305,,,305,305,305,,,305,305,306,306,306,,306,,,,306,306,,',
',306,,306,306,306,306,306,306,306,,,,,,306,306,306,306,306,306,306,',
',306,,,,,,,306,,,306,306,306,306,306,306,306,306,,306,306,306,,306,306',
',306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,306,,,306,,,,,,306,',
',,,,,,306,,,,,306,306,306,306,306,306,,,,306,306,,,,,,,306,,,306,306',
'306,,,306,306,312,312,312,312,312,,,,312,312,,,,312,,312,312,312,312',
'312,312,312,,,,,,312,312,312,312,312,312,312,,,312,,,,,,312,312,,312',
'312,312,312,312,312,312,312,312,,312,312,312,,312,312,,312,312,312,',
',,,,,,,,,,,,,,,,,,312,,,312,,,312,312,,,312,,312,,,,312,,,,,,,,312,',
',,,312,312,312,312,312,312,,,,312,312,,,,,,,312,,,312,312,312,,,312',
'312,706,706,706,,706,,,,706,706,,,,706,,706,706,706,706,706,706,706',
',,,,,706,706,706,706,706,706,706,,,706,,,,,,,706,,,706,706,706,706,706',
'706,706,706,,706,706,706,,706,706,,706,706,706,,,,,,,,,,,,,,,,,,,,706',
',,706,,,706,706,,,706,,,,,,706,,,,,,,,706,,,,,706,706,706,706,706,706',
',,,706,706,,,,,,,706,,,706,706,706,,,706,706,534,534,534,534,534,,,',
'534,534,,,,534,,534,534,534,534,534,534,534,,,,,,534,534,534,534,534',
'534,534,,,534,,,,,,534,534,534,534,534,534,534,534,534,534,534,534,',
'534,534,534,,534,534,,534,534,534,,,,,,,,,,,,,,,,,,,,534,,,534,,,534',
'534,,,534,,534,,,,534,,,,,,,,534,,,,,534,534,534,534,534,534,,,,534',
'534,,,,,,534,534,,,534,534,534,,,534,534,528,528,528,,528,,,,528,528',
',,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528',
',,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528,528,528,,528',
'528,,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,528',
',,,,,,,528,,,,,528,528,528,528,528,528,,,,528,528,,,,,,,528,,,528,528',
'528,,,528,528,526,526,526,,526,,,,526,526,,,,526,,526,526,526,526,526',
'526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526,526,526',
'526,526,526,526,526,526,526,526,526,,526,526,,526,526,526,,,,,,,,,,',
',,,,,,,,,526,,,526,,,526,526,,,526,,,,526,,526,,,,,,,,526,,,,,526,526',
'526,526,526,526,,,,526,526,,,,,,,526,,526,526,526,526,,,526,526,320',
'320,320,,320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320',
'320,320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320,320,320,320',
'320,,320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320',
'320,,,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320,320,,,,320',
',,320,,,320,320,320,,,320,320,523,523,523,,523,,,,523,523,,,,523,,523',
'523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,',
',523,,,523,523,523,523,523,523,523,523,523,523,523,523,,523,523,,523',
'523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,,523,,523,,523',
',,,,,,,523,,,,,523,523,523,523,523,523,,,,523,523,,,,,,,523,,523,523',
'523,523,,,523,523,709,709,709,,709,,,,709,709,,,,709,,709,709,709,709',
'709,709,709,,,,,,709,709,709,709,709,709,709,,,709,,,,,,,709,,,709,709',
'709,709,709,709,709,709,,709,709,709,,709,709,,709,709,709,,,,,,,,,',
',,,,,,,,,,709,,,709,,,709,709,,,709,,,,,,709,,,,,,,,709,,,,,709,709',
'709,709,709,709,,,,709,709,,,,,,,709,,,709,709,709,,,709,709,713,713',
'713,,713,,,,713,713,,,,713,,713,713,713,713,713,713,713,,,,,,713,713',
'713,713,713,713,713,,,713,,,,,,,713,,,713,713,713,713,713,713,713,713',
',713,713,713,,713,713,,,,713,,,,,,,,,,,,,,,,,,,,713,,,713,,,713,713',
',,713,,,,,,,,,,,,,,,,,,,713,713,713,713,713,713,,,,713,713,,,,,,,713',
',,713,713,713,,,713,713,940,940,940,,940,,,,940,940,,,,940,,940,940',
'940,940,940,940,940,,,,,,940,940,940,940,940,940,940,,,940,,,,,,,940',
',,940,940,940,940,940,940,940,940,,940,940,940,,940,940,,,,940,,,,,',
',,,,,,,,,,,,,,940,,,940,,,940,940,,,940,,,,,,,,,,,,,,,,,,,940,940,940',
'940,940,940,,,,940,940,,,,,,,940,,,940,940,940,,,940,940,826,826,826',
',826,,,,826,826,,,,826,,826,826,826,826,826,826,826,,,,,,826,826,826',
'826,826,826,826,,,826,,,,,,,826,,,826,826,826,826,826,826,826,826,,826',
'826,826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826,,,826,826',
',,826,,,,,,826,,,,,,,,826,,,,,826,826,826,826,826,826,,,,826,826,,,',
',,,826,,,826,826,826,,,826,826,782,782,782,,782,,,,782,782,,,,782,,782',
'782,782,782,782,782,782,,,,,,782,782,782,782,782,782,782,,,782,,,,,',
',782,,,782,782,782,782,782,782,782,782,782,782,782,782,,782,782,,782',
'782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,,782,,782,,782,,782',
',,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782,,,,,,,782,,782,782',
'782,782,,,782,782,595,595,595,,595,,,,595,595,,,,595,,595,595,595,595',
'595,595,595,,,,,,595,595,595,595,595,595,595,,,595,,,,,,,595,,,595,595',
'595,595,595,595,595,595,,595,595,595,,595,595,,595,595,595,,,,,,,,,',
',,,,,,,,,,595,,,595,,,595,595,,,595,,,,,,595,,,,,,,,595,,,,,595,595',
'595,595,595,595,,,,595,595,,,,,,,595,,,595,595,595,,,595,595,636,636',
'636,,636,,,,636,636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636',
'636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636',
',636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636',
'636,,,636,,,,,,636,,,,,,,,636,,,,,636,636,636,636,636,636,,,,636,636',
',,,,,,636,,,636,636,636,,,636,636,618,618,618,,618,,,,618,618,,,,618',
',618,618,618,618,618,618,618,,,,,,618,618,618,618,618,618,618,,,618',
',,,,,,618,,,618,618,618,618,618,618,618,618,618,618,618,618,,618,618',
',618,618,618,,,,,,,,,,,,,,,,,,,,618,,,618,,,618,618,,,618,,618,,618',
',618,,,,,,,,618,,,,,618,618,618,618,618,618,,,,618,618,,,,,,,618,,618',
'618,618,618,,,618,618,665,665,665,,665,,,,665,665,,,,665,,665,665,665',
'665,665,665,665,,,,,,665,665,665,665,665,665,665,,,665,,,,,,,665,,,665',
'665,665,665,665,665,665,665,,665,665,665,,665,665,,665,665,665,,,,,',
',,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,665,,,,665,,,,,,,,665,,,,,665',
'665,665,665,665,665,,,,665,665,,,,,,,665,,,665,665,665,,,665,665,666',
'666,666,,666,,,,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666',
'666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666',
'666,,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666',
',,666,666,,,666,,,,,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'666,,,,,,,666,,,666,666,666,,,666,666,23,23,23,,23,,,,23,23,,,,23,,23',
'23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23',
'23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23',
',,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,',
'23,,,23,23,23,,,23,23,667,667,667,,667,,,,667,667,,,,667,,667,667,667',
'667,667,667,667,,,,,,667,667,667,667,667,667,667,,,667,,,,,,,667,,,667',
'667,667,667,667,667,667,667,667,667,667,667,,667,667,,667,667,667,,',
',,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,667,,667,,667,,,,,,,,667',
',,,,667,667,667,667,667,667,,,,667,667,,,,,,,667,,667,667,667,667,,',
'667,667,568,568,568,,568,,,,568,568,,,,568,,568,568,568,568,568,568',
'568,,,,,,568,568,568,568,568,568,568,,,568,,,,,,,568,,,568,568,568,568',
'568,568,568,568,568,568,568,568,,568,568,,568,568,568,,,,,,,,,,,,,,',
',,,,,568,,,568,,,568,568,,,568,,,,,,568,,,,,,,,568,,,,,568,568,568,568',
'568,568,,,,568,568,,,,,,,568,,568,568,568,568,,,568,568,565,565,565',
',565,,,,565,565,,,,565,,565,565,565,565,565,565,565,,,,,,565,565,565',
'565,565,565,565,,,565,,,,,,,565,,,565,565,565,565,565,565,565,565,565',
'565,565,565,,565,565,,565,565,565,,,,,,,,,,,,,,,,,,,,565,,,565,,,565',
'565,,,565,,565,,,,565,,,,,,,,565,,,,,565,565,565,565,565,565,,,,565',
'565,,,,,,,565,,565,565,565,565,,,565,565,670,670,670,670,670,,,,670',
'670,,,,670,,670,670,670,670,670,670,670,,,,,,670,670,670,670,670,670',
'670,,,670,,,,,,670,670,,670,670,670,670,670,670,670,670,670,,670,670',
'670,,670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670',
',670,,,,670,,,,,,,,670,,,,,670,670,670,670,670,670,,,,670,670,,,,,,',
'670,,,670,670,670,,,670,670,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32',
'32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32',
'32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32',
',,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,',
'32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33',
',,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33',
'33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33',
',33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33',
'33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34',
'34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34',
',34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34',
',,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34',
'34,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37',
'37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,',
',37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37',
'37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38',
'38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,',
'38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,',
',,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38',
',,,38,,,38,,,38,38,38,,,38,38,671,671,671,,671,,,,671,671,,,,671,,671',
'671,671,671,671,671,671,,,,,,671,671,671,671,671,671,671,,,671,,,,,',
',671,,,671,671,671,671,671,671,671,671,,671,671,671,,671,671,,671,671',
'671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,,,,,671,,,,,,,,671',
',,,,671,671,671,671,671,671,,,,671,671,,,,,,,671,,,671,671,671,,,671',
'671,674,674,674,,674,,,,674,674,,,,674,,674,674,674,674,674,674,674',
',,,,,674,674,674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674,674',
'674,674,674,674,674,674,674,,674,674,,674,674,674,,,,,,,,,,,,,,,,,,',
',674,,,674,,,674,674,,,674,,674,,674,,674,,,,,,,,674,,,,,674,674,674',
'674,674,674,,,,674,674,,,,,,,674,,674,674,674,674,,,674,674,559,559',
'559,,559,,,,559,559,,,,559,,559,559,559,559,559,559,559,,,,,,559,559',
'559,559,559,559,559,,,559,,,,,,,559,,,559,559,559,559,559,559,559,559',
',559,559,559,,559,559,,559,559,559,,,,,,,,,,,,,,,,,,,,559,,,559,,,559',
'559,,,559,,,,,,559,,,,,,,,559,,,,,559,559,559,559,559,559,,,,559,559',
',,,,,,559,,,559,559,559,,,559,559,45,45,45,,45,,,,45,45,,,,45,,45,45',
'45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45',
'45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,',
'45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45',
',,45,45,45,,,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46',
',,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46',
'46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,',
'46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46',
'46,48,48,48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48',
'48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48',
'48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,',
'48,48,48,48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,,48,48,675,675,675,',
'675,,,,675,675,,,,675,,675,675,675,675,675,675,675,,,,,,675,675,675',
'675,675,675,675,,,675,,,,,,,675,,,675,675,675,675,675,675,675,675,675',
'675,675,675,,675,675,,675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675',
'675,,,675,,,,675,,675,,,,,,,,675,,,,,675,675,675,675,675,675,,,,675',
'675,,,,,,,675,,675,675,675,675,,,675,675,1038,1038,1038,,1038,,,,1038',
'1038,,,,1038,,1038,1038,1038,1038,1038,1038,1038,,,,,,1038,1038,1038',
'1038,1038,1038,1038,,,1038,,,,,,,1038,,,1038,1038,1038,1038,1038,1038',
'1038,1038,1038,1038,1038,1038,,1038,1038,,1038,1038,1038,,,,,,,,,,,',
',,,,,,,,1038,,,1038,,,1038,1038,,,1038,,1038,,1038,,1038,,,,,,,,1038',
',,,,1038,1038,1038,1038,1038,1038,,,,1038,1038,,,,,,,1038,,1038,1038',
'1038,1038,,,1038,1038,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63',
'63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63',
'63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63',
',63,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63',
'63,,,63,63,554,554,554,,554,,,,554,554,,,,554,,554,554,554,554,554,554',
'554,,,,,,554,554,554,554,554,554,554,,,554,,,,,,,554,,,554,554,554,554',
'554,554,554,554,,554,554,554,,554,554,,554,554,554,,,,,,,,,,,,,,,,,',
',,554,,,554,,,554,554,,,554,,,,,,554,,,,,,,,554,,,,,554,554,554,554',
'554,554,,,,554,554,,,,,,,554,,,554,554,554,,,554,554,67,67,67,,67,,',
',67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,',
',,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,',
',,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67',
'67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,68,68,68,,68,,,,68,68,,,,68',
',68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68',
'68,68,68,68,68,68,,68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,',
',68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,',
',,,,68,,,68,68,68,,,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71',
'71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71',
'71,,71,71,71,,71,71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71',
',,,,,71,,,,,,,,71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71',
'71,,,71,71,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72',
'72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72',
',72,72,,,,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,',
',,,,,72,72,72,72,72,72,,,,72,72,,,,,,,72,,,72,72,72,,,72,72,553,553',
'553,,553,,,,553,553,,,,553,,553,553,553,553,553,553,553,,,,,,553,553',
'553,553,553,553,553,,,553,,,,,,,553,,,553,553,553,553,553,553,553,553',
',553,553,553,,553,553,,553,553,553,,,,,,,,,,,,,,,,,,,,553,,,553,,,553',
'553,,,553,,,,,,553,,,,,,,,553,,,,,553,553,553,553,553,553,,,,553,553',
',,,,,,553,,,553,553,553,,,553,553,126,126,126,126,126,,,,126,126,,,',
'126,,126,126,126,126,126,126,126,,,,,,126,126,126,126,126,126,126,,',
'126,,,,,,126,126,126,126,126,126,126,126,126,126,126,126,,126,126,126',
',126,126,,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,',
'126,,,,126,,,,,,,,126,,,,,126,126,126,126,126,126,,,,126,126,,,,,,126',
'126,,,126,126,126,,,126,126,131,131,131,,131,,,,131,131,,,,131,,131',
'131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131,,,131,,,,,',
',131,,,131,131,131,131,131,131,131,131,,131,131,131,,131,131,,131,131',
'131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,,,,,131,,,,,,,,131',
',,,,131,131,131,131,131,131,,,,131,131,,,,,,,131,,,131,131,131,,,131',
'131,132,132,132,,132,,,,132,132,,,,132,,132,132,132,132,132,132,132',
',,,,,132,132,132,132,132,132,132,,,132,,,,,,,132,,,132,132,132,132,132',
'132,132,132,,132,132,132,,132,132,,132,132,132,,,,,,,,,,,,,,,,,,,,132',
',,132,,,132,132,,,132,,,,,,132,,,,,,,,132,,,,,132,132,132,132,132,132',
',,,132,132,,,,,,,132,,,132,132,132,,,132,132,133,133,133,,133,,,,133',
'133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133,133,133,133',
'133,,,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133,133,133,',
'133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,',
',,,133,,,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,,,,,133,',
',133,133,133,,,133,133,134,134,134,,134,,,,134,134,,,,134,,134,134,134',
'134,134,134,134,,,,,,134,134,134,134,134,134,134,,,134,,,,,,,134,,,134',
'134,134,134,134,134,134,134,,134,134,134,,134,134,,134,134,134,,,,,',
',,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134',
'134,134,134,134,134,,,,134,134,,,,,,,134,,,134,134,134,,,134,134,135',
'135,135,135,135,,,,135,135,,,,135,,135,135,135,135,135,135,135,,,,,',
'135,135,135,135,135,135,135,,,135,,,,,,135,135,,135,135,135,135,135',
'135,135,135,135,,135,135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,',
',,135,,,135,,,135,135,,,135,,135,,,,135,,,,,,,,135,,,,,135,135,135,135',
'135,135,,,,135,135,,,,,,,135,,,135,135,135,,,135,135,676,676,676,,676',
',,,676,676,,,,676,,676,676,676,676,676,676,676,,,,,,676,676,676,676',
'676,676,676,,,676,,,,,,,676,,,676,676,676,676,676,676,676,676,,676,676',
'676,,676,676,,676,676,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676',
',,,,,676,,,,,,,,676,,,,,676,676,676,676,676,676,,,,676,676,,,,,,,676',
',,676,676,676,,,676,676,223,223,223,,223,,,,223,223,,,,223,,223,223',
'223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223',
',,223,223,223,223,223,223,223,223,,223,223,223,,223,223,,223,223,223',
',,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,223,,,,223,,,,,,,,223',
',,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,,,223,223,223,,,223',
'223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,224,,,,224,,,,,,,,224,,,,,224,224,224,224,224',
'224,,,,224,224,,,,,,,224,,,224,224,224,,,224,224,225,225,225,,225,,',
',225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225',
'225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225,225',
',225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,',
',,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225',
',,225,225,225,,,225,225,226,226,226,,226,,,,226,226,,,,226,,226,226',
'226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226',
',,226,226,226,226,226,226,226,226,,226,226,226,,226,226,,226,226,226',
',,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,',
',226,226,226,226,226,226,,,,226,226,,,,,,,226,,,226,226,226,,,226,226',
'227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,',
',227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227',
'227,227,,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,',
'227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227',
',,,227,227,,,,,,,227,,,227,227,227,,,227,227,931,931,931,,931,,,,931',
'931,,,,931,,931,931,931,931,931,931,931,,,,,,931,931,931,931,931,931',
'931,,,931,,,,,,,931,,,931,931,931,931,931,931,931,931,,931,931,931,',
'931,931,,,,931,,,,,,,,,,,,,,,,,,,,931,,,931,,,931,931,,,931,,,,,,,,',
',,,,,,,,,,931,931,931,931,931,931,,,,931,931,,,,,,,931,,,931,931,931',
',,931,931,337,337,337,,337,,,,337,337,,,,337,,337,337,337,337,337,337',
'337,,,,,,337,337,337,337,337,337,337,,,337,,,,,,,337,,,337,337,337,337',
'337,337,337,337,,337,337,337,,337,337,,,,337,,,,,,,,,,,,,,,,,,,,337',
',,337,,,337,337,,,337,,,,,,,,,,,,,,,,,,,337,337,337,337,337,337,,,,337',
'337,,,,,,,337,,,337,337,337,,,337,337,724,724,724,,724,,,,724,724,,',
',724,,724,724,724,724,724,724,724,,,,,,724,724,724,724,724,724,724,',
',724,,,,,,,724,,,724,724,724,724,724,724,724,724,,724,724,724,,724,724',
',,,724,,,,,,,,,,,,,,,,,,,,724,,,724,,,724,724,,,724,,,,,,,,,,,,,,,,',
',,724,724,724,724,724,724,,,,724,724,,,,,,,724,,,724,724,724,,,724,724',
'919,919,919,,919,,,,919,919,,,,919,,919,919,919,919,919,919,919,,,,',
',919,919,919,919,919,919,919,,,919,,,,,,,919,,,919,919,919,919,919,919',
'919,919,,919,919,919,,919,919,,919,919,919,,,,,,,,,,,,,,,,,,,,919,,',
'919,,,919,919,,,919,,,,,,919,,,,,,,,919,,,,,919,919,919,919,919,919',
',,,919,919,,,,,,,919,,,919,919,919,,,919,919,344,344,344,,344,,,,344',
'344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344,344',
'344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344,344,',
'344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,',
',,,344,,,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,',
',344,344,344,,,344,344,346,346,346,,346,,,,346,346,,,,346,,346,346,346',
'346,346,346,346,,,,,,346,346,346,346,346,346,346,,,346,,,,,,,346,,,346',
'346,346,346,346,346,346,346,,346,346,346,,346,346,,346,346,346,,,,,',
',,,,,,,,,,,,,,346,,,346,346,,346,346,,,346,,,,,,346,,,,,,,,346,,,,,346',
'346,346,346,346,346,,,,346,346,,,,,,,346,,,346,346,346,,,346,346,349',
'349,349,349,349,,,,349,349,,,,349,,349,349,349,349,349,349,349,,,,,',
'349,349,349,349,349,349,349,,,349,,,,,,349,349,,349,349,349,349,349',
'349,349,349,349,,349,349,349,,349,349,,349,349,349,,,,,,,,,,,,,,,,,',
',,349,,,349,,,349,349,,,349,,349,,,,349,,,,,,,,349,,,,,349,349,349,349',
'349,349,,,,349,349,,,,,,,349,,,349,349,349,,,349,349,918,918,918,,918',
',,,918,918,,,,918,,918,918,918,918,918,918,918,,,,,,918,918,918,918',
'918,918,918,,,918,,,,,,,918,,,918,918,918,918,918,918,918,918,918,918',
'918,918,,918,918,,918,918,918,,,,,,,,,,,,,,,,,,,,918,,,918,,,918,918',
',,918,,,,918,,918,,,,,,,,918,,,,,918,918,918,918,918,918,,,,918,918',
',,,,,,918,,918,918,918,918,,,918,918,900,900,900,,900,,,,900,900,,,',
'900,,900,900,900,900,900,900,900,,,,,,900,900,900,900,900,900,900,,',
'900,,,,,,,900,,,900,900,900,900,900,900,900,900,,900,900,900,,900,900',
',900,900,900,,,,,,,,,,,,,,,,,,,,900,,,900,,,900,900,,,900,,,,,,900,',
',,,,,,900,,,,,900,900,900,900,900,900,,,,900,900,,,,,,,900,,,900,900',
'900,,,900,900,355,355,355,,355,,,,355,355,,,,355,,355,355,355,355,355',
'355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,,355,,,355,355,355',
'355,355,355,355,355,355,355,355,355,,355,355,,355,355,355,,,,,,,,,,',
',,,,,,,,,355,,,355,,,355,355,,,355,,,,,,355,,,,,,,,355,,,,,355,355,355',
'355,355,355,,,,355,355,,,,,,,355,,355,355,355,355,,,355,355,730,730',
'730,,730,,,,730,730,,,,730,,730,730,730,730,730,730,730,,,,,,730,730',
'730,730,730,730,730,,,730,,,,,,,730,,,730,730,730,730,730,730,730,730',
',730,730,730,,730,730,,730,730,730,,,,,,,,,,,,,,,,,,,,730,,,730,,,730',
'730,,,730,,730,,,,730,,,,,,,,730,,,,,730,730,730,730,730,730,,,,730',
'730,,,,,,,730,,,730,730,730,,,730,730,362,362,362,,362,,,,362,362,,',
',362,,362,362,362,362,362,362,362,,,,,,362,362,362,362,362,362,362,',
',362,,,,,,,362,,,362,362,362,362,362,362,362,362,,362,362,362,,362,362',
',362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,362,,,362,,,,,,362,',
',,,,,,362,,,,,362,362,362,362,362,362,,,,362,362,,,,,,,362,,,362,362',
'362,,,362,362,886,886,886,,886,,,,886,886,,,,886,,886,886,886,886,886',
'886,886,,,,,,886,886,886,886,886,886,886,,,886,,,,,,,886,,,886,886,886',
'886,886,886,886,886,,886,886,886,,886,886,,886,886,886,,,,,,,,,,,,,',
',,,,,,886,,,886,,,886,886,,,886,,,,,,886,,,,,,,,886,,,,,886,886,886',
'886,886,886,,,,886,886,,,,,,,886,,,886,886,886,,,886,886,376,376,376',
',376,,,,376,376,,,,376,,376,376,376,376,376,376,376,,,,,,376,376,376',
'376,376,376,376,,,376,,,,,,,376,,,376,376,376,376,376,376,376,376,,376',
'376,376,,376,376,,,,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376,376,,,376',
',,,,,,,,,,,,,,,,,,376,376,376,376,376,376,,,,376,376,,,,,,,376,,,376',
'376,376,,,376,376,378,378,378,,378,,,,378,378,,,,378,,378,378,378,378',
'378,378,378,,,,,,378,378,378,378,378,378,378,,,378,,,,,,,378,,,378,378',
'378,378,378,378,378,378,,378,378,378,,378,378,,,,378,,,,,,,,,,,,,,,',
',,,,378,,,378,,,378,378,,,378,,,,,,,,,,,,,,,,,,,378,378,378,378,378',
'378,,,,378,378,,,,,,,378,,,378,378,378,,,378,378,749,749,749,,749,,',
',749,749,,,,749,,749,749,749,749,749,749,749,,,,,,749,749,749,749,749',
'749,749,,,749,,,,,,,749,,,749,749,749,749,749,749,749,749,,749,749,749',
',749,749,,749,749,749,,,,,,,,,,,,,,,,,,,,749,,,749,,,749,749,,,749,',
',,,,749,,,,,,,,749,,,,,749,749,749,749,749,749,,,,749,749,,,,,,,749',
',,749,749,749,,,749,749,829,829,829,,829,,,,829,829,,,,829,,829,829',
'829,829,829,829,829,,,,,,829,829,829,829,829,829,829,,,829,,,,,,,829',
',,829,829,829,829,829,829,829,829,,829,829,829,,829,829,,829,829,829',
',,,,,,,,,,,,,,,,,,,829,,,829,,,829,829,,,829,,,,,,829,,,,,,,,829,,,',
',829,829,829,829,829,829,,,,829,829,,,,,,,829,,,829,829,829,,,829,829',
'827,827,827,,827,,,,827,827,,,,827,,827,827,827,827,827,827,827,,,,',
',827,827,827,827,827,827,827,,,827,,,,,,,827,,,827,827,827,827,827,827',
'827,827,,827,827,827,,827,827,,827,827,827,,,,,,,,,,,,,,,,,,,,827,,',
'827,,,827,827,,,827,,,,,,827,,,,,,,,827,,,,,827,827,827,827,827,827',
',,,827,827,,,,,,,827,,,827,827,827,,,827,827,825,825,825,,825,,,,825',
'825,,,,825,,825,825,825,825,825,825,825,,,,,,825,825,825,825,825,825',
'825,,,825,,,,,,,825,,,825,825,825,825,825,825,825,825,,825,825,825,',
'825,825,,825,825,825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825,825,,,825,,',
',,,825,,,,,,,,825,,,,,825,825,825,825,825,825,,,,825,825,,,,,,,825,',
',825,825,825,,,825,825,824,824,824,,824,,,,824,824,,,,824,,824,824,824',
'824,824,824,824,,,,,,824,824,824,824,824,824,824,,,824,,,,,,,824,,,824',
'824,824,824,824,824,824,824,,824,824,824,,824,824,,824,824,824,,,,,',
',,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,,,,,824,,,,,,,,824,,,,,824',
'824,824,824,824,824,,,,824,824,,,,,,,824,,,824,824,824,,,824,824,770',
'770,770,,770,,,,770,770,,,,770,,770,770,770,770,770,770,770,,,,,,770',
'770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770,770,770,770,770',
'770,,770,770,770,,770,770,,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770',
',,770,770,,,770,,770,,,,770,,,,,,,,770,,,,,770,770,770,770,770,770,',
',,770,770,,,,,,,770,,,770,770,770,,,770,770,811,811,811,,811,,,,811',
'811,,,,811,,811,811,811,811,811,811,811,,,,,,811,811,811,811,811,811',
'811,,,811,,,,,,,811,,,811,811,811,811,811,811,811,811,,811,811,811,',
'811,811,,811,811,811,,,,,,,,,,,,,,,,,,,,811,,,811,,,811,811,,,811,,',
',,,811,,,,,,,,811,,,,,811,811,811,811,811,811,,,,811,811,,,,,,,811,',
',811,811,811,,,811,811,484,484,484,,484,,,,484,484,,,,484,,484,484,484',
'484,484,484,484,,,,,,484,484,484,484,484,484,484,,,484,,,,,,,484,,,484',
'484,484,484,484,484,484,484,,484,484,484,,484,484,,484,484,484,,,,,',
',,,,,,,,,,,,,,484,,,484,,,484,484,,,484,,,,,,484,,,,,,,,484,,,,,484',
'484,484,484,484,484,,,,484,484,,,,,,,484,,,484,484,484,,,484,484,483',
'483,483,,483,,,,483,483,,,,483,,483,483,483,483,483,483,483,,,,,,483',
'483,483,483,483,483,483,,,483,,,,,,,483,,,483,483,483,483,483,483,483',
'483,,483,483,483,,483,483,,483,483,483,,,,,,,,,,,,,,,,,,,,483,,,483',
',,483,483,,,483,,,,,,483,,,,,,,,483,,,,,483,483,483,483,483,483,,,,483',
'483,,,,,,,483,,,483,483,483,,,483,483,482,482,482,,482,,,,482,482,,',
',482,,482,482,482,482,482,482,482,,,,,,482,482,482,482,482,482,482,',
',482,,,,,,,482,,,482,482,482,482,482,482,482,482,,482,482,482,,482,482',
',482,482,482,,,,,,,,,,,,,,,,,,,,482,,,482,,,482,482,,,482,,,,,,482,',
',,,,,,482,,,,,482,482,482,482,482,482,,,,482,482,,,,,,,482,,,482,482',
'482,,,482,482,803,803,803,,803,,,,803,803,,,,803,,803,803,803,803,803',
'803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,,,803,,,803,803,803',
'803,803,803,803,803,,803,803,803,,803,803,,803,803,803,,,,,,,,,,,,,',
',,,,,,803,,,803,,,803,803,,,803,,,,,,803,,,,,,,,803,,,,,803,803,803',
'803,803,803,,,,803,803,,,,,,,803,,,803,803,803,,,803,803,437,437,437',
',437,,,,437,437,,,,437,,437,437,437,437,437,437,437,,,,,,437,437,437',
'437,437,437,437,,,437,,,,,,,437,,,437,437,437,437,437,437,437,437,,437',
'437,437,,437,437,,437,437,437,,,,,,,,,,,,,,,,,,,,437,,,437,,,437,437',
',,437,,,,,,437,,,,,,,,437,,,,,437,437,437,437,437,437,,,,437,437,,,',
',,,437,,,437,437,437,,,437,437,480,480,480,,480,,,,480,480,,,,480,,480',
'480,480,480,480,480,480,,,,,,480,480,480,480,480,480,480,,,480,,,,,',
',480,,,480,480,480,480,480,480,480,480,480,480,480,480,,480,480,,480',
'480,480,,,,,,,,,,,,,,,,,,,,480,,,480,,,480,480,,,480,,480,,480,,480',
',,,,,,,480,,,,,480,480,480,480,480,480,,,,480,480,,,,,,,480,,480,480',
'480,480,,,480,480,630,630,630,,630,,,,630,630,,,,630,,630,630,630,630',
'630,630,630,,,,,,630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630',
'630,630,630,630,630,630,,630,630,630,,630,630,,630,630,630,,,,,,,,,',
',,,,,,,,,,630,,,630,,,630,630,,,630,,,,,,630,,,,,,,,630,,,,,630,630',
'630,630,630,630,,,,630,630,,,,,,,630,,,630,630,630,,,630,630,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11',
'11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,',
',,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,',
',,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,',
',,11,,,,,11,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,,,,103,103,103,103,103,103,103',
'103,103,103,,,,,,103,103,103,103,103,103,103,103,103,103,103,103,,103',
',,,,,,103,103,,103,103,103,103,103,103,103,,,103,103,,,,103,103,103',
'103,,,,,,,,,,,,,,103,103,,103,103,103,103,103,103,103,103,103,103,103',
',,103,,,,,,,,,,,,,,,,,,,,103,,,,,103,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75',
'75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75',
'75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75',
'75,75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,791,791,791,791',
'791,791,791,791,791,791,791,791,791,791,791,791,791,791,791,791,791',
'791,791,791,,,,791,791,791,791,791,791,791,791,791,791,,,,,,791,791',
'791,791,791,791,791,791,791,,,791,,,,,,,,,791,791,,791,791,791,791,791',
'791,791,,,791,791,,,,791,791,791,791,,,,,,,,,,,,,,791,791,,791,791,791',
'791,791,791,791,791,791,791,791,,,791,,,,,,,,,,,,,,,,,,,,791,,,,,791',
'662,662,662,662,662,662,662,662,662,662,662,662,662,662,662,662,662',
'662,662,662,662,662,662,662,,,,662,662,662,662,662,662,662,662,662,662',
',,,,,662,662,662,662,662,662,662,662,662,,,662,,,,,,,,,662,662,,662',
'662,662,662,662,662,662,,,662,662,,,,662,662,662,662,,,,,,,,,,,,,,662',
'662,,662,662,662,662,662,662,662,662,662,662,662,,,662,662,,,,,,,,,',
'662,,,,,,,,,662,,,,,662,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12',
'12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12',
'12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12',
'12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12,428,428,428,428,428,428,428',
'428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428',
',,,428,428,428,428,428,428,428,428,428,428,,,,,,428,428,428,428,428',
'428,428,428,428,,,428,,,,,,,,,428,428,,428,428,428,428,428,428,428,',
',428,428,,,,428,428,428,428,,,,,,,,,,,,,,428,428,,428,428,428,428,428',
'428,428,428,428,428,428,,,428,428,,,,,,,,,,428,,478,478,,,478,,,428',
',,,,428,478,478,,478,478,478,478,478,478,478,,,478,478,,,,478,478,478',
'478,,,,,,478,,,,,,,,478,478,,478,478,478,478,478,478,478,478,478,478',
'478,,,478,,,,,,,,,,620,620,,,620,,,,,,478,,,620,620,478,620,620,620',
'620,620,620,620,,,620,620,,,,620,620,620,620,,,,,,620,,,,,,,,620,620',
',620,620,620,620,620,620,620,620,620,620,620,,,620,,,,,,,,,,619,619',
',,619,,,,,,620,,,619,619,620,619,619,619,619,619,619,619,,,619,619,',
',,619,619,619,619,,,,,,619,,,,,,,,619,619,,619,619,619,619,619,619,619',
'619,619,619,619,,,619,,,,,,,,,,1040,1040,,,1040,,,,,,619,,,1040,1040',
'619,1040,1040,1040,1040,1040,1040,1040,,,1040,1040,,,,1040,1040,1040',
'1040,,,,,,1040,,,,,,,,1040,1040,,1040,1040,1040,1040,1040,1040,1040',
'1040,1040,1040,1040,,,1040,,,,,,,,,,1039,1039,,,1039,,,,,,1040,,,1039',
'1039,1040,1039,1039,1039,1039,1039,1039,1039,,,1039,1039,,,,1039,1039',
'1039,1039,,,,,,1039,,,,,,,,1039,1039,,1039,1039,1039,1039,1039,1039',
'1039,1039,1039,1039,1039,,,1039,,,,,,,,,,1034,1034,,,1034,,,,,,1039',
',,1034,1034,1039,1034,1034,1034,1034,1034,1034,1034,,,1034,1034,,,,1034',
'1034,1034,1034,,,,,,1034,,,,,,,,1034,1034,,1034,1034,1034,1034,1034',
'1034,1034,1034,1034,1034,1034,,,1034,,,,,,,,,,229,229,,,229,,,,,,1034',
',,229,229,1034,229,229,229,229,229,229,229,,,229,229,,,,229,229,229',
'229,,,,,,229,,,,,,,,229,229,,229,229,229,229,229,229,229,229,229,229',
'229,,,229,,,,,,,,,,230,230,,,230,,,,,,229,,,230,230,229,230,230,230',
'230,230,230,230,,,230,230,,,,230,230,230,230,,,,,,230,,,,,,,,230,230',
',230,230,230,230,230,230,230,230,230,230,230,,358,230,358,358,358,358',
'358,,,,,279,279,,,279,358,,,,,230,,,279,279,230,279,279,279,279,279',
'279,279,,,279,279,358,358,,279,279,279,279,,,358,358,358,358,,,,,,,',
'279,279,,279,279,279,279,279,279,279,279,279,279,279,,,279,,,,,,,,,358',
'479,479,,,479,,,,,,279,,,479,479,279,479,479,479,479,479,479,479,,,479',
'479,,,,479,479,479,479,,,,,,479,,,,,,,,479,479,,479,479,479,479,479',
'479,479,479,479,479,479,,,479,,,,,,,,,,781,781,,,781,,,,,,479,,,781',
'781,479,781,781,781,781,781,781,781,,,781,781,,,,781,781,781,781,,,',
',,781,,,,,,,,781,781,,781,781,781,781,781,781,781,781,781,781,781,,',
'781,,,,,,,,,,780,780,,,780,,,,,,781,,,780,780,781,780,780,780,780,780',
'780,780,,,780,780,,,,780,780,780,780,,,,,,780,,,,,,,,780,780,,780,780',
'780,780,780,780,780,780,780,780,780,,,780,,,,,,,,,,545,545,,,545,,,',
',,780,,,545,545,780,545,545,545,545,545,545,545,,,545,545,,,,545,545',
'545,545,,,,,,545,,,,,,,,545,545,,545,545,545,545,545,545,545,545,545',
'545,545,,,545,,,,,,,,,,546,546,,,546,,,,,,545,,,546,546,545,546,546',
'546,546,546,546,546,,,546,546,,,,546,546,546,546,,,,,,546,,,,,,,,546',
'546,,546,546,546,546,546,546,546,546,546,546,546,,,546,,,,,,,,,,555',
'555,,,555,,,,,,546,,,555,555,546,555,555,555,555,555,555,555,,,555,555',
',,,555,555,555,555,,,,,,555,,,,,,,,555,555,,555,555,555,555,555,555',
'555,555,555,555,555,,,555,,,,,,,,,,556,556,,,556,,,,,,555,,,556,556',
'555,556,556,556,556,556,556,556,,,556,556,,,,556,556,556,556,,,,,,556',
',,,,,,,556,556,,556,556,556,556,556,556,556,556,556,556,556,,,556,,',
',,,,,,,669,669,,,669,,,,,,556,,,669,669,556,669,669,669,669,669,669',
'669,,,669,669,,,,669,669,669,669,,,,,,669,,,,,,,,669,669,,669,669,669',
'669,669,669,669,669,669,669,669,,,669,,,,,,,,,,668,668,,,668,,,,,,669',
',,668,668,669,668,668,668,668,668,668,668,,,668,668,,,,668,668,668,668',
',,,,,668,,,,,,,,668,668,,668,668,668,668,668,668,668,668,668,668,668',
',790,668,790,790,790,790,790,947,,947,947,947,947,947,,,790,,,,,668',
',947,,949,668,949,949,949,949,949,,,,,,,790,,,949,,,,947,,790,790,790',
'790,,,,947,947,947,947,,,,,951,949,951,951,951,951,951,,,,,,949,949',
',,951,,,,953,790,953,953,953,953,953,981,947,981,981,981,981,981,,,953',
',951,,,,,981,,,949,,,951,951,984,,984,984,984,984,984,953,,,,,,,981',
',984,,953,953,,,,981,981,981,981,,,,,,951,,,,,986,984,986,986,986,986',
'986,,,,984,984,984,984,,953,986,,,,,1060,981,1060,1060,1060,1060,1060',
'1062,,1062,1062,1062,1062,1062,,,1060,986,,,,,,1062,,984,,,986,986,789',
',789,789,789,789,789,1044,1060,1044,1044,1044,1044,1044,,1062,789,,',
'1060,1060,,,1044,,,1062,1062,,,,,986,,,,,,789,,,,,,,1044,,789,789,789',
'789,,,1060,,,1044,1044,,,1062,,,,,,,,,,,,,,,,,,,,,,,789,,,,,,,1044' ]
        racc_action_check = arr = ::Array.new(26366, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   192,  4627,  1245,   nil,   275,   nil,   nil,  6736,  1295,
   nil, 23816, 24506,   888,   nil,   854,   853,   496,   894,   298,
   235,   nil,   108, 14576,  2653,   953,   nil,   142,   nil,   156,
  1609,  1085, 15276, 15416, 15556,   nil,  4768, 15696, 15836,   nil,
   846,   362,   391,   916,   259, 16396, 16536,   -54, 16676,   844,
   774,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1345,   nil,   176, 17096,   nil,    35,   nil, 17376, 17516,   nil,
   nil, 17656, 17796,   885,   nil, 24092,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -104,   nil,   nil,   nil,   nil,   nil,   nil,   814,
   813,   812,   799, 23954,   nil,   nil,   nil,   nil,   nil,   nil,
   668,   nil,   nil,   807,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 18076,   nil,   nil,   nil,
   nil, 18216, 18356, 18496, 18636, 18776,   811,   nil,   751,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   793,   nil,  4345, 19056, 19196, 19336, 19476, 19616,  6036, 25158,
 25231,   nil,   nil,  6176,  6316,  6456,   nil,   nil,   635,   170,
   269,   864,   310,   759,   813,   nil,  7156,  2653,   806,  7436,
  7576,  7716,  7856,  7996,  8136,  8276,  8416,  8556,  8696,  8836,
  8976,  9116,  9256,  9396,  9536,  9676,  9816,  9956, 10096, 10236,
 10376,   nil,   nil,   nil,   nil, 10516,   nil,   nil,   nil, 25304,
   nil,   nil,   796, 10796,   nil,   nil,   798,   nil,   nil,   nil,
 11076,   nil,   nil, 11216,   nil,  2935,   nil,   744,   729,   nil,
 11496,   757, 11776,   nil,   nil, 11916, 12056,   nil,   nil,    87,
   nil,   nil, 12196,   814,   nil,   688,  3217,   704,   738,   688,
 12896,  3499,   585,   496,   500,   750,   482,   nil,   710,   672,
    75,   nil,   nil,   nil,   702,   247,   661, 19896,   nil,   444,
   654,   349,   nil,   652, 20316,   nil, 20456,  5191,   nil, 20596,
   623,   nil,   285,   574,   552, 21016,   nil,   nil, 25293,   423,
    -1,    54, 21296,  5896,  4909,   255,   594,   451,    62,    37,
   272,   508,    65,   230,   nil,   nil, 21576,   nil, 21716,   -26,
   474,   502,   -34,   366,   408,   506,   593,   372,   nil,   370,
   nil,   nil,   nil,   nil,   nil,   302,   nil,   231,   nil,   523,
   nil,   -61,   202,   nil,  -101,   190,   nil,  1128,    -5,   nil,
  1125,   -28,   nil,   428,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4486, 24644,   nil,
   nil,   nil,   nil,  1130,   nil,   nil,  1107, 23396,  1103,   nil,
   nil,  1080,   nil,   708,   333,  1176,   nil,   nil,  1948,   nil,
   nil,   nil,   nil,   nil,  2089,  1092,   nil,   nil,  1088,  1086,
   502,   572,  1817,   nil,   nil,   nil,   264,   396,  1120,   nil,
   nil,  1213,  1477,   nil,   nil,   nil,   153,   nil, 24720, 25377,
 23536,   341, 23116, 22976, 22836,  3217,  3076,   623,   562,  1142,
  1141,  1140,  1135,  1559,  1295,  1427,  3640,  3781,  4063,  4204,
  3922,  4345,  1100,   822,  3358,  3499,  2230,  1033,  1163,   nil,
  1737,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1025,
  1023,   nil,   nil, 13036,   nil,   nil, 12756,   nil, 12616,   nil,
   238,   nil,   nil,   nil, 12476,  1364,  1028,  1004,  1000,   nil,
   nil,   989, 10936,   989,  7296, 25596, 25669,   432,  1018,   nil,
  6596,   975,   nil, 17936, 17236, 25742, 25815,  1163,  2794, 16256,
  1089,  1079,  1327,   nil,   nil, 14996,   nil,   nil, 14856,   nil,
   974,   nil,   466,   998,   nil,   910,   nil,   954,   953,   nil,
   949,   934,   933,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   917,  1052,   nil,   nil, 13876,   nil,   nil,   nil,  1005,
   nil,   nil,   nil,   991,   nil,   nil,   995,  5614,  1026,   nil,
  5050,    31,  1027,  1026,  1016,  1018,   nil,   nil, 14156, 24866,
 24793,    68,   nil,   304,   203,   493,   nil,   468,   nil,   951,
 23676,   nil,   970,   nil,   nil,   nil, 14016,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   196,   nil,
   nil,   165,   nil,   nil,   nil,   935,   nil,   nil,   941,   nil,
   963,   nil, 24368,   nil,   952, 14296, 14436, 14716, 25961, 25888,
 15136, 15976,   674,  1000, 16116, 16816, 18916,  6876,  1013,   nil,
   nil,   nil, 10656, 11356,  1022,   nil,   nil,   369,   374,   529,
   946,  1005,  1005,   nil,   207,  1108,   171,   nil,  1030,   nil,
  1136,   nil,   nil,  1017,   nil,  1060, 12336,   nil,   nil, 13176,
   nil,   nil,  -123, 13316,  1037,   nil,  1045,     7,    32,  1084,
    -9,   434,  1087,  1049, 20036,   nil,  1114,   -33,   282,   nil,
 21156,   nil,   nil,  1057,   493,   nil,   nil,     1,  1059,   165,
   nil,   nil,   -66,  1703,   nil,  1540,   nil,  1408,   nil, 21856,
   nil,   634,   nil,  1058,   -27,  1069,   nil,   nil,   nil,   nil,
   736,   nil,  1183,   nil,   nil,   nil,   nil,   nil,  1191,   nil,
 22556,  1075,   -14,    24,    64,    66,  3781,   nil,   436,   nil,
 25523, 25450, 13736,   nil,   nil,   nil,   721,  5473,  5332, 26224,
 26023, 24230,    60,   783,  3640,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1113, 23256,  1118,   471,   474,   132,     0,   nil,
  2512, 22696,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 22416, 22276, 13596, 22136,   -86, 21996,
   nil,   nil,  1276,   nil,  5755,   nil,   nil,   101,   nil,   185,
   nil,   nil,   nil,   nil,    93,    23,   nil,   nil,   nil,   nil,
   nil,   nil,  3076,   nil,   101,   156,   nil,   nil,   nil,   nil,
   nil,  3358,  4063,   161,   184,   190,   nil,   nil,   nil,   216,
   249,   nil,   255,   301,   nil,   311,   nil,   nil,   358,   950,
   367,   810,   nil,   506,   nil,   nil, 21436,   nil,  4204,   584,
   nil,   nil,    34,    -7,   618,   404,   368,   nil,   523,  2230,
 20876,   300,   660,   665,   557,   291,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   555,   573,   477,   nil,   nil, 20736, 20176,
  2371,   601,   625,   nil,   631,   637,   639,   nil,   661,   654,
   640, 19756,   nil,   nil,   nil,   nil,  2794,  3922,   nil,   -10,
 13456,   nil,   695,   804,   734,   nil,   nil, 26030,   nil, 26048,
   nil, 26085,   nil, 26105,   nil,   nil,   nil,   nil,   198,  1338,
   710,   nil,    -7,   nil,   nil, 11636,  2089,   nil,   nil,   853,
   -93,   nil,   nil,   nil,   nil,   nil,   776,   nil,   318,   nil,
   nil, 26112,   nil,   nil, 26136,   nil, 26173,   nil,   nil,   788,
  7016,   621,   852,   nil,   901,  1948,   143,    52,   639,   869,
   116,   nil,   nil,   nil,   316,   nil,   nil,   nil,   801,   802,
   803,   808,   810,   939,   812,  1206,  2935,   nil,   314,   nil,
   nil,  2512,  2371,   818,   nil,   nil,   819,   820,   823,   827,
   nil,   828,   nil,   640, 25085,   nil,   nil,   962, 16956, 25012,
 24939,    51,   nil,  1180, 26231,   nil,   nil,   nil,   nil,  1222,
   847,    36,   nil,   nil,   nil,   969,   970,   nil,   771,   nil,
 26194,   nil, 26201,   nil,  1013,   nil,   nil,   894,   901,   nil,
   869,    11,    33,   158,    98,   nil,   873,   877,   nil,   nil,
   nil,   883,   962,   991,   994,    53,   nil,   597,   nil,   nil,
   nil,   nil,   583,   nil ]

racc_action_default = [
    -1,  -648,  -647,  -648,    -2,  -634,    -4,    -5,  -648,    -8,
    -9,  -648,  -648,  -648,   -35,  -648,  -648,   -39,  -648,  -648,
  -294,   -51,  -636,  -648,   -56,   -61,   -62,   -63,   -67,  -271,
  -271,  -271,  -308,  -341,  -342,   -79,  -647,   -83,   -91,   -93,
  -648,  -535,  -536,  -648,  -648,  -648,  -648,  -230,  -648,  -636,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -620,  -296,  -299,  -647,  -306,  -316,  -421,  -648,  -648,   -58,
   -58,  -634,  -648,  -326,  -333,  -648,  -343,  -344,  -346,  -347,
  -348,  -349,  -350,  -351,  -352,  -353,  -354,  -355,  -364,  -466,
  -467,  -468,  -469,  -470,  -471,  -647,  -474,  -647,  -647,  -647,
  -647,  -647,  -647,  -647,  -511,  -517,  -519,  -520,  -521,  -522,
  -618,  -524,  -525,  -619,  -527,  -528,  -529,  -530,  -531,  -532,
  -533,  -534,  -539,  -540,  1094,    -3,  -635,  -643,  -644,  -645,
    -7,  -648,  -648,  -648,  -648,  -648,  -648,   -23,  -648,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -134,  -135,
  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,
  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
   -28,  -131,  -647,  -648,  -648,  -648,  -648,  -648,  -647,  -648,
  -648,  -630,  -631,  -648,  -648,  -636,  -637,   -55,  -648,  -535,
  -536,  -648,  -294,  -648,  -648,  -236,  -648,  -647,  -648,  -648,
  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
  -648,  -245,  -246,  -247,  -248,  -648,  -357,  -450,  -429,  -648,
  -632,  -633,   -68,  -648,  -315,  -356,  -648,  -443,  -445,   -74,
  -647,  -440,   -75,  -636,   -76,  -251,  -266,  -647,  -647,  -270,
  -648,  -276,  -648,  -647,  -612,  -648,  -648,   -77,   -78,  -634,
   -16,   -17,  -648,   -20,   -21,   -81,  -647,  -636,  -648,   -84,
   -87,  -647,   -99,  -100,  -648,  -648,  -107,  -308,  -311,  -636,
  -433,  -341,  -342,  -345,  -441,  -648,   -89,  -648,   -95,  -304,
  -518,  -648,  -224,  -225,  -648,  -237,  -648,  -647,  -298,  -648,
  -648,  -252,  -640,  -640,  -648,  -647,  -317,  -318,  -567,   -57,
  -648,  -648,  -648,  -647,  -647,  -634,  -648,  -635,  -535,  -536,
  -648,  -648,  -294,  -648,  -374,  -375,  -648,  -329,  -648,  -122,
  -123,  -165,  -166,  -167,  -183,  -188,  -195,  -198,  -336,  -648,
  -535,  -536,  -607,  -608,  -472,  -648,  -495,  -648,  -497,  -648,
  -499,  -648,  -648,  -479,  -648,  -648,  -485,  -648,  -648,  -491,
  -648,  -648,  -493,  -648,  -510,  -512,  -513,  -514,  -515,    -6,
  -646,   -29,   -30,   -31,   -32,   -33,   -10,  -647,  -648,   -25,
   -26,   -27,  -132,  -648,   -36,   -38,  -281,  -648,  -648,  -280,
   -37,  -648,   -40,  -648,  -294,   -48,   -50,  -206,  -256,  -276,
   -52,   -53,   -41,  -207,  -256,  -636,  -261,  -262,  -647,  -647,
  -621,  -622,  -271,  -438,  -623,  -624,  -622,  -621,  -271,  -437,
  -439,  -623,  -624,   -47,  -214,   -54,  -636,  -314,  -648,  -648,
  -647,  -304,  -648,  -648,  -648,  -215,  -216,  -217,  -218,  -219,
  -220,  -221,  -222,  -226,  -227,  -228,  -229,  -231,  -232,  -233,
  -234,  -235,  -238,  -239,  -240,  -241,  -636,  -249,  -648,  -451,
  -271,  -621,  -622,   -65,   -69,  -272,  -434,  -447,  -450,  -636,
  -636,  -310,  -267,  -648,  -275,  -268,  -648,  -273,  -648,  -277,
  -648,  -615,  -617,   -15,  -635,   -19,  -648,  -636,   -80,  -302,
   -96,   -85,  -648,  -636,  -647,  -648,  -648,  -106,  -648,  -518,
  -648,   -92,   -97,  -648,  -648,  -648,  -648,  -250,  -242,  -648,
  -458,  -648,  -300,  -638,  -253,  -642,  -641,  -255,  -642,  -305,
  -648,  -610,  -640,  -648,  -422,  -567,  -425,  -606,  -606,  -550,
  -552,  -552,  -552,  -566,  -568,  -569,  -570,  -571,  -572,  -573,
  -574,  -575,  -648,  -577,  -579,  -581,  -586,  -588,  -589,  -591,
  -596,  -598,  -599,  -601,  -602,  -603,  -648,  -647,  -365,  -366,
  -647,  -648,  -648,  -648,  -648,  -648,  -360,  -453,  -647,  -648,
  -648,  -304,   -58,  -117,  -118,  -648,  -120,  -648,  -294,  -647,
  -648,  -334,  -545,  -338,  -628,  -629,  -648,  -473,  -496,  -501,
  -502,  -504,  -475,  -498,  -476,  -500,  -477,  -478,  -648,  -481,
  -483,  -648,  -484,  -487,  -488,  -648,  -489,  -490,  -648,  -516,
  -648,   -24,  -648,   -34,  -284,  -648,  -648,  -647,  -648,  -648,
  -648,  -648,  -442,  -648,  -263,  -265,  -648,  -648,   -70,  -259,
  -260,  -435,  -648,  -648,   -72,  -436,  -313,  -621,  -622,  -621,
  -622,  -636,  -648,  -428,  -647,   -64,  -430,  -447,  -648,  -448,
  -648,  -258,  -309,  -647,  -274,  -278,  -648,  -613,  -614,  -648,
   -18,   -22,   -82,  -648,   -88,   -94,  -636,  -621,  -622,  -647,
  -625,  -105,  -648,   -90,  -648,  -213,  -223,  -636,  -647,  -358,
  -647,  -297,  -363,  -636,  -640,  -307,  -611,  -648,  -636,  -648,
  -548,  -549,  -648,  -648,  -559,  -648,  -562,  -648,  -564,  -648,
  -376,  -648,  -378,  -380,  -387,  -636,  -580,  -590,  -600,  -604,
  -647,  -367,  -647,   -59,  -368,  -369,  -321,  -322,  -648,  -324,
  -648,  -636,  -621,  -622,  -625,  -303,  -647,  -117,  -118,  -119,
  -648,  -648,  -647,  -327,  -541,  -543,  -330,  -647,  -647,  -567,
  -567,  -648,  -636,  -648,  -647,  -480,  -482,  -486,  -492,  -494,
   -11,  -133,  -282,  -648,  -636,  -621,  -622,  -622,  -621,   -49,
  -257,  -648,  -639,  -647,   -43,  -209,   -44,  -210,   -71,   -45,
  -212,   -46,  -211,   -73,  -648,  -648,  -648,  -648,  -442,  -648,
  -410,  -411,  -636,  -413,  -647,  -432,  -431,  -648,  -444,  -647,
  -446,  -269,  -279,  -616,   -86,  -442,   -98,  -312,   -12,   -14,
  -359,  -361,  -647,  -465,  -459,  -647,  -460,  -461,  -301,  -254,
  -423,  -647,  -647,  -415,  -636,  -606,  -587,  -605,  -551,  -552,
  -552,  -578,  -552,  -552,  -597,  -552,  -575,  -592,  -636,  -648,
  -385,  -648,  -576,  -648,  -362,  -370,  -648,  -372,  -647,  -648,
   -60,  -323,  -648,  -442,  -648,  -117,  -118,  -121,  -636,  -647,
  -648,  -648,  -648,  -648,  -636,  -648,  -339,  -609,  -503,  -506,
  -507,  -508,  -509,  -648,  -283,  -442,   -42,  -208,  -264,  -648,
  -243,  -606,  -606,  -392,  -647,  -647,  -647,  -409,  -648,  -636,
  -575,  -583,  -584,  -594,  -452,   -66,  -647,  -647,  -464,  -648,
  -648,  -463,  -648,  -648,  -648,  -424,  -547,  -648,  -555,  -648,
  -557,  -648,  -560,  -648,  -563,  -565,  -377,  -379,  -383,  -648,
  -388,  -319,  -648,  -373,  -320,  -648,  -647,  -325,  -442,  -648,
  -648,  -331,  -335,  -337,  -544,  -546,  -545,  -505,  -648,  -390,
  -391,  -400,  -394,  -402,  -648,  -405,  -648,  -407,  -412,  -648,
  -648,  -582,  -648,  -449,  -647,  -647,  -535,  -536,  -648,  -648,
  -294,  -462,  -426,  -427,  -636,  -417,  -419,  -420,  -552,  -552,
  -552,  -552,  -381,  -648,  -386,  -648,  -647,  -278,  -647,  -328,
  -542,  -647,  -647,  -606,  -585,  -393,  -647,  -647,  -647,  -647,
  -595,  -647,  -414,  -593,  -648,  -304,   -13,  -458,  -647,  -648,
  -648,  -304,  -416,  -648,  -648,  -553,  -556,  -558,  -561,  -648,
  -384,  -647,  -454,  -455,  -456,  -648,  -648,  -389,  -648,  -397,
  -648,  -399,  -648,  -403,  -648,  -406,  -408,  -303,  -625,  -457,
  -636,  -621,  -622,  -625,  -303,  -418,  -552,  -382,  -371,  -332,
  -340,  -647,  -647,  -647,  -647,  -442,  -554,  -648,  -395,  -398,
  -401,  -404,  -647,  -396 ]

clist = [
'6,237,234,229,462,468,278,318,591,388,615,280,142,142,129,147,147,296',
'296,296,356,360,361,607,610,365,319,363,364,346,728,525,455,439,440',
'291,707,415,583,348,788,29,137,221,145,145,426,29,317,359,359,4,704',
'359,510,704,883,333,333,564,567,351,29,576,740,741,514,282,289,292,340',
'29,29,29,125,29,142,126,707,871,129,561,336,315,849,421,422,423,424',
'889,508,395,333,396,519,398,400,403,406,409,412,398,874,9,142,698,29',
'29,551,9,29,925,864,359,359,359,359,755,376,297,297,297,294,307,308',
'130,672,779,899,1007,1005,298,298,298,870,957,872,960,834,630,366,397',
'446,901,1021,446,1030,413,378,648,352,446,651,629,787,631,632,791,452',
'976,389,643,353,645,473,29,649,783,373,649,29,29,29,29,29,357,927,643',
'570,392,696,354,929,344,662,707,697,279,1004,2,1,574,525,433,860,358',
'737,890,763,428,517,434,445,704,704,445,928,450,451,518,839,445,477',
'296,694,1014,475,476,318,1052,1030,770,478,926,855,591,456,9,1007,1075',
'939,472,394,435,463,399,425,402,375,405,408,411,908,419,793,794,414',
'900,220,536,869,710,937,462,468,583,848,866,768,1024,1026,29,29,29,29',
'29,29,29,296,1050,521,957,29,29,29,296,878,136,296,736,738,636,897,936',
'691,837,29,318,456,871,347,516,318,633,538,524,524,349,733,530,355,396',
',989,874,1077,,,545,548,438,438,,714,,,611,871,129,,719,723,29,,,555',
'552,,537,29,719,700,29,543,612,613,,,1008,291,333,,,,359,1053,,1078',
'716,,1036,29,946,571,619,29,,333,,,29,549,828,315,541,,,,315,,297,,1027',
'515,129,1028,,,533,,297,534,298,520,1022,,29,845,29,,,,298,591,719,591',
'333,,333,,871,29,29,29,,,,,979,980,,,796,535,,796,,,,,,,771,,,6,,668',
'707,142,,,147,,614,673,841,,,591,591,859,893,462,468,,711,704,,1081',
'562,,,686,572,,524,524,32,661,679,145,818,,32,296,29,680,823,583,583',
'804,,685,,915,660,,456,32,472,,930,463,844,,692,,32,32,32,,32,,904,905',
'701,702,,,678,744,746,748,,,684,1069,679,,1057,,,,712,680,,,,29,715',
'902,903,32,32,,,32,9,296,,552,,,,,,,,552,856,727,456,,,,841,472,695',
',463,,,,,966,719,472,,,463,,333,,,,,,934,968,333,,,29,,,,,760,,776,762',
'32,29,446,,898,32,32,32,32,32,,,446,446,943,591,29,,446,446,995,296',
',,,814,816,,,,786,819,821,,456,,792,,764,472,703,,463,1016,,785,,,,930',
',969,930,,,,,,,,,,445,,29,,,29,,836,296,,445,445,,29,,,445,445,1054',
'142,734,456,147,,,29,472,673,,463,,29,835,,32,32,32,32,32,32,32,,,,',
'32,32,32,830,801,,145,673,,,,,524,552,32,847,29,29,,930,29,858,,,846',
',29,29,679,863,,,29,29,,680,906,853,685,857,446,,453,882,333,,,,474',
',32,,1085,916,,333,,32,894,,32,,673,873,,875,1055,1056,,887,,887,,,',
',913,,296,32,907,,809,32,813,,,,32,,,456,472,,750,673,,463,,,445,948',
'950,142,952,954,,955,,,,,,,32,,32,,,,,,524,863,,719,29,,438,32,32,32',
'29,,938,,,29,29,,,,,942,29,,,,830,,924,962,945,1070,,,,,,,,29,731,,941',
'970,956,,892,,963,983,985,987,,,,,,359,,,,,29,,,,,673,,,974,359,32,',
',,,,,,29,,,,,,,,,29,29,766,767,,769,,993,994,863,971,,,,975,18,,,,,',
'18,982,982,982,29,,29,,1045,1046,1047,1048,,,,32,1018,29,29,,,750,,',
'880,,,,18,,333,,,1009,,1010,,1011,,333,,1059,1061,1063,1065,1037,1066',
',,,,,,,29,29,19,,1020,,,1039,19,1042,,474,1051,453,,32,1029,853,1031',
',,,1086,238,,32,,,,,29,,238,238,238,333,19,324,324,,32,887,1088,1089',
'1090,1091,,,296,982,982,982,982,1093,982,,,,,29,472,456,,,18,,472,238',
'238,463,,238,370,18,887,673,1076,,,,29,,725,891,,29,29,,32,,1082,32',
'1083,,1084,750,,750,,32,,,29,,982,982,982,982,,436,449,32,,,,982,,32',
'931,1092,,,,,,,19,,,,,238,238,238,238,19,,,,,,,,865,,,,32,32,,,32,867',
',,867,,32,32,,18,,18,32,32,18,,,,,,18,,,1012,750,,,,,,,,,,18,527,,529',
',,531,532,,,,,,961,,,,,,964,815,817,,42,967,,820,822,,42,,,972,973,',
',,19,238,443,238,238,443,238,750,,750,,443,238,238,922,,,,,573,42,323',
'323,923,,19,,,18,,,,18,,,32,,18,,,,32,931,750,,931,32,32,931,,931,,',
'32,,,369,,,391,,238,1019,18,,18,,,238,,32,238,,,,,,,,18,18,,,,,,,,,',
'19,,,32,19,,,,324,19,,664,,,,,,,,,42,32,,,,324,,,917,42,32,32,931,,931',
'19,931,19,931,,,815,817,822,820,,,,,,238,19,19,18,,32,,32,1079,1080',
',931,,,627,,627,,32,32,1023,,,922,,,922,,922,867,,,923,,,923,,923,,',
',,,,,,,705,,,573,,708,,,32,32,,,,,,,,,19,42,,,,,,,,,,,,,,,,,,,32,917',
',,705,,42,573,,,,,,,,922,,922,,922,,922,,,923,18,923,,923,32,923,,,238',
'756,,,,,,,,,,922,,,,,,32,,,923,,32,32,,,,,,,,,,,,,,,42,32,,,42,,,,323',
'42,,,,,,,19,,,,,,,,324,323,238,18,,,18,,324,802,,42,,42,,,,238,705,573',
',,,,,,,42,42,,,,,,,41,,,,,391,41,391,,,,,,,,842,,,843,,,,,,,,,18,,,19',
'18,,19,41,322,322,18,18,854,,238,,18,18,,,,,,,,,238,,,42,,877,238,,',
',,,,,,,,368,,,390,,,,,,449,,,,,,,,,,443,238,,,19,,,,,,443,443,,,,,443',
'443,,,,,,914,,,,,,,,,,,,41,,,,,,,,,41,,,324,18,,,,,,,,,,324,18,18,,',
',,,18,,,,,,,,42,,,,,,,,323,18,,,,,,,323,,,,,,,,,,,,,,,,18,,,,19,,,,',
',238,,,,,19,19,,18,,,,19,,,41,,18,18,,,,573,,,,16,,,443,,42,16,,42,',
',,,,41,,,,18,,,,,,,,19,,,18,,,,,16,,,,,,,,,1017,19,,,,,,,,,19,19,,,',
',,,,,,,,18,18,42,,374,,,,,,,,238,41,19,,,41,,,,322,41,,,19,238,,,,18',
',,,,,,,322,,,,,,,323,,,41,,41,,,,,,323,991,16,18,,,19,19,41,41,998,16',
',,,,,,,,,390,,390,18,,,,,18,18,,,,,,19,,,,,,,20,,,,,,20,,,42,,,,,,,',
'1033,,,42,42,19,,,,,42,,41,,,,,20,326,326,,,,,,,19,,,,,19,19,,,,,,16',
',441,,,441,,,,,238,441,42,,,372,,,,,,,,,,16,,,,,42,,,,,,,,,42,42,,,',
',,,,,,,,,,,,,,,,,,,,,,42,,,20,,,,,,,,42,20,,,41,,,,,,,,322,16,,,,16',
',,322,,16,,,,,,,,,,391,,,,,42,42,,,997,,,,,,,16,,16,,,,,,,,,,,,,,16',
'16,,42,,,,,,,,,,41,,,41,,,,,,,,20,,444,391,,444,,,42,,,444,,,,,,,,,',
',,,,20,,,,42,,,,,42,42,,,,,16,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,20,,,,20,322,,,326,20,,,,,,,322,,,,,,,,,326,,,,,,,,,,20',
',20,,,,,,,,,,,,,,20,20,,,,,16,,,,,,,628,,628,,41,,,,,,,,,,,41,41,,,',
',,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,41,,,,16,,,16,,,,,,,,',
',,41,,,,,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,441,,41,,16,',
',,,,441,441,,,,,441,441,,,,,,,,,,,,,,,,20,390,,,,,41,41,326,,996,,,',
',,326,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,390,,,,,41,,,,,,',
',20,,,20,16,,,,,,,,,41,,16,16,,41,41,,,16,,,,,,,,,,,245,,,,,,441,,,295',
'295,295,,,,,,,,,,,342,343,,345,444,,,16,20,,,,,,444,444,,,295,,444,444',
',,,16,,,,,,,,,16,16,,,,,,,,,,,,,,,,326,,,,,,,,,,16,326,,,,,,,,,,16,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,16,,,1001,20,,,,,,,,,,,20,20,',
',,,912,20,,,,,,,16,,,,,,,,,,444,,,,,,,,,,,,,,,,,,,16,,,,20,,,,,,295',
'448,,,454,295,,,,,454,16,20,,,,16,16,,,,20,20,245,,,485,486,487,488',
'489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505',
'506,20,,,,507,,,,,,,20,295,,,,,,,295,,,295,,,,,,,295,,295,,,295,295',
',,,,,,,628,,,,,20,20,,,1000,,,,,,,,,,,,,,,,,,,,,557,,558,,,20,,,,,,295',
',,,,,,,,,,,,,,,,,628,,,,,20,,,,,,,,,,,,,,,,,,,,,20,,,,,20,20,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,295,,454,454,454,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,295,',
'295,,,,,,,,,,,,,,,,295,,,,,,,,,454,726,,,,,,,,,,,295,,,295,,,,,,,,,',
',,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,295,454,295,,,,810,,,295,295,454,454,,,,,454',
'454,,,,,,,,,,,,,,,,,,,,,,,295,,,295,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,',
',,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,295,,,,,,,,,,,,,,,',
',,,,,295,,,,,,,,454,,,,,,,,,,,,,454,454,454,454,,920,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,295,454,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295' ]
        racc_goto_table = arr = ::Array.new(3602, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,26,39,37,49,49,170,13,206,69,114,37,70,70,119,74,74,45,45,45,103,23',
'23,107,107,23,62,41,41,39,14,88,35,28,28,86,217,69,201,60,122,53,21',
'21,73,73,10,53,59,30,30,2,89,30,49,89,108,79,79,84,84,6,53,169,152,152',
'51,50,50,50,77,53,53,53,5,53,70,8,217,207,119,12,63,58,16,23,23,23,23',
'110,171,187,79,6,35,6,6,6,6,6,6,6,212,9,70,52,53,53,64,9,53,157,161',
'30,30,30,30,147,129,83,83,83,57,57,57,7,36,67,130,164,163,85,85,85,158',
'145,158,148,159,131,5,188,24,132,133,24,213,188,134,191,83,24,191,68',
'135,68,136,137,32,138,123,192,85,192,32,53,192,118,116,192,53,53,53',
'53,53,105,149,192,102,99,87,82,155,80,75,217,54,48,162,3,1,165,88,13',
'166,167,168,44,42,31,174,26,26,89,89,26,161,30,30,175,177,26,60,45,179',
'148,30,30,13,180,213,181,37,158,182,206,6,9,164,163,183,70,186,29,86',
'189,9,190,25,193,194,195,196,7,197,198,199,200,22,20,205,19,17,49,49',
'201,15,209,114,210,157,53,53,53,53,53,53,53,45,148,60,145,53,53,53,45',
'147,11,45,84,169,216,67,159,35,52,53,13,6,207,125,86,13,124,60,6,6,126',
'127,187,128,6,,161,212,148,,,37,39,83,83,,64,,,23,207,119,,49,64,53',
',,37,62,,59,53,49,171,53,59,13,13,,,158,86,79,,,,30,110,,108,35,,16',
'53,152,6,37,53,,79,,,53,77,36,58,63,,,,58,,83,,158,57,119,158,,,5,,83',
'8,85,57,122,,53,36,53,,,,85,206,49,206,79,,79,,207,53,53,53,,,,,152',
'152,,,192,9,,192,,,,,,,35,,,6,,37,217,70,,,74,,5,39,88,,,206,206,84',
'36,49,49,,10,89,,158,9,,,60,85,,6,6,56,21,6,73,51,,56,45,53,86,51,201',
'201,35,,86,,36,2,,6,56,70,,206,86,64,,39,,56,56,56,,56,,169,169,60,60',
',,50,204,204,204,,,50,14,6,,152,,,,60,86,,,,53,60,12,12,56,56,,,56,9',
'45,,62,,,,,,,,62,28,30,6,,,,88,70,50,,86,,,,,107,49,70,,,86,,79,,,,',
',12,36,79,,,53,,,,,13,,41,13,56,53,24,,35,56,56,56,56,56,,,24,24,12',
'206,53,,24,24,107,45,,,,32,32,,,,30,32,32,,6,,30,,119,70,85,,86,107',
',6,,,,206,,12,206,,,,,,,,,,26,,53,,,53,,103,45,,26,26,,53,,,26,26,114',
'70,85,6,74,,,53,70,39,,86,,53,170,,56,56,56,56,56,56,56,,,,,56,56,56',
'6,21,,73,39,,,,,6,62,56,60,53,53,,206,53,60,,,62,,53,53,6,39,,,53,53',
',86,69,6,86,6,24,,76,60,79,,,,76,,56,,36,32,,79,,56,13,,56,,39,156,',
'156,12,12,,6,,6,,,,,13,,45,56,60,,9,56,85,,,,56,,,6,70,,146,39,,86,',
',26,204,204,70,204,204,,204,,,,,,,56,,56,,,,,,6,39,,49,53,,83,56,56',
'56,53,,13,,,53,53,,,,,13,53,,,,6,,156,23,60,35,,,,,,,,53,101,,6,23,60',
',83,,13,154,154,154,,,,,,30,,,,,53,,,,,39,,,60,30,56,,,,,,,,53,,,,,',
',,,53,53,101,101,,101,,13,13,39,119,,,,119,33,,,,,,33,6,6,6,53,,53,',
'204,204,204,204,,,,56,13,53,53,,,146,,,146,,,,33,,79,,,156,,156,,156',
',79,,154,154,154,154,13,154,,,,,,,,53,53,34,,119,,,37,34,39,,76,13,76',
',56,156,6,156,,,,204,34,,56,,,,,53,,34,34,34,79,34,34,34,,56,6,154,154',
'154,154,,,45,6,6,6,6,154,6,,,,,53,70,6,,,33,,70,34,34,86,,34,34,33,6',
'39,156,,,,53,,76,101,,53,53,,56,,156,56,156,,156,146,,146,,56,,,53,',
'6,6,6,6,,81,81,56,,,,6,,56,208,156,,,,,,,34,,,,,34,34,34,34,34,,,,,',
',,151,,,,56,56,,,56,153,,,153,,56,56,,33,,33,56,56,33,,,,,,33,,,146',
'146,,,,,,,,,,33,81,,81,,,81,81,,,,,,101,,,,,,101,76,76,,66,101,,76,76',
',66,,,101,101,,,,34,34,34,34,34,34,34,146,,146,,34,34,34,151,,,,,81',
'66,66,66,153,,34,,,33,,,,33,,,56,,33,,,,56,208,146,,208,56,56,208,,208',
',,56,,,66,,,66,,34,101,33,,33,,,34,,56,34,,,,,,,,33,33,,,,,,,,,,34,',
',56,34,,,,34,34,,81,,,,,,,,,66,56,,,,34,,,76,66,56,56,208,,208,34,208',
'34,208,,,76,76,76,76,,,,,,34,34,34,33,,56,,56,101,101,,208,,,34,,34',
',56,56,151,,,151,,,151,,151,153,,,153,,,153,,153,,,,,,,,,,81,,,81,,81',
',,56,56,,,,,,,,,34,66,,,,,,,,,,,,,,,,,,,56,76,,,81,,66,81,,,,,,,,151',
',151,,151,,151,,,153,33,153,,153,56,153,,,34,81,,,,,,,,,,151,,,,,,56',
',,153,,56,56,,,,,,,,,,,,,,,66,56,,,66,,,,66,66,,,,,,,34,,,,,,,,34,66',
'34,33,,,33,,34,81,,66,,66,,,,34,81,81,,,,,,,,66,66,,,,,,,65,,,,,66,65',
'66,,,,,,,,81,,,81,,,,,,,,,33,,,34,33,,34,65,65,65,33,33,81,,34,,33,33',
',,,,,,,,34,,,66,,81,34,,,,,,,,,,,65,,,65,,,,,,81,,,,,,,,,,34,34,,,34',
',,,,,34,34,,,,,34,34,,,,,,81,,,,,,,,,,,,65,,,,,,,,,65,,,34,33,,,,,,',
',,,34,33,33,,,,,,33,,,,,,,,66,,,,,,,,66,33,,,,,,,66,,,,,,,,,,,,,,,,33',
',,,34,,,,,,34,,,,,34,34,,33,,,,34,,,65,,33,33,,,,81,,,,27,,,34,,66,27',
',66,,,,,,65,,,,33,,,,,,,,34,,,33,,,,,27,,,,,,,,,81,34,,,,,,,,,34,34',
',,,,,,,,,,,33,33,66,,27,,,,,,,,34,65,34,,,65,,,,65,65,,,34,34,,,,33',
',,,,,,,65,,,,,,,66,,,65,,65,,,,,,66,34,27,33,,,34,34,65,65,34,27,,,',
',,,,,,65,,65,33,,,,,33,33,,,,,,34,,,,,,,38,,,,,,38,,,66,,,,,,,,34,,',
'66,66,34,,,,,66,,65,,,,,38,38,38,,,,,,,34,,,,,34,34,,,,,,27,,27,,,27',
',,,,34,27,66,,,38,,,,,,,,,,27,,,,,66,,,,,,,,,66,66,,,,,,,,,,,,,,,,,',
',,,,,,,,66,,,38,,,,,,,,66,38,,,65,,,,,,,,65,27,,,,27,,,65,,27,,,,,,',
',,,66,,,,,66,66,,,66,,,,,,,27,,27,,,,,,,,,,,,,,27,27,,66,,,,,,,,,,65',
',,65,,,,,,,,38,,38,66,,38,,,66,,,38,,,,,,,,,,,,,,38,,,,66,,,,,66,66',
',,,,27,,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,38,65',
',,38,38,,,,,,,65,,,,,,,,,38,,,,,,,,,,38,,38,,,,,,,,,,,,,,38,38,,,,,27',
',,,,,,38,,38,,65,,,,,,,,,,,65,65,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',38,,,,,,,,,,,65,,,,27,,,27,,,,,,,,,,,65,,,,,,,,,65,65,,,,,,,,,,,,,',
',,,,,,,,,,,,65,,,,,,,,,27,,65,,27,,,,,,27,27,,,,,27,27,,,,,,,,,,,,,',
',,38,65,,,,,65,65,38,,65,,,,,,38,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,,,',
',,,,,,,,,,65,,,,,65,,,,,,,,38,,,38,27,,,,,,,,,65,,27,27,,65,65,,,27',
',,,,,,,,,,40,,,,,,27,,,40,40,40,,,,,,,,,,,40,40,,40,38,,,27,38,,,,,',
'38,38,,,40,,38,38,,,,27,,,,,,,,,27,27,,,,,,,,,,,,,,,,38,,,,,,,,,,27',
'38,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,27,,,27,38,,,',
',,,,,,,38,38,,,,,38,38,,,,,,,27,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,27,,,',
'38,,,,,,40,40,,,40,40,,,,,40,27,38,,,,27,27,,,,38,38,40,,,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,38,,,,40,,,,,',
',38,40,,,,,,,40,,,40,,,,,,,40,,40,,,40,40,,,,,,,,38,,,,,38,38,,,38,',
',,,,,,,,,,,,,,,,,,,40,,40,,,38,,,,,,40,,,,,,,,,,,,,,,,,,38,,,,,38,,',
',,,,,,,,,,,,,,,,,,38,,,,,38,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,40,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,,,40,,,,,,,,,40,40,,',
',,,,,,,,40,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,,40,,,40,40',
'40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,,,,,,,,,,,,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,',
',,,,,,,,,,40,,,,,,,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3602, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   190,    49,   189,   nil,    69,    -2,   117,    72,   101,
   -90,   267,  -266,   -29,  -530,  -472,  -644,  -596,   nil,  -283,
   -65,    31,   236,   -46,   -82,   166,   -22,  1781,  -190,    10,
   -18,    62,   -69,   913,   975,  -196,  -329,   -16,  1946,   -20,
  2563,   -42,  -413,   nil,  -566,   -15,   nil,   nil,   160,  -225,
    38,  -216,  -412,    39,  -327,   nil,   456,    90,    47,    12,
   -23,   nil,   -11,    44,  -229,  1550,  1181,  -498,  -223,   -66,
     1,   nil,   nil,    33,     4,  -248,   504,    26,   nil,    20,
   136,   861,   118,    87,  -293,    99,     5,  -330,  -267,  -471,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   104,
   nil,   290,  -177,   -45,   nil,   109,   nil,  -337,  -704,   nil,
  -673,   nil,   nil,   nil,  -356,   nil,    96,   nil,  -462,     9,
   nil,   nil,  -592,    85,   -96,   229,   235,  -264,   236,    45,
  -655,  -238,  -643,  -827,    74,  -477,  -232,  -476,  -747,   nil,
   nil,   nil,   nil,   nil,   nil,  -744,   191,  -475,  -744,  -656,
   nil,   379,  -513,   388,   -64,  -650,     7,  -721,  -609,  -556,
   nil,  -626,  -756,  -814,  -815,  -167,  -543,   129,  -378,  -295,
   -19,  -187,   nil,   nil,   -87,   -79,   nil,  -489,   nil,  -295,
  -799,  -396,  -506,  -625,   nil,   nil,   140,    -4,    44,   137,
   138,  -253,  -236,   139,   139,   139,  -551,  -396,  -396,   143,
  -537,  -320,   nil,   nil,   -79,  -493,  -350,  -664,   261,  -482,
  -719,   nil,  -643,  -838,   nil,   nil,  -112,  -490 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   310,     7,   367,   313,
   nil,   nil,   nil,   560,   nil,   nil,   nil,   nil,   309,   311,
   nil,   nil,   nil,   nil,    14,    15,    21,   243,   nil,   nil,
    17,   nil,   442,   244,   341,   nil,   nil,   781,   242,   350,
    24,   nil,   nil,   362,   nil,    25,    26,    27,   nil,   722,
   nil,   nil,   nil,   330,   nil,    28,   327,   457,    35,   nil,
   nil,    37,    40,    39,   nil,   239,   240,   626,   nil,   144,
   465,   143,   146,    90,    91,   nil,   447,   105,    47,    50,
   275,   301,   nil,   458,   nil,   459,   470,   681,   522,   299,
   283,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    61,   nil,   nil,   284,    65,   nil,    67,   nil,   nil,    68,
   885,    69,    70,    71,   nil,    72,   nil,    73,   nil,   608,
    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   288,
   277,   730,   852,   617,   886,   752,   590,   nil,   753,  1025,
   921,   578,   nil,   579,   nil,   nil,   580,   nil,   582,   nil,
   831,   nil,   nil,   nil,   588,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   469,   286,   nil,   nil,   699,   nil,   509,   nil,
   nil,   nil,   nil,   nil,    89,    92,    94,   nil,   nil,   nil,
   nil,   nil,   638,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   868,   790,   577,   nil,   581,   876,   593,   595,   596,
   932,   599,   600,   933,   603,   606,   nil,   304 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  3, 153, :_reduce_10,
  3, 156, :_reduce_11,
  0, 163, :_reduce_12,
  6, 158, :_reduce_13,
  3, 158, :_reduce_14,
  2, 159, :_reduce_15,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_18,
  2, 164, :_reduce_19,
  1, 165, :_reduce_none,
  0, 166, :_reduce_21,
  3, 165, :_reduce_22,
  0, 177, :_reduce_23,
  4, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  2, 155, :_reduce_28,
  3, 155, :_reduce_29,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  4, 155, :_reduce_34,
  1, 155, :_reduce_none,
  3, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  1, 155, :_reduce_none,
  3, 170, :_reduce_40,
  3, 170, :_reduce_41,
  6, 170, :_reduce_42,
  5, 170, :_reduce_43,
  5, 170, :_reduce_44,
  5, 170, :_reduce_45,
  5, 170, :_reduce_46,
  3, 170, :_reduce_47,
  1, 178, :_reduce_48,
  3, 178, :_reduce_49,
  1, 178, :_reduce_none,
  1, 176, :_reduce_none,
  3, 176, :_reduce_52,
  3, 176, :_reduce_53,
  3, 176, :_reduce_54,
  2, 176, :_reduce_55,
  1, 176, :_reduce_none,
  1, 169, :_reduce_57,
  0, 189, :_reduce_58,
  0, 190, :_reduce_59,
  4, 187, :_reduce_60,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 192, :_reduce_none,
  4, 192, :_reduce_64,
  0, 200, :_reduce_65,
  4, 197, :_reduce_66,
  1, 199, :_reduce_67,
  2, 191, :_reduce_68,
  3, 191, :_reduce_69,
  4, 191, :_reduce_70,
  5, 191, :_reduce_71,
  4, 191, :_reduce_72,
  5, 191, :_reduce_73,
  2, 191, :_reduce_74,
  2, 191, :_reduce_75,
  2, 191, :_reduce_76,
  2, 191, :_reduce_77,
  2, 191, :_reduce_78,
  1, 171, :_reduce_none,
  3, 171, :_reduce_80,
  1, 205, :_reduce_none,
  3, 205, :_reduce_82,
  1, 204, :_reduce_83,
  2, 204, :_reduce_84,
  3, 204, :_reduce_85,
  5, 204, :_reduce_86,
  2, 204, :_reduce_87,
  4, 204, :_reduce_88,
  2, 204, :_reduce_89,
  4, 204, :_reduce_90,
  1, 204, :_reduce_91,
  3, 204, :_reduce_92,
  1, 208, :_reduce_none,
  3, 208, :_reduce_94,
  2, 207, :_reduce_95,
  3, 207, :_reduce_96,
  1, 210, :_reduce_97,
  3, 210, :_reduce_98,
  1, 209, :_reduce_99,
  1, 209, :_reduce_100,
  4, 209, :_reduce_101,
  3, 209, :_reduce_102,
  3, 209, :_reduce_103,
  3, 209, :_reduce_104,
  3, 209, :_reduce_105,
  2, 209, :_reduce_106,
  1, 209, :_reduce_107,
  1, 173, :_reduce_108,
  1, 173, :_reduce_109,
  4, 173, :_reduce_110,
  3, 173, :_reduce_111,
  3, 173, :_reduce_112,
  3, 173, :_reduce_113,
  3, 173, :_reduce_114,
  2, 173, :_reduce_115,
  1, 173, :_reduce_116,
  1, 213, :_reduce_117,
  1, 213, :_reduce_none,
  2, 214, :_reduce_119,
  1, 214, :_reduce_120,
  3, 214, :_reduce_121,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_125,
  1, 215, :_reduce_126,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 167, :_reduce_129,
  1, 167, :_reduce_none,
  1, 168, :_reduce_131,
  0, 221, :_reduce_132,
  4, 168, :_reduce_133,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  3, 186, :_reduce_206,
  3, 186, :_reduce_207,
  6, 186, :_reduce_208,
  5, 186, :_reduce_209,
  5, 186, :_reduce_210,
  5, 186, :_reduce_211,
  5, 186, :_reduce_212,
  4, 186, :_reduce_213,
  3, 186, :_reduce_214,
  3, 186, :_reduce_215,
  3, 186, :_reduce_216,
  3, 186, :_reduce_217,
  3, 186, :_reduce_218,
  3, 186, :_reduce_219,
  3, 186, :_reduce_220,
  3, 186, :_reduce_221,
  3, 186, :_reduce_222,
  4, 186, :_reduce_223,
  2, 186, :_reduce_224,
  2, 186, :_reduce_225,
  3, 186, :_reduce_226,
  3, 186, :_reduce_227,
  3, 186, :_reduce_228,
  3, 186, :_reduce_229,
  1, 186, :_reduce_none,
  3, 186, :_reduce_231,
  3, 186, :_reduce_232,
  3, 186, :_reduce_233,
  3, 186, :_reduce_234,
  3, 186, :_reduce_235,
  2, 186, :_reduce_236,
  2, 186, :_reduce_237,
  3, 186, :_reduce_238,
  3, 186, :_reduce_239,
  3, 186, :_reduce_240,
  3, 186, :_reduce_241,
  3, 186, :_reduce_242,
  6, 186, :_reduce_243,
  1, 186, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  3, 224, :_reduce_249,
  3, 224, :_reduce_250,
  1, 227, :_reduce_251,
  1, 228, :_reduce_none,
  2, 228, :_reduce_253,
  4, 228, :_reduce_254,
  2, 228, :_reduce_255,
  1, 222, :_reduce_none,
  3, 222, :_reduce_257,
  3, 232, :_reduce_258,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 181, :_reduce_261,
  1, 181, :_reduce_262,
  2, 181, :_reduce_263,
  4, 181, :_reduce_264,
  2, 181, :_reduce_265,
  1, 203, :_reduce_266,
  2, 203, :_reduce_267,
  2, 203, :_reduce_268,
  4, 203, :_reduce_269,
  1, 203, :_reduce_270,
  0, 236, :_reduce_271,
  2, 196, :_reduce_272,
  2, 235, :_reduce_273,
  2, 234, :_reduce_274,
  1, 234, :_reduce_none,
  1, 229, :_reduce_276,
  2, 229, :_reduce_277,
  3, 229, :_reduce_278,
  4, 229, :_reduce_279,
  1, 175, :_reduce_280,
  1, 175, :_reduce_281,
  3, 174, :_reduce_282,
  4, 174, :_reduce_283,
  2, 174, :_reduce_284,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_295,
  0, 271, :_reduce_296,
  4, 225, :_reduce_297,
  2, 225, :_reduce_298,
  0, 272, :_reduce_299,
  0, 273, :_reduce_300,
  5, 225, :_reduce_301,
  3, 225, :_reduce_302,
  3, 225, :_reduce_303,
  2, 225, :_reduce_304,
  3, 225, :_reduce_305,
  0, 274, :_reduce_306,
  4, 225, :_reduce_307,
  1, 225, :_reduce_308,
  4, 225, :_reduce_309,
  3, 225, :_reduce_310,
  1, 225, :_reduce_311,
  5, 225, :_reduce_312,
  4, 225, :_reduce_313,
  3, 225, :_reduce_314,
  2, 225, :_reduce_315,
  1, 225, :_reduce_none,
  2, 225, :_reduce_317,
  2, 225, :_reduce_318,
  6, 225, :_reduce_319,
  6, 225, :_reduce_320,
  4, 225, :_reduce_321,
  4, 225, :_reduce_322,
  5, 225, :_reduce_323,
  4, 225, :_reduce_324,
  6, 225, :_reduce_325,
  0, 275, :_reduce_326,
  0, 276, :_reduce_327,
  7, 225, :_reduce_328,
  0, 277, :_reduce_329,
  0, 278, :_reduce_330,
  0, 279, :_reduce_331,
  9, 225, :_reduce_332,
  0, 280, :_reduce_333,
  0, 281, :_reduce_334,
  6, 225, :_reduce_335,
  0, 282, :_reduce_336,
  6, 225, :_reduce_337,
  0, 283, :_reduce_338,
  0, 284, :_reduce_339,
  9, 225, :_reduce_340,
  1, 225, :_reduce_341,
  1, 225, :_reduce_342,
  1, 225, :_reduce_343,
  1, 225, :_reduce_344,
  1, 180, :_reduce_345,
  1, 246, :_reduce_none,
  1, 252, :_reduce_none,
  1, 255, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 261, :_reduce_none,
  1, 263, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 285, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 161, :_reduce_none,
  1, 290, :_reduce_none,
  1, 247, :_reduce_none,
  1, 202, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 253, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 254, :_reduce_none,
  5, 254, :_reduce_371,
  1, 256, :_reduce_none,
  2, 256, :_reduce_373,
  1, 262, :_reduce_none,
  1, 262, :_reduce_375,
  1, 291, :_reduce_none,
  3, 291, :_reduce_377,
  1, 294, :_reduce_378,
  3, 294, :_reduce_379,
  1, 293, :_reduce_380,
  4, 293, :_reduce_381,
  6, 293, :_reduce_382,
  3, 293, :_reduce_383,
  5, 293, :_reduce_384,
  2, 293, :_reduce_385,
  4, 293, :_reduce_386,
  1, 293, :_reduce_387,
  3, 293, :_reduce_388,
  4, 295, :_reduce_389,
  2, 295, :_reduce_390,
  2, 295, :_reduce_391,
  1, 295, :_reduce_392,
  2, 300, :_reduce_393,
  1, 300, :_reduce_none,
  6, 301, :_reduce_395,
  8, 301, :_reduce_396,
  4, 301, :_reduce_397,
  6, 301, :_reduce_398,
  4, 301, :_reduce_399,
  2, 301, :_reduce_400,
  6, 301, :_reduce_401,
  2, 301, :_reduce_402,
  4, 301, :_reduce_403,
  6, 301, :_reduce_404,
  2, 301, :_reduce_405,
  4, 301, :_reduce_406,
  2, 301, :_reduce_407,
  4, 301, :_reduce_408,
  1, 301, :_reduce_409,
  1, 305, :_reduce_410,
  1, 305, :_reduce_411,
  3, 306, :_reduce_412,
  1, 306, :_reduce_413,
  4, 306, :_reduce_414,
  1, 307, :_reduce_none,
  4, 307, :_reduce_416,
  1, 308, :_reduce_417,
  3, 308, :_reduce_418,
  1, 309, :_reduce_419,
  1, 309, :_reduce_none,
  0, 313, :_reduce_421,
  0, 314, :_reduce_422,
  4, 251, :_reduce_423,
  4, 311, :_reduce_424,
  1, 311, :_reduce_425,
  3, 312, :_reduce_426,
  3, 312, :_reduce_427,
  3, 316, :_reduce_428,
  2, 193, :_reduce_429,
  4, 193, :_reduce_430,
  5, 193, :_reduce_431,
  5, 193, :_reduce_432,
  0, 319, :_reduce_433,
  3, 250, :_reduce_434,
  4, 250, :_reduce_435,
  4, 250, :_reduce_436,
  3, 250, :_reduce_437,
  3, 250, :_reduce_438,
  3, 250, :_reduce_439,
  2, 250, :_reduce_440,
  1, 250, :_reduce_441,
  4, 250, :_reduce_442,
  0, 320, :_reduce_443,
  4, 249, :_reduce_444,
  0, 321, :_reduce_445,
  4, 249, :_reduce_446,
  0, 322, :_reduce_447,
  0, 323, :_reduce_448,
  4, 198, :_reduce_449,
  0, 324, :_reduce_450,
  0, 325, :_reduce_451,
  4, 317, :_reduce_452,
  0, 327, :_reduce_453,
  6, 260, :_reduce_454,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  6, 160, :_reduce_457,
  0, 160, :_reduce_458,
  1, 328, :_reduce_459,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  2, 329, :_reduce_462,
  1, 329, :_reduce_none,
  2, 162, :_reduce_464,
  1, 162, :_reduce_none,
  1, 237, :_reduce_466,
  1, 237, :_reduce_467,
  1, 237, :_reduce_none,
  1, 238, :_reduce_469,
  1, 331, :_reduce_470,
  1, 331, :_reduce_none,
  2, 331, :_reduce_472,
  3, 332, :_reduce_473,
  1, 332, :_reduce_474,
  3, 239, :_reduce_475,
  3, 240, :_reduce_476,
  3, 241, :_reduce_477,
  3, 241, :_reduce_478,
  1, 336, :_reduce_479,
  3, 336, :_reduce_480,
  1, 337, :_reduce_none,
  2, 337, :_reduce_482,
  3, 243, :_reduce_483,
  3, 243, :_reduce_484,
  1, 339, :_reduce_485,
  3, 339, :_reduce_486,
  3, 242, :_reduce_487,
  3, 242, :_reduce_488,
  3, 244, :_reduce_489,
  3, 244, :_reduce_490,
  1, 340, :_reduce_491,
  3, 340, :_reduce_492,
  1, 341, :_reduce_493,
  3, 341, :_reduce_494,
  1, 333, :_reduce_495,
  2, 333, :_reduce_496,
  1, 334, :_reduce_497,
  2, 334, :_reduce_498,
  1, 335, :_reduce_499,
  2, 335, :_reduce_500,
  1, 338, :_reduce_501,
  0, 343, :_reduce_502,
  3, 338, :_reduce_503,
  0, 344, :_reduce_504,
  4, 338, :_reduce_505,
  1, 342, :_reduce_506,
  1, 342, :_reduce_507,
  1, 342, :_reduce_508,
  1, 342, :_reduce_none,
  2, 219, :_reduce_510,
  1, 219, :_reduce_511,
  1, 345, :_reduce_none,
  1, 345, :_reduce_none,
  1, 345, :_reduce_none,
  1, 345, :_reduce_none,
  3, 220, :_reduce_516,
  1, 330, :_reduce_none,
  2, 330, :_reduce_518,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_528,
  1, 212, :_reduce_529,
  1, 212, :_reduce_530,
  1, 212, :_reduce_531,
  1, 212, :_reduce_532,
  1, 212, :_reduce_533,
  1, 212, :_reduce_534,
  1, 245, :_reduce_535,
  1, 245, :_reduce_536,
  1, 179, :_reduce_537,
  1, 179, :_reduce_538,
  1, 184, :_reduce_539,
  1, 184, :_reduce_540,
  0, 346, :_reduce_541,
  4, 264, :_reduce_542,
  1, 264, :_reduce_543,
  3, 268, :_reduce_544,
  0, 348, :_reduce_545,
  3, 268, :_reduce_546,
  4, 347, :_reduce_547,
  2, 347, :_reduce_548,
  2, 347, :_reduce_549,
  1, 347, :_reduce_none,
  2, 350, :_reduce_551,
  0, 350, :_reduce_552,
  6, 315, :_reduce_553,
  8, 315, :_reduce_554,
  4, 315, :_reduce_555,
  6, 315, :_reduce_556,
  4, 315, :_reduce_557,
  6, 315, :_reduce_558,
  2, 315, :_reduce_559,
  4, 315, :_reduce_560,
  6, 315, :_reduce_561,
  2, 315, :_reduce_562,
  4, 315, :_reduce_563,
  2, 315, :_reduce_564,
  4, 315, :_reduce_565,
  1, 315, :_reduce_566,
  0, 315, :_reduce_567,
  1, 310, :_reduce_568,
  1, 310, :_reduce_569,
  1, 310, :_reduce_570,
  1, 310, :_reduce_571,
  1, 292, :_reduce_none,
  1, 292, :_reduce_573,
  1, 352, :_reduce_none,
  1, 353, :_reduce_none,
  3, 353, :_reduce_576,
  1, 302, :_reduce_577,
  3, 302, :_reduce_578,
  1, 354, :_reduce_none,
  2, 355, :_reduce_580,
  1, 355, :_reduce_581,
  2, 356, :_reduce_582,
  1, 356, :_reduce_583,
  1, 296, :_reduce_none,
  3, 296, :_reduce_585,
  1, 349, :_reduce_none,
  3, 349, :_reduce_587,
  1, 357, :_reduce_none,
  1, 357, :_reduce_none,
  2, 297, :_reduce_590,
  1, 297, :_reduce_591,
  3, 358, :_reduce_592,
  3, 359, :_reduce_593,
  1, 303, :_reduce_594,
  3, 303, :_reduce_595,
  1, 351, :_reduce_596,
  3, 351, :_reduce_597,
  1, 360, :_reduce_none,
  1, 360, :_reduce_none,
  2, 304, :_reduce_600,
  1, 304, :_reduce_601,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 299, :_reduce_604,
  2, 298, :_reduce_605,
  0, 298, :_reduce_606,
  1, 269, :_reduce_none,
  0, 362, :_reduce_608,
  4, 269, :_reduce_609,
  1, 248, :_reduce_610,
  2, 248, :_reduce_611,
  1, 231, :_reduce_none,
  3, 231, :_reduce_613,
  3, 363, :_reduce_614,
  2, 363, :_reduce_615,
  4, 363, :_reduce_616,
  2, 363, :_reduce_617,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  2, 206, :_reduce_none,
  2, 182, :_reduce_none,
  0, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 265, :_reduce_643,
  1, 265, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_646,
  0, 152, :_reduce_647 ]

racc_reduce_n = 648

racc_shift_n = 1094

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@3",
  "stmts",
  "stmt_or_begin",
  "@4",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@10",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@25",
  "@26",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@27",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "@38",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      _, _, block = val
                      result = block
                    
    result
end

def _reduce_11(val, _values, result)
                      _, stmt, _ = val
                      result = new_iter s(:preexe), 0, stmt
                    
    result
end

def _reduce_12(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res
                    
    result
end

def _reduce_13(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]
                    
    result
end

def _reduce_14(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_22(val, _values, result)
                      _, _, stmt = val
                      result = stmt
                    
    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_24(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_28(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_29(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_30(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val
                      result = new_rescue body, new_resbody(s(:array), resbody)
                    
    result
end

def _reduce_34(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_37(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr
                    
    result
end

def _reduce_49(val, _values, result)
                      expr, _, resbody = val
                      expr = value_expr expr
                      result = new_rescue(expr, new_resbody(s(:array), resbody))
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_53(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_55(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend
                    
    result
end

def _reduce_67(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_70(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_88(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_89(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_90(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_91(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_97(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_109(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_110(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_111(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_114(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_115(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_121(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = :expr_end
                      result = sym
                    
    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_208(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_211(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_212(val, _values, result)
                      # TODO: assignment
                      raise "not yet: %p" % [val]
                    
    result
end

def _reduce_213(val, _values, result)
                      # TODO: assignment
                      raise "not yet: %p" % [val]
                    
    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn
                    
    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, _, resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody
                      result  = new_rescue(body, new_resbody(s(:array), resbody))
                    
    result
end

def _reduce_258(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_267(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_271(val, _values, result)
                      result = lexer.cmdarg.store true
                    
    result
end

def _reduce_272(val, _values, result)
                      lexer.cmdarg.restore val[0]
                      result = val[1]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_278(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_296(val, _values, result)
                      result = self.lexer.lineno
                      # TODO:
                      # $<val>1 = cmdarg_stack;
                      # CMDARG_SET(0);
                    
    result
end

def _reduce_297(val, _values, result)
                      # TODO: CMDARG_SET($<val>1);
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_298(val, _values, result)
                      # TODO: lex_state = :expr_endarg in between
                      debug20 13, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      result = lexer.cmdarg.store false
                      # result = self.lexer.cmdarg.stack.dup
                      # lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_301(val, _values, result)
                      _, cmdarg, stmt, _, _, = val
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.restore cmdarg
                      result = stmt
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_303(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_304(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_306(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_308(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_312(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_314(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_315(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 316 omitted

def _reduce_317(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_318(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f
                    
    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t
                    
    result
end

def _reduce_321(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true
                    
    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true
                    
    result
end

def _reduce_323(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_324(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_325(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_331(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_334(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_337(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_338(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_339(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_340(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_343(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_345(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_380(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_381(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_382(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_383(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_384(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_385(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_386(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_387(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_388(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_389(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_410(val, _values, result)
 result = 0 
    result
end

def _reduce_411(val, _values, result)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:args)
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_417(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_418(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.cmdarg.store(false), self.lexer.lineno]
                    
    result
end

def _reduce_423(val, _values, result)
                      lpar, args, (cmdarg, lineno), body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.lexpop

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      result.line = lineno
                      self.env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_425(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      # TODO: maybe fix lineno to kDO's lineno?
                      result = val[1]
                    
    result
end

def _reduce_429(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_431(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_432(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_443(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_444(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_447(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_448(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_449(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?
                    
    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                    
    result
end

def _reduce_453(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 455 omitted

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_470(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_487(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_494(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_496(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_502(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_503(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_505(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_506(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_507(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_508(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_529(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_530(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_531(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_532(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_533(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_534(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_535(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_537(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_539(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_540(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_541(val, _values, result)
                      lexer.lex_state = :expr_beg
                      lexer.command_start = true
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_545(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      # TODO: self.lexer.lex_state |= :expr_label
                    
    result
end

def _reduce_546(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = :expr_beg
                      lexer.command_start = true
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      result = args val
                    
    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_553(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_554(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_555(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_556(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_557(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_558(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_559(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_560(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_562(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_564(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_577(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_578(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_581(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_582(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_583(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      result = args val
                    
    result
end

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"
                    
    result
end

def _reduce_591(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_592(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_593(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

def _reduce_600(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_601(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_605(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_606(val, _values, result)
                      result = nil
                    
    result
end

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_609(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_610(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_611(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 612 omitted

def _reduce_613(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_614(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_615(val, _values, result)
                      (label, _), arg = val
                      result = s(:array, s(:lit, label.to_sym), arg)
                    
    result
end

def _reduce_616(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_617(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

def _reduce_643(val, _values, result)
 yyerrok 
    result
end

# reduce 644 omitted

# reduce 645 omitted

def _reduce_646(val, _values, result)
 yyerrok 
    result
end

def _reduce_647(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby25Parser
