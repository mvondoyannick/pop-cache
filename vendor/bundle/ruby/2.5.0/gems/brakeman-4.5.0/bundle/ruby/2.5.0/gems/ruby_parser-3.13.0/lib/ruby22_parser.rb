#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-303,-110,608,-113,-111,608,235,-303,-303,-303,918,608,-303,-303,-303',
'284,-303,234,657,654,225,226,741,-635,255,832,-303,-303,-303,-111,-110',
'861,-108,128,-537,946,-303,-303,127,-303,-303,-303,-303,-303,608,-102',
'608,-104,-109,-115,948,764,832,235,225,226,252,-113,235,831,254,253',
'-116,887,-112,615,-110,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,656,653,-303,-303,-303,831,826,-303,-114,-108',
'-303,284,-112,-303,-303,776,-303,284,-303,777,-303,286,-303,-303,-303',
'-303,-303,-303,-303,235,-303,-102,-303,-104,-110,128,-113,-111,128,-110',
'127,-113,-111,127,128,-303,-303,-303,-303,127,-303,-625,-303,-102,-101',
'860,-99,-303,-625,-625,-625,-621,-114,235,-625,-625,-102,-625,-104,-102',
'128,-104,-100,-106,-622,127,-625,128,-621,128,964,-104,127,-102,127',
'-104,-107,-625,-625,950,-625,-625,-625,-625,-625,225,226,-112,286,-530',
'225,226,-112,284,286,588,-530,585,584,583,-538,586,-442,-105,638,481',
'952,-103,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,231,-94,-625,-625,-625,849,682,619,638,95,-625,850,-618,-625',
'-526,-80,617,96,-625,952,-625,-526,-625,-625,-625,-625,-625,-625,-625',
'232,-625,-625,-625,-442,-109,638,-433,232,235,-116,-442,-625,-625,640',
'639,-625,-625,-523,-625,-442,-625,1012,796,235,-523,-523,-523,-625,286',
'-523,-523,-523,-112,-523,958,-523,731,-442,731,640,639,-523,-523,-523',
'-523,-523,255,-618,794,-107,-619,-523,539,-523,-523,-116,-523,-523,-523',
'-523,-523,106,107,-116,-625,-625,640,639,641,-618,638,-625,-625,638',
'106,107,-621,-621,252,731,-625,-625,254,253,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,-523,-523,-523,-523,-625,-625,-523,-523,-523',
'-526,-523,-523,-523,538,-523,235,-526,-523,-523,-523,-523,-619,-523',
'235,-523,-526,-523,-523,-523,-523,-523,-523,-523,593,-523,-79,-523,640',
'639,636,640,639,651,-619,596,638,108,109,643,-523,-523,-523,-523,638',
'-523,-526,-523,552,708,108,109,-523,-526,-526,-526,823,-523,-526,-526',
'-526,588,-526,585,584,583,593,586,604,603,-526,824,-526,-526,-526,565',
'675,596,567,676,810,731,-526,-526,231,-526,-526,-526,-526,-526,588,779',
'585,584,583,731,586,640,639,591,781,235,597,976,-115,640,639,658,638',
'-279,604,603,-111,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-113,1063,-526,-526,-526,-111,-526,-526,-113,-110',
'-526,527,-537,-526,-526,638,-526,597,-526,-538,-526,977,-526,-526,-526',
'-526,-526,-526,-526,593,-526,565,-526,588,564,585,584,583,593,586,596',
'880,640,639,636,-526,-526,-526,-526,596,-526,-303,-526,552,-99,675,676',
'-526,-303,-303,-303,-100,-526,231,-303,-303,565,-303,-108,567,555,591',
'741,604,603,-109,640,639,646,479,601,600,604,603,604,603,980,-303,-303',
'633,-303,-303,-303,-303,-303,-106,634,-102,-104,231,983,-304,985,231',
'987,810,478,597,-304,-115,280,-111,-113,272,273,479,597,-304,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,883,887',
'-303,-303,-303,588,681,585,584,583,-303,586,-529,-303,-528,-101,271',
'270,-303,-529,-303,-528,-303,-303,-303,-303,-303,-303,-303,-110,-303',
'588,-303,585,584,583,255,586,588,235,585,584,583,750,586,-303,-303,-303',
'-105,989,-303,231,957,525,-303,-303,-303,-303,668,-531,-303,-303,-114',
'-303,255,522,-531,666,252,750,-534,289,254,253,250,251,750,-534,753',
'235,265,266,1042,-303,-303,753,-303,-303,-303,-303,-303,565,-532,512',
'567,234,252,-533,258,-532,254,253,250,251,-533,1001,256,588,257,585',
'584,583,1002,586,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,483,255,-303,-303,-303,588,681,585,584,583,-303,586,482',
'-303,128,480,128,750,-303,127,-303,127,-303,-303,-303,-303,-303,-303',
'-303,128,-303,128,-303,252,127,-294,127,254,253,250,251,431,-294,750',
'128,-303,-303,-625,-303,127,-303,-294,1014,428,-625,-625,-625,-303,430',
'429,-625,-625,-114,-625,255,-647,-647,-647,-647,272,273,426,-625,-647',
'-647,131,132,133,134,135,265,266,409,-625,-625,731,-625,-625,-625,-625',
'-625,588,788,585,584,583,252,586,258,406,254,253,250,251,271,270,256',
'588,257,585,584,583,403,586,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,-625,400,750,-625,-625,-625,588,682,585,584',
'583,-625,586,1031,-625,883,887,376,750,-625,1034,-625,849,-625,-625',
'-625,-625,-625,-625,-625,1040,-625,-625,-625,225,226,231,1043,-303,225',
'226,952,952,1033,750,-303,-625,-625,-625,-103,-622,-625,781,952,-303',
'-625,-625,-625,-625,1048,-625,-625,-625,-112,-625,255,1014,235,741,1057',
'-535,1059,1061,-625,-625,-625,-625,-535,1063,1063,338,265,266,728,-625',
'-625,-535,-625,-625,-625,-625,-625,131,132,133,134,135,252,-536,258',
'337,254,253,250,251,-536,275,256,1014,257,731,731,227,224,-536,-625',
'-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-622',
'-621,-625,-625,-625,231,825,-625,235,223,-625,222,1039,-625,-625,952',
'-625,255,-625,1014,-625,1037,-625,-625,-625,-625,-625,-625,-625,1086',
'-625,-625,-625,265,266,-294,731,1005,734,585,584,583,-294,586,527,-625',
'-625,-625,-625,252,-625,-294,-625,254,253,250,251,-625,738,728,741,742',
'-112,311,85,86,87,12,78,744,746,-345,79,80,748,756,757,83,-345,81,82',
'84,33,34,76,77,758,-345,723,760,558,88,31,30,116,115,117,118,908,909',
'22,731,910,122,123,670,11,49,313,13,120,119,121,110,60,112,111,113,731',
'114,122,123,615,106,107,731,45,46,44,255,259,260,261,262,272,273,267',
'268,263,264,231,248,249,-536,235,265,266,545,43,712,-536,36,-94,235',
'62,63,543,426,64,-536,38,252,783,258,48,254,253,250,251,271,270,256',
'23,257,235,788,231,103,95,97,98,99,101,1033,235,692,96,104,797,269,798',
'-251,781,799,66,-277,1063,93,100,102,811,512,108,109,311,85,86,87,12',
'78,255,512,-535,79,80,1063,1063,255,83,-535,81,82,84,33,34,76,77,255',
'-535,235,828,275,88,31,30,116,115,117,118,255,837,22,839,525,527,723',
'670,11,49,313,13,120,119,121,110,60,112,111,113,235,114,122,123,289',
'106,107,289,45,46,44,255,259,260,261,262,272,273,267,268,263,264,-304',
'248,249,-304,674,265,266,-304,43,289,-304,36,723,673,62,63,-304,255',
'64,-304,38,252,235,258,48,254,253,250,251,271,270,256,23,257,669,235',
'-303,103,95,97,98,99,101,-303,231,235,96,104,-622,269,665,230,-303,664',
'66,-276,662,93,100,102,228,655,108,109,311,85,86,87,12,78,878,652,235',
'79,80,887,731,649,83,235,81,82,84,33,34,76,77,131,132,133,134,135,88',
'31,30,116,115,117,118,645,1005,22,585,584,583,621,586,11,49,313,13,120',
'119,121,110,60,112,111,113,620,114,122,123,419,106,107,-278,45,46,44',
'255,259,260,261,262,272,273,267,268,263,264,-303,248,249,615,235,265',
'266,-303,43,124,568,36,-622,917,62,63,-303,562,64,255,38,252,3,258,48',
'254,253,250,251,271,270,256,23,257,553,549,289,103,95,97,98,99,101,934',
'723,235,96,104,292,269,-276,939,546,943,66,,,93,100,102,,,108,109,311',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,131,132,133,134',
'135,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,,269,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265',
'266,,43,,,315,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102,,,108',
'109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273',
'267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
'235,269,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265,266,,43',
',,315,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257',
',,,103,95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102,,,108,109',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269',
',,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'-647,-647,-647,-647,272,273,,,-647,-647,,,,,,265,266,,43,,,36,,,62,63',
',,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,255,-647,-647,-647,-647,272,273,,,-647,-647,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,-647,-647,-647,-647,272',
'273,,,-647,-647,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,-647',
'-647,-647,-647,272,273,,,-647,-647,,,,,,265,266,,43,,,315,,,62,63,,',
'64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,255,-647,-647,-647,-647,272,273,,,-647,-647,,,,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,,263',
'264,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251',
'271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,-647,-647,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,255,259,260,261,262,272,273,267,268,263,264,,-647,-647,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,,,263,264',
',,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271',
'270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,,,,,,,,,,,,,,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,255,,,,,,,,,,,,,,,,265,266,,43,,,36,,,62,63,',
',64,,38,252,,258,48,254,253,250,251,,,,23,,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
',49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,705,,,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104',
',,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,',
',,49,,,120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245',
',,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66',
',305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99',
'101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,319,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,334,,,,,,,,,,,,,,,,,,,,324,,,246,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,336,,,66,,,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66',
',305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
'304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,301,,,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,',
',,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,,,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'116,115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,370,,,36,,,62,63,,,64,,38',
',,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,991,,,246,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,419,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,',
'64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,705,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,',
'96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,436,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,436,,,,48,,,,,',
',,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97',
'98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,235,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',,,334,,,,,,,,,,,,,,,,,,,,998,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97',
'98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48',
',,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
'304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104',
'235,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,',
',,,,,,,,,,,,,991,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104',
',,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,',
'328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,',
',,,,,,,,,,,,,,,,,324,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,541,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,558,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,',
',,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,328,,,120,119,121,622,60,112,111,623,,114,122,123,,106',
'107,,,,334,,,,,,,,,,,,,,,,,,,,624,,,246,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,328,,,120,119,121,622,60,112,111,623,,114,122',
'123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,624,,,246,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,',
',,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,301,,,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,436,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,',
',,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,',
'328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,',
',,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,705,,299,,48,,,,,,,,245,,,,,103,302,97,98,99',
'101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
'304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104',
',,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,802,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,705,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,',
',,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,',
',,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245',
',,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,419,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,',
',,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66',
',305,93,100,102,-626,,108,109,,,,-626,-626,-626,,,-626,-626,-626,588',
'-626,585,584,583,593,586,,,,-626,-626,-626,-626,,,596,,,,,-626,-626',
',-626,-626,-626,-626,-626,,,,,,,,,,591,,,,,,,,,601,600,604,603,,-626',
'-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,,,-626',
'-626,-626,,,-626,,,-626,,,-626,-626,,-626,597,-626,,-626,,-626,-626',
'-626,-626,-626,-626,-626,,-626,-626,-626,588,,585,584,583,593,586,,',
',,,-626,-626,-626,-626,596,-626,-311,-626,,,,,-626,-311,-311,-311,,',
'-311,-311,-311,,-311,,,,591,,,,,,-311,-311,,,,604,603,,,,-311,-311,',
'-311,-311,-311,-311,-311,,,,,,,,,,,,,,,,,,,,,,597,,-311,-311,-311,-311',
'-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,,,-311,-311,-311,',
',-311,,292,-311,,,-311,-311,,-311,,-311,,-311,,-311,-311,-311,-311,-311',
'-311,-311,,-311,,-311,,,,,,,,,,,,,-311,-311,-295,-311,,-311,,,,-295',
'-295,-295,-311,,-295,-295,-295,588,-295,585,584,583,593,586,,,,,-295',
'-295,-295,,,596,,,,,-295,-295,,-295,-295,-295,-295,-295,,,,,,,,,,591',
',,,,,,,,601,600,604,603,,-295,-295,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,,,-295,-295,-295,,,-295,,,-295,,,-295,-295',
',-295,597,-295,,-295,,-295,-295,-295,-295,-295,-295,-295,,-295,,-295',
'588,,585,584,583,593,586,,,,,,-295,-295,-295,-295,596,-295,-441,-295',
',,,,-295,-441,-441,-441,,,-441,-441,-441,,-441,,,,591,,,,,-441,-441',
'-441,,601,600,604,603,,,,-441,-441,,-441,-441,-441,-441,-441,,,,,,,',
',,,,,,,,,,,,,,597,,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441',
'-441,-441,-441,-441,,,-441,-441,-441,,,-441,,289,-441,,,-441,-441,,-441',
',-441,,-441,,-441,-441,-441,-441,-441,-441,-441,,-441,-441,-441,,,,',
',,,,,,,,-441,-441,-627,-441,,-441,,,,-627,-627,-627,-441,,-627,-627',
'-627,588,-627,585,584,583,593,586,,,,-627,-627,-627,-627,,,596,,,,,-627',
'-627,,-627,-627,-627,-627,-627,,,,,,,,,,591,,,,,,,,,601,600,604,603',
',-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627',
',,-627,-627,-627,,,-627,,,-627,,,-627,-627,,-627,597,-627,,-627,,-627',
'-627,-627,-627,-627,-627,-627,,-627,-627,-627,588,,585,584,583,593,586',
',,,,,-627,-627,-627,-627,596,-627,-646,-627,,,,,-627,-646,-646,-646',
',,-646,-646,-646,,-646,,,,591,,,,,-646,-646,,,,,604,603,,,,-646,-646',
',-646,-646,-646,-646,-646,,,,,,,,,,,,,,,,,,,,,,597,,,,,,,,,,,,,-646',
',-646,,,,,-646,,-646,-646,-646,289,-646,-646,-646,-646,588,-646,585',
'584,583,593,586,,,,-646,-646,-646,,,,596,-646,-646,,,-646,-646,,-646',
'-646,-646,-646,-646,,,-646,,,,,-646,,591,,,,,-646,,,,,,604,603,,-646',
'-646,-646,-646,-646,-646,-646,-646,-646,-646,-646,-646,-646,-646,,,-646',
'-646,-646,,,-646,,289,-646,,,-646,-646,,-646,597,-646,,-646,,-646,-646',
'-646,-646,-646,-646,-646,,-646,-646,-646,,,,,,,,,,,,,-646,-646,,-646',
',-646,,,,,,,-646,189,200,190,213,186,206,196,195,216,217,211,194,193',
'188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212',
'197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,',
',,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,',
',154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,',
',,,,184,191,182,183,179,180,181,139,141,138,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,',
'104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140',
',,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,416,415,140,,417,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178',
'189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219',
'198,187,201,205,207,199,192,,,,208,215,210,385,384,386,383,185,204,203',
',,,,,184,191,182,183,380,381,382,378,141,112,111,379,,114,,,,,,,173',
'174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,392',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141',
',,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,807,470,,,806,,,,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,773',
'470,,,774,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,1070,463,,,1071,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,771,463,,,772,,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,719,470,,,720,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,688,470,,,689,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1072,470,,,1073',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,510,463,,,511,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',894,470,,,895,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,459,463,,,460,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,466,470,,,465,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1067,470,,,1066',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,688,470,,,689,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',686,463,,,687,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,686,463,,,687,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,716,463,,,717,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,804,463,,,805',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,588,177,585,584,583,593,586,,,,,510,463,,,511,596,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,591,574,,175,176',
'161,162,,,601,600,604,603,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,588,177,585,584,583,593,586,,,,597,,,,,,596,,,,,170',
',,,588,178,585,584,583,593,586,,,,,,,591,,588,596,585,584,583,593,586',
'601,600,604,603,,,,,588,596,585,584,583,593,586,,591,588,,585,584,583',
'593,586,596,601,600,604,603,,,591,,596,,,597,,,,601,600,604,603,,,591',
'588,,585,584,583,593,586,,591,,604,603,,,597,,596,,,604,603,588,,585',
'584,583,593,586,,597,588,,585,584,583,593,586,596,591,,,,,,597,,596',
',,604,603,,,597,,,,,588,591,585,584,583,593,586,,,,591,,604,603,,,596',
',,,,604,603,,588,597,585,584,583,593,586,588,,585,584,583,593,586,591',
',596,,,,,,597,596,,604,603,,,,,597,,,,,,,591,,,,,,,591,,601,600,604',
'603,,,,601,600,604,603,,597,,,,,,,,,,,,,,,,235,,,,,,,,597,,,,,,,597' ]
        racc_action_table = arr = ::Array.new(26308, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'689,1084,961,1071,1070,360,863,689,689,689,827,359,689,689,689,65,689',
'22,410,407,791,791,864,62,487,693,689,689,689,771,892,736,367,969,238',
'868,689,689,969,689,689,689,689,689,891,716,938,717,368,620,869,610',
'838,22,726,726,487,772,62,693,487,487,371,1017,1072,1017,827,689,689',
'689,689,689,689,689,689,689,689,689,689,689,689,410,407,689,689,689',
'838,689,689,774,238,689,329,773,689,689,624,689,695,689,624,689,65,689',
'689,689,689,689,689,689,791,689,716,689,717,1084,961,1071,1070,360,1084',
'961,1071,1070,360,359,689,689,689,689,359,689,807,689,771,892,736,367',
'689,807,807,807,1072,689,726,807,807,716,807,717,716,610,717,368,620',
'774,610,807,891,773,938,891,772,891,716,938,717,371,807,807,871,807',
'807,807,807,807,475,475,1072,329,386,358,358,1072,29,695,957,386,957',
'957,957,239,957,844,774,650,241,872,773,807,807,807,807,807,807,807',
'807,807,807,807,807,807,807,369,711,807,807,807,727,807,369,647,92,807',
'727,622,807,379,711,369,92,807,874,807,379,807,807,807,807,807,807,807',
'443,807,807,807,844,239,396,29,20,877,241,844,719,894,650,650,807,807',
'110,807,844,807,957,650,475,110,110,110,807,29,110,110,110,807,110,879',
'622,882,844,888,647,647,110,622,110,110,110,486,622,647,20,623,622,318',
'110,110,443,110,110,110,110,110,44,44,20,719,894,396,396,396,622,529',
'719,894,404,334,334,719,894,486,893,719,894,486,486,110,110,110,110',
'110,110,110,110,110,110,110,110,110,110,719,894,110,110,110,623,110',
'110,378,317,110,897,623,110,110,378,110,623,110,316,110,623,110,110',
'110,110,110,110,110,738,110,314,110,529,529,529,404,404,404,623,738',
'398,44,44,398,110,110,110,110,412,110,113,110,480,529,334,334,110,113',
'113,113,686,110,113,113,113,1063,113,1063,1063,1063,1063,1063,738,738',
'113,687,113,113,113,352,804,1063,352,805,914,901,113,113,626,113,113',
'113,113,113,753,626,753,753,753,902,753,398,398,1063,626,903,738,912',
'480,412,412,412,394,913,1063,1063,686,113,113,113,113,113,113,113,113',
'113,113,113,113,113,113,687,1091,113,113,113,804,113,113,805,914,113',
'300,41,113,113,401,113,1063,113,42,113,920,113,113,113,113,113,113,113',
'977,113,351,113,1057,351,1057,1057,1057,1057,1057,977,753,394,394,394',
'113,113,113,113,1057,113,465,113,338,41,459,460,113,465,465,465,42,113',
'340,465,465,733,465,41,733,340,1057,921,977,977,42,401,401,401,340,1057',
'1057,1057,1057,741,741,923,465,465,388,465,465,465,465,465,338,388,459',
'460,237,924,546,925,27,927,671,237,977,546,338,27,459,460,47,47,237',
'1057,546,465,465,465,465,465,465,465,465,465,465,465,465,465,465,1050',
'1050,465,465,465,878,465,878,878,878,465,878,385,465,384,671,47,47,465',
'385,465,384,465,465,465,465,465,465,465,671,465,750,465,750,750,750',
'501,750,591,928,591,591,591,878,591,465,465,806,465,929,465,442,878',
'297,806,806,806,465,442,383,806,806,465,806,556,296,383,442,501,750',
'382,285,501,501,501,501,591,382,750,1003,556,556,1003,806,806,591,806',
'806,806,806,806,571,381,281,571,247,556,380,556,381,556,556,556,556',
'380,941,556,880,556,880,880,880,942,880,806,806,806,806,806,806,806',
'806,806,806,806,806,806,806,243,502,806,806,806,958,806,958,958,958',
'806,958,242,806,900,240,364,880,806,900,806,364,806,806,806,806,806',
'806,806,904,806,308,806,502,904,325,308,502,502,502,502,220,325,958',
'5,806,806,466,806,5,806,325,959,138,466,466,466,806,138,138,466,466',
'806,466,498,498,498,498,498,498,498,136,466,498,498,312,312,312,312',
'312,498,498,102,466,466,968,466,466,466,466,466,1012,975,1012,1012,1012',
'498,1012,498,101,498,498,498,498,498,498,498,1048,498,1048,1048,1048',
'100,1048,466,466,466,466,466,466,466,466,466,466,466,466,466,466,99',
'1012,466,466,466,1014,466,1014,1014,1014,466,1014,988,466,759,759,73',
'1048,466,991,466,993,466,466,466,466,466,466,466,998,466,466,466,17',
'17,990,1007,720,785,785,1008,1009,990,1014,720,466,466,688,466,720,466',
'990,1010,720,688,688,688,466,1011,688,688,688,466,688,506,1013,49,1022',
'1025,995,1026,1027,688,688,688,688,995,1028,1030,43,506,506,1036,688',
'688,995,688,688,688,688,688,9,9,9,9,9,506,996,506,40,506,506,506,506',
'996,25,506,1049,506,1054,1055,18,16,996,688,688,688,688,688,688,688',
'688,688,688,688,688,688,688,1066,1067,688,688,688,997,688,688,1069,15',
'688,13,997,688,688,1075,688,494,688,1076,688,997,688,688,688,688,688',
'688,688,1080,688,688,688,494,494,999,560,1042,569,1042,1042,1042,999',
'1042,572,688,688,688,688,494,688,999,688,494,494,494,494,688,576,559',
'577,579,688,793,793,793,793,793,793,580,581,50,793,793,590,598,602,793',
'50,793,793,793,793,793,793,793,605,50,550,607,547,793,793,793,793,793',
'793,793,792,792,793,611,792,792,792,447,793,793,793,793,793,793,793',
'793,793,793,793,793,612,793,793,793,613,793,793,614,793,793,793,447',
'447,447,447,447,447,447,447,447,447,447,323,447,447,322,542,447,447',
'323,793,540,322,793,537,536,793,793,323,535,793,322,793,447,628,447',
'793,447,447,447,447,447,447,447,793,447,519,631,1032,793,793,793,793',
'793,793,1032,518,507,793,793,654,447,657,447,1032,659,793,663,1081,793',
'793,793,672,677,793,793,363,363,363,363,363,363,491,683,321,363,363',
'1082,1083,490,363,321,363,363,363,363,363,363,363,489,321,690,691,694',
'363,363,363,363,363,363,363,488,697,363,699,702,704,713,453,363,363',
'363,363,363,363,363,363,363,363,363,363,715,363,363,363,467,363,363',
'718,363,363,363,453,453,453,453,453,453,453,453,453,453,453,1040,453',
'453,777,458,453,453,1040,363,721,777,363,722,457,363,363,1040,725,363',
'777,363,453,454,453,363,453,453,453,453,453,453,453,363,453,444,732',
'895,363,363,363,363,363,363,895,19,737,363,363,895,453,440,19,895,437',
'363,435,432,363,363,363,19,409,363,363,362,362,362,362,362,362,752,406',
'754,362,362,761,767,403,362,770,362,362,362,362,362,362,362,534,534',
'534,534,534,362,362,362,362,362,362,362,400,943,362,943,943,943,372',
'943,362,362,362,362,362,362,362,362,362,362,362,362,370,362,362,362',
'366,362,362,801,362,362,362,294,294,294,294,294,294,294,294,294,294',
'294,1073,294,294,365,803,294,294,1073,362,3,353,362,1073,812,362,362',
'1073,349,362,342,362,294,1,294,362,294,294,294,294,294,294,294,362,294',
'339,335,333,362,362,362,362,362,362,836,843,328,362,362,327,294,853',
'854,324,862,362,,,362,362,362,,,362,362,887,887,887,887,887,887,,,,887',
'887,,,,887,,887,887,887,887,887,887,887,561,561,561,561,561,887,887',
'887,887,887,887,887,,,887,,,,,,887,887,887,887,887,887,887,887,887,887',
'887,887,,887,887,887,,887,887,,887,887,887,809,809,809,809,809,809,809',
'809,809,809,809,,809,809,,,809,809,,887,,,887,,,887,887,,,887,,887,809',
',809,887,809,809,809,809,809,809,809,887,809,,,,887,887,887,887,887',
'887,,,,887,887,,809,,,,,887,,,887,887,887,,,887,887,320,320,320,320',
'320,320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320',
'320,320,320,320,320,,,320,,,,,,320,320,320,320,320,320,320,320,320,320',
'320,320,,320,320,320,,320,320,,320,320,320,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,320,,,320,,,320,320,,,320,,320,24,,24,320,24,24',
'24,24,24,24,24,320,24,,,,320,320,320,320,320,320,,,,320,320,,24,,,,',
'320,,,320,320,320,,,320,320,898,898,898,898,898,898,,,,898,898,,,,898',
',898,898,898,898,898,898,898,,,,,,898,898,898,898,898,898,898,,,898',
',,,,,898,898,898,898,898,898,898,898,898,898,898,898,,898,898,898,,898',
'898,,898,898,898,505,505,505,505,505,505,505,505,505,505,505,,505,505',
',,505,505,,898,,,898,,,898,898,,,898,,898,505,,505,898,505,505,505,505',
'505,505,505,898,505,,,,898,898,898,898,898,898,,,,898,898,505,505,,',
',,898,,,898,898,898,,,898,898,315,315,315,315,315,315,,,,315,315,,,',
'315,,315,315,315,315,315,315,315,,,,,,315,315,315,315,315,315,315,,',
'315,,,,,,315,315,315,315,315,315,315,315,315,315,315,315,,315,315,315',
',315,315,,315,315,315,557,557,557,557,557,557,557,557,557,557,557,,557',
'557,,,557,557,,315,,,315,,,315,315,,,315,,315,557,,557,315,557,557,557',
'557,557,557,557,315,557,,,,315,315,315,315,315,315,,,,315,315,,557,',
',,,315,,,315,315,315,,,315,315,935,935,935,935,935,935,,,,935,935,,',
',935,,935,935,935,935,935,935,935,,,,,,935,935,935,935,935,935,935,',
',935,,,,,,935,935,935,935,935,935,935,935,935,935,935,935,,935,935,935',
',935,935,,935,935,935,919,919,919,919,919,919,919,919,919,919,919,,919',
'919,,,919,919,,935,,,935,,,935,935,,,935,,935,919,,919,935,919,919,919',
'919,919,919,919,935,919,,,,935,935,935,935,935,935,,,,935,935,,919,',
',,,935,,,935,935,935,,,935,935,965,965,965,965,965,965,,,,965,965,,',
',965,,965,965,965,965,965,965,965,,,,,,965,965,965,965,965,965,965,',
',965,,,,,,965,965,965,965,965,965,965,965,965,965,965,965,,965,965,965',
',965,965,,965,965,965,500,500,500,500,500,500,500,,,500,500,,,,,,500',
'500,,965,,,965,,,965,965,,,965,,965,500,,500,965,500,500,500,500,500',
'500,500,965,500,,,,965,965,965,965,965,965,,,,965,965,,,,,,,965,,,965',
'965,965,,,965,965,936,936,936,936,936,936,,,,936,936,,,,936,,936,936',
'936,936,936,936,936,,,,,,936,936,936,936,936,936,936,,,936,,,,,,936',
'936,936,936,936,936,936,936,936,936,936,936,,936,936,936,,936,936,,936',
'936,936,495,495,495,495,495,495,495,,,495,495,,,,,,495,495,,936,,,936',
',,936,936,,,936,,936,495,,495,936,495,495,495,495,495,495,495,936,495',
',,,936,936,936,936,936,936,,,,936,936,,,,,,,936,,,936,936,936,,,936',
'936,609,609,609,609,609,609,,,,609,609,,,,609,,609,609,609,609,609,609',
'609,,,,,,609,609,609,609,609,609,609,,,609,,,,,,609,609,609,609,609',
'609,609,609,609,609,609,609,,609,609,609,,609,609,,609,609,609,499,499',
'499,499,499,499,499,,,499,499,,,,,,499,499,,609,,,609,,,609,609,,,609',
',609,499,,499,609,499,499,499,499,499,499,499,609,499,,,,609,609,609',
'609,609,609,,,,609,609,,,,,,,609,,,609,609,609,,,609,609,36,36,36,36',
'36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36',
',,36,,,,,,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36',
'36,496,496,496,496,496,496,496,,,496,496,,,,,,496,496,,36,,,36,,,36',
'36,,,36,,36,496,,496,36,496,496,496,496,496,496,496,36,496,,,,36,36',
'36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36,,,36,36,606,606,606,606,606',
'606,,,,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606,606,606',
'606,606,606,606,,,606,,,,,,606,606,606,606,606,606,606,606,606,606,606',
'606,,606,606,606,,606,606,,606,606,606,497,497,497,497,497,497,497,',
',497,497,,,,,,497,497,,606,,,606,,,606,606,,,606,,606,497,,497,606,497',
'497,497,497,497,497,497,606,497,,,,606,606,606,606,606,606,,,,606,606',
',,,,,,606,,,606,606,606,,,606,606,426,426,426,426,426,426,,,,426,426',
',,,426,,426,426,426,426,426,426,426,,,,,,426,426,426,426,426,426,426',
',,426,,,,,,426,426,426,426,426,426,426,426,426,426,426,426,,426,426',
'426,,426,426,,426,426,426,504,504,504,504,504,504,504,504,,504,504,',
',,,,504,504,,426,,,426,,,426,426,,,426,,426,504,,504,426,504,504,504',
'504,504,504,504,426,504,,,,426,426,426,426,426,426,,,,426,426,,,,,,',
'426,,,426,426,426,,,426,426,246,246,246,246,246,246,,,,246,246,,,,246',
',246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246',
',,,,,246,246,246,246,246,246,246,246,246,246,246,246,,246,246,246,,246',
'246,,246,246,246,485,485,485,485,485,485,485,485,485,485,485,,485,485',
',,485,485,,246,,,246,,,246,246,,,246,,246,485,,485,246,485,485,485,485',
'485,485,485,246,485,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246',
',,246,246,246,,,246,246,222,222,222,222,222,222,,,,222,222,,,,222,,222',
'222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,',
'222,222,222,222,222,222,222,222,222,222,222,222,,222,222,222,,222,222',
',222,222,222,484,484,484,484,484,484,484,484,484,484,484,,484,484,,',
'484,484,,222,,,222,,,222,222,,,222,,222,484,,484,222,484,484,484,484',
'484,484,484,222,484,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222',
',,222,222,222,,,222,222,346,346,346,346,346,346,,,,346,346,,,,346,,346',
'346,346,346,346,346,346,,,,,,346,346,346,346,346,346,346,,,346,,,,,',
'346,346,346,346,346,346,346,346,346,346,346,346,,346,346,346,,346,346',
',346,346,346,503,503,503,503,503,503,503,,,503,503,,,,,,503,503,,346',
',,346,,,346,346,,,346,,346,503,,503,346,503,503,503,503,503,503,503',
'346,503,,,,346,346,346,346,346,346,,,,346,346,,,,,,,346,,,346,346,346',
',,346,346,833,833,833,833,833,833,,,,833,833,,,,833,,833,833,833,833',
'833,833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,,833,833,833',
'833,833,833,833,833,833,833,833,833,,833,833,833,,833,833,,833,833,833',
'493,,,,,,,,,,,,,,,,493,493,,833,,,833,,,833,833,,,833,,833,493,,493',
'833,493,493,493,493,,,,833,,,,,833,833,833,833,833,833,,,,833,833,,',
',,,,833,,,833,833,833,,,833,833,851,851,851,851,851,851,,,,851,851,',
',,851,,851,851,851,851,851,851,851,,,,,,851,851,851,851,851,851,851',
',,851,,,,,,851,851,851,851,851,851,851,851,851,851,851,851,,851,851',
'851,,851,851,,851,851,851,492,,,,,,,,,,,,,,,,492,492,,851,,,851,,,851',
'851,,,851,,851,492,,492,851,492,492,492,492,,,,851,,,,,851,851,851,851',
'851,851,,,,851,851,,,,,,,851,,,851,851,851,,,851,851,2,2,2,2,2,2,,,',
'2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2',
'2,2,2,2,,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,',
'2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,,,2,2,775,775,775',
'775,775,775,,,,775,775,,,,775,,775,775,775,775,775,775,775,,,,,,775',
'775,775,775,775,775,775,,,775,,,,,,775,775,775,775,775,775,775,775,775',
'775,775,775,,775,775,775,,775,775,,775,775,775,,,,,,,,,,,,,,,,,,,,775',
',,775,,,775,775,,,775,,775,,,,775,,,,,,,,775,,,,,775,775,775,775,775',
'775,,,,775,775,,,,,,,775,,,775,775,775,,,775,775,1021,1021,1021,1021',
'1021,1021,,,,1021,1021,,,,1021,,1021,1021,1021,1021,1021,1021,1021,',
',,,,1021,1021,1021,1021,1021,1021,1021,,,1021,,,,,,1021,1021,1021,1021',
'1021,1021,1021,1021,1021,1021,1021,1021,,1021,1021,1021,,1021,1021,',
'1021,1021,1021,,,,,,,,,,,,,,,,,,,,1021,,,1021,,,1021,1021,,,1021,,1021',
',,,1021,,,,,,,,1021,,,,,1021,1021,1021,1021,1021,1021,,,,1021,1021,',
',,,,,1021,,,1021,1021,1021,,,1021,1021,1020,1020,1020,1020,1020,1020',
',,,1020,1020,,,,1020,,1020,1020,1020,1020,1020,1020,1020,,,,,,1020,1020',
'1020,1020,1020,1020,1020,,,1020,,,,,,1020,1020,1020,1020,1020,1020,1020',
'1020,1020,1020,1020,1020,,1020,1020,1020,,1020,1020,,1020,1020,1020',
',,,,,,,,,,,,,,,,,,,1020,,,1020,,,1020,1020,,,1020,,1020,,,,1020,,,,',
',,,1020,,,,,1020,1020,1020,1020,1020,1020,,,,1020,1020,,,,,,,1020,,',
'1020,1020,1020,,,1020,1020,1015,1015,1015,1015,1015,1015,,,,1015,1015',
',,,1015,,1015,1015,1015,1015,1015,1015,1015,,,,,,1015,1015,1015,1015',
'1015,1015,1015,,,1015,,,,,,1015,1015,1015,1015,1015,1015,1015,1015,1015',
'1015,1015,1015,,1015,1015,1015,,1015,1015,,1015,1015,1015,,,,,,,,,,',
',,,,,,,,,1015,,,1015,,,1015,1015,,,1015,,1015,,,,1015,,,,,,,,1015,,',
',,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,,,,1015,,,1015,1015',
'1015,,,1015,1015,860,860,860,860,860,860,,,,860,860,,,,860,,860,860',
'860,860,860,860,860,,,,,,860,860,860,860,860,860,860,,,860,,,,,,860',
'860,860,860,860,860,860,860,860,860,860,860,,860,860,860,,860,860,,860',
'860,860,,,,,,,,,,,,,,,,,,,,860,,,860,,,860,860,,,860,,860,,,,860,,,',
',,,,860,,,,,860,860,860,860,860,860,,,,860,860,,,,,,,860,,,860,860,860',
',,860,860,994,994,994,994,994,994,,,,994,994,,,,994,,994,994,994,994',
'994,994,994,,,,,,994,994,994,994,994,994,994,,,994,,,,,,994,994,994',
'994,994,994,994,994,994,994,994,994,,994,994,994,,994,994,,994,994,994',
',,,,,,,,,,,,,,,,,,,994,,,994,,,994,994,,,994,,994,,,,994,,,,,,,,994',
',,,,994,994,994,994,994,994,,,,994,994,,,,,,,994,,,994,994,994,,,994',
'994,786,786,786,786,786,786,,,,786,786,,,,786,,786,786,786,786,786,786',
'786,,,,,,786,786,786,786,786,786,786,,,786,,,,,,786,786,786,786,786',
'786,786,786,786,786,786,786,,786,786,786,,786,786,,786,786,786,,,,,',
',,,,,,,,,,,,,,786,,,786,,,786,786,,,786,,786,,,,786,,,,,,,,786,,,,,786',
'786,786,786,786,786,,,,786,786,,,,,,,786,,,786,786,786,,,786,786,861',
'861,861,861,861,861,,,,861,861,,,,861,,861,861,861,861,861,861,861,',
',,,,861,861,861,861,861,861,861,,,861,,,,,,861,861,861,861,861,861,861',
'861,861,861,861,861,,861,861,861,,861,861,,861,861,861,,,,,,,,,,,,,',
',,,,,,861,,,861,,,861,861,,,861,,861,,,,861,,,,,,,,861,,,,,861,861,861',
'861,861,861,,,,861,861,,,,,,,861,,,861,861,861,,,861,861,787,787,787',
'787,787,787,,,,787,787,,,,787,,787,787,787,787,787,787,787,,,,,,787',
'787,787,787,787,787,787,,,787,,,,,,787,787,787,787,787,787,787,787,787',
'787,787,787,,787,787,787,,787,787,,787,787,787,,,,,,,,,,,,,,,,,,,,787',
',,787,,,787,787,,,787,,787,,,,787,,,,,,,,787,,,,,787,787,787,787,787',
'787,,,,787,787,,,,,,,787,,,787,787,787,,,787,787,676,676,676,,676,,',
',676,676,,,,676,,676,676,676,676,676,676,676,,,,,,676,676,676,676,676',
'676,676,,,676,,,,,,,676,,,676,676,676,676,676,676,676,676,,676,676,676',
',676,676,,676,676,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,',
',,,,676,,,,,,,,676,,,,,676,676,676,676,676,676,,,,676,676,,,,,,,676',
',,676,676,676,,,676,676,552,552,552,,552,,,,552,552,,,,552,,552,552',
'552,552,552,552,552,,,,,,552,552,552,552,552,552,552,,,552,,,,,,,552',
',,552,552,552,552,552,552,552,552,,552,552,552,,552,552,,552,552,552',
',,,,,,,,,,,,,,,,,,,552,,,552,,,552,552,,,552,,,,,,552,,,,,,,,552,,,',
',552,552,552,552,552,552,,,,552,552,,,,,,,552,,,552,552,552,,,552,552',
'553,553,553,,553,,,,553,553,,,,553,,553,553,553,553,553,553,553,,,,',
',553,553,553,553,553,553,553,,,553,,,,,,,553,,,553,553,553,553,553,553',
'553,553,,553,553,553,,553,553,,553,553,553,,,,,,,,,,,,,,,,,,,,553,,',
'553,,,553,553,,,553,,,,,,553,,,,,,,,553,,,,,553,553,553,553,553,553',
',,,553,553,,,,,,,553,,,553,553,553,,,553,553,594,594,594,,594,,,,594',
'594,,,,594,,594,594,594,594,594,594,594,,,,,,594,594,594,594,594,594',
'594,,,594,,,,,,,594,,,594,594,594,594,594,594,594,594,,594,594,594,',
'594,594,,594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594,,,594,594,,,594,,',
',,,594,,,,,,,,594,,,,,594,594,594,594,594,594,,,,594,594,,,,,,,594,',
',594,594,594,,,594,594,558,558,558,,558,,,,558,558,,,,558,,558,558,558',
'558,558,558,558,,,,,,558,558,558,558,558,558,558,,,558,,,,,,,558,,,558',
'558,558,558,558,558,558,558,,558,558,558,,558,558,,558,558,558,,,,,',
',,,,,,,,,,,,,,558,,,558,,,558,558,,,558,,,,,,558,,,,,,,,558,,,,,558',
'558,558,558,558,558,,,,558,558,,,,,,,558,,,558,558,558,,,558,558,567',
'567,567,,567,,,,567,567,,,,567,,567,567,567,567,567,567,567,,,,,,567',
'567,567,567,567,567,567,,,567,,,,,,,567,,,567,567,567,567,567,567,567',
'567,567,567,567,567,,567,567,,567,567,567,,,,,,,,,,,,,,,,,,,,567,,,567',
',,567,567,,,567,,,,,,567,,,,,,,,567,,,,,567,567,567,567,567,567,,,,567',
'567,,,,,,,567,,567,567,567,567,,,567,567,564,564,564,,564,,,,564,564',
',,,564,,564,564,564,564,564,564,564,,,,,,564,564,564,564,564,564,564',
',,564,,,,,,,564,,,564,564,564,564,564,564,564,564,564,564,564,564,,564',
'564,,564,564,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564,564,,,564,,564,',
',,564,,,,,,,,564,,,,,564,564,564,564,564,564,,,,564,564,,,,,,,564,,564',
'564,564,564,,,564,564,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23',
'23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23',
',23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,',
',,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23',
',,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32',
'32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,',
'32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32',
',,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32',
'32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33',
'33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33',
',33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,',
',33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,',
'37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,',
'37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,',
',,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37',
'37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38',
',38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38',
'38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38',
',,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38',
',,38,38,38,,,38,38,1037,1037,1037,,1037,,,,1037,1037,,,,1037,,1037,1037',
'1037,1037,1037,1037,1037,,,,,,1037,1037,1037,1037,1037,1037,1037,,,1037',
',,,,,,1037,,,1037,1037,1037,1037,1037,1037,1037,1037,1037,1037,1037',
'1037,,1037,1037,,1037,1037,1037,,,,,,,,,,,,,,,,,,,,1037,,,1037,,,1037',
'1037,,,1037,,1037,,1037,,1037,,,,,,,,1037,,,,,1037,1037,1037,1037,1037',
'1037,,,,1037,1037,,,,,,,1037,,1037,1037,1037,1037,,,1037,1037,45,45',
'45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45',
',,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,',
',,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45',
'45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46,46',
',,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46',
',,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,',
',,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,',
'46,46,,,,,,,46,,,46,46,46,,,46,46,48,48,48,,48,,,,48,48,,,,48,,48,48',
'48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48',
'48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,',
'48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48',
',,48,48,48,,,48,48,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63',
',,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63',
'63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,63',
',,,63,,,,,,,,63,,,,,63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63',
',,63,63,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67',
'67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67',
'67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,',
'67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,68,68',
'68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68',
',,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68,68,68,',
',,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68,68',
'68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,,68,68,71,71,71,,71,,,,71,71',
',,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71',
',,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,,,,,,,,,,,,,,',
',,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71,71,71,71,,,',
'71,71,71,,,,,71,71,,,71,71,71,,,71,71,72,72,72,,72,,,,72,72,,,,72,,72',
'72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72',
'72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72',
'72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72,72,72,,,,72,72,,,,,,,72,,,72',
'72,72,,,72,72,989,989,989,,989,,,,989,989,,,,989,,989,989,989,989,989',
'989,989,,,,,,989,989,989,989,989,989,989,,,989,,,,,,,989,,,989,989,989',
'989,989,989,989,989,,989,989,989,,989,989,,,,989,,,,,,,,,,,,,,,,,,,',
'989,,,989,,,989,989,,,989,,,,,,,,,,,,,,,,,,,989,989,989,989,989,989',
',,,989,989,,,,,,,989,,,989,989,989,,,989,989,126,126,126,126,126,,,',
'126,126,,,,126,,126,126,126,126,126,126,126,,,,,,126,126,126,126,126',
'126,126,,,126,,,,,,126,126,126,126,126,126,126,126,126,126,126,126,',
'126,126,126,,126,126,,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126',
'126,,,126,,126,,,,126,,,,,,,,126,,,,,126,126,126,126,126,126,,,,126',
'126,,,,,,126,126,,,126,126,126,,,126,126,131,131,131,,131,,,,131,131',
',,,131,,131,131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131',
',,131,,,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131,,131',
'131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,,,,,131',
',,,,,,,131,,,,,131,131,131,131,131,131,,,,131,131,,,,,,,131,,,131,131',
'131,,,131,131,132,132,132,,132,,,,132,132,,,,132,,132,132,132,132,132',
'132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,,132,,,132,132,132',
'132,132,132,132,132,,132,132,132,,132,132,,132,132,132,,,,,,,,,,,,,',
',,,,,,132,,,132,,,132,132,,,132,,,,,,132,,,,,,,,132,,,,,132,132,132',
'132,132,132,,,,132,132,,,,,,,132,,,132,132,132,,,132,132,133,133,133',
',133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133',
'133,133,133,133,,,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133',
'133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133',
',,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,',
',,,133,,,133,133,133,,,133,133,134,134,134,,134,,,,134,134,,,,134,,134',
'134,134,134,134,134,134,,,,,,134,134,134,134,134,134,134,,,134,,,,,',
',134,,,134,134,134,134,134,134,134,134,,134,134,134,,134,134,,134,134',
'134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134',
',,,,134,134,134,134,134,134,,,,134,134,,,,,,,134,,,134,134,134,,,134',
'134,135,135,135,135,135,,,,135,135,,,,135,,135,135,135,135,135,135,135',
',,,,,135,135,135,135,135,135,135,,,135,,,,,,135,135,,135,135,135,135',
'135,135,135,135,135,,135,135,135,,135,135,,135,135,135,,,,,,,,,,,,,',
',,,,,,135,,,135,,,135,135,,,135,,135,,,,135,,,,,,,,135,,,,,135,135,135',
'135,135,135,,,,135,135,,,,,,,135,,,135,135,135,,,135,135,964,964,964',
',964,,,,964,964,,,,964,,964,964,964,964,964,964,964,,,,,,964,964,964',
'964,964,964,964,,,964,,,,,,,964,,,964,964,964,964,964,964,964,964,,964',
'964,964,,964,964,,964,964,964,,,,,,,,,,,,,,,,,,,,964,,,964,,,964,964',
',,964,,964,,,,964,,,,,,,,964,,,,,964,964,964,964,964,964,,,,964,964',
',,,,,,964,,,964,964,964,,,964,964,223,223,223,,223,,,,223,223,,,,223',
',223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223',
',,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223,,223',
'223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,223,,,,223,,,',
',,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,,,223,223,223',
',,223,223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224',
'224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224',
'224,224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,',
',,224,,,224,,,224,224,,,224,,224,,,,224,,,,,,,,224,,,,,224,224,224,224',
'224,224,,,,224,224,,,,,,,224,,,224,224,224,,,224,224,225,225,225,,225',
',,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225',
'225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225',
'225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225',
',,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225',
',,225,225,225,,,225,225,226,226,226,,226,,,,226,226,,,,226,,226,226',
'226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226',
',,226,226,226,226,226,226,226,226,,226,226,226,,226,226,,226,226,226',
',,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,',
',226,226,226,226,226,226,,,,226,226,,,,,,,226,,,226,226,226,,,226,226',
'227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,',
',227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227',
'227,227,,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,',
'227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227',
',,,227,227,,,,,,,227,,,227,227,227,,,227,227,228,228,228,,228,,,,228',
'228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228,228',
'228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228,228,228,228,228',
',228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,',
'228,,228,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,,',
',,228,,228,228,228,228,,,228,228,232,232,232,,232,,,,232,232,,,,232',
',232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232',
',,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232,,232,232,,232',
'232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,',
',232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232,,,232,232,232',
',,232,232,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233',
'233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233',
'233,233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,',
',,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233',
'233,233,,,,233,233,,,,,,,233,,,233,233,233,,,233,233,234,234,234,,234',
',,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234',
'234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234',
'234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234',
',,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,234,,,,,',
'234,,,234,234,234,,,234,234,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,',
',,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8',
',,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8',
',,,8,8,,,,,,,8,,,8,8,8,,,8,8,245,245,245,,245,,,,245,245,,,,245,,245',
'245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,',
',245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245',
'245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245',
',,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245,,,245',
'245,939,939,939,,939,,,,939,939,,,,939,,939,939,939,939,939,939,939',
',,,,,939,939,939,939,939,939,939,,,939,,,,,,,939,,,939,939,939,939,939',
'939,939,939,,939,939,939,,939,939,,,,939,,,,,,,,,,,,,,,,,,,,939,,,939',
',,939,939,,,939,,,,,,,,,,,,,,,,,,,939,939,939,939,939,939,,,,939,939',
',,,,,,939,,,939,939,939,,,939,939,248,248,248,,248,,,,248,248,,,,248',
',248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248',
',,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248',
'248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,',
',248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248',
',,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249',
'249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249',
'249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,',
',,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249',
'249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250,,250',
',,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250',
'250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250',
'250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250',
',,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250',
',,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251',
'251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251',
',,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251',
',,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,',
',251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251,251',
'252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,',
',252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252',
'252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,',
'252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,',
'253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,',
',253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255',
'255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255',
',,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255',
'255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,',
',256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,',
',256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256',
',256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,',
',,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,',
',,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257',
'257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258',
',258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258',
'258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258',
'258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258',
',,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,',
',,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259',
',,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259',
'259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260',
',,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260',
'260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260',
',,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260',
',,,260,260,,,,,,,260,,,260,260,260,,,260,260,261,261,261,,261,,,,261',
'261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261',
'261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,',
'261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,',
',,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,',
',261,261,261,,,261,261,262,262,262,,262,,,,262,262,,,,262,,262,262,262',
'262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262',
'262,262,262,262,262,262,262,,262,262,262,,262,262,,262,262,262,,,,,',
',,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262',
'262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,,262,262,263',
'263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263',
'263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263',
'263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263',
',,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263',
'263,,,,,,,263,,,263,263,263,,,263,263,264,264,264,,264,,,,264,264,,',
',264,,264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,',
',264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264,264,,264,264',
',264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,',
',,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,,,264,264',
'264,,,264,264,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265',
'265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265',
'265,265,265,265,265,,265,265,265,,265,265,,265,265,265,,,,,,,,,,,,,',
',,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265,265,265',
'265,265,265,,,,265,265,,,,,,,265,,,265,265,265,,,265,265,266,266,266',
',266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266',
'266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266',
'266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266',
',,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,',
',,,266,,,266,266,266,,,266,266,267,267,267,,267,,,,267,267,,,,267,,267',
'267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,',
',267,,,267,267,267,267,267,267,267,267,,267,267,267,,267,267,,267,267',
'267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267',
',,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267,267,,,267',
'267,268,268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268',
',,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268',
'268,268,268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268',
',,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268',
',,,268,268,,,,,,,268,,,268,268,268,,,268,268,269,269,269,,269,,,,269',
'269,,,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269',
'269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269,',
'269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,',
',,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,',
',269,269,269,,,269,269,274,274,274,,274,,,,274,274,,,,274,,274,274,274',
'274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274',
'274,274,274,274,274,274,274,,274,274,274,,274,274,,274,274,274,,,,,',
',,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,,,,,274,,,,,,,,274,,,,,274',
'274,274,274,274,274,,,,274,274,,,,,,,274,,,274,274,274,,,274,274,282',
'282,282,,282,,,,282,282,,,,282,,282,282,282,282,282,282,282,,,,,,282',
'282,282,282,282,282,282,,,282,,,,,,,282,,,282,282,282,282,282,282,282',
'282,282,282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282',
',,282,282,,,282,,282,,282,,282,,,,,,,,282,,,,,282,282,282,282,282,282',
',,,282,282,,,,,,,282,,282,282,282,282,,,282,282,289,289,289,,289,,,',
'289,289,,,,289,,289,289,289,289,289,289,289,,,,,,289,289,289,289,289',
'289,289,,,289,,,,,,,289,,,289,289,289,289,289,289,289,289,289,289,289',
'289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289',
',289,,289,,289,,,,,,,,289,,,,,289,289,289,289,289,289,,,,289,289,,,',
',,,289,,289,289,289,289,,,289,289,292,292,292,,292,,,,292,292,,,,292',
',292,292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292,,,292',
',,,,,,292,,,292,292,292,292,292,292,292,292,292,292,292,292,,292,292',
',292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292,,292',
',292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292,292,,,,,,292',
',292,292,292,292,,,292,292,930,930,930,,930,,,,930,930,,,,930,,930,930',
'930,930,930,930,930,,,,,,930,930,930,930,930,930,930,,,930,,,,,,,930',
',,930,930,930,930,930,930,930,930,,930,930,930,,930,930,,,,930,,,,,',
',,,,,,,,,,,,,,930,,,930,,,930,930,,,930,,,,,,,,,,,,,,,,,,,930,930,930',
'930,930,930,,,,930,930,,,,,,,930,,,930,930,930,,,930,930,299,299,299',
',299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,,299,299,299',
'299,299,299,299,,,299,,,,,,,299,,,299,299,299,299,299,299,299,299,,299',
'299,299,,299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299',
',,299,,,,,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299,299,,,',
',,,299,,,299,299,299,,,299,299,301,301,301,,301,,,,301,301,,,,301,,301',
'301,301,301,301,301,301,,,,,,301,301,301,301,301,301,301,,,301,,,,,',
',301,,,301,301,301,301,301,301,301,301,,301,301,301,,301,301,,301,301',
'301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,,301,,,,,,301,,,,,,,,301',
',,,,301,301,301,301,301,301,,,,301,301,,,,,,,301,,,301,301,301,,,301',
'301,304,304,304,,304,,,,304,304,,,,304,,304,304,304,304,304,304,304',
',,,,,304,304,304,304,304,304,304,,,304,,,,,,,304,,,304,304,304,304,304',
'304,304,304,,304,304,304,,304,304,,304,304,304,,,,,,,,,,,,,,,,,,,,304',
',,304,,,304,304,,,304,,,,,,304,,,,,,,,304,,,,,304,304,304,304,304,304',
',,,304,304,,,,,,,304,,,304,304,304,,,304,304,305,305,305,,305,,,,305',
'305,,,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305',
'305,,,305,,,,,,,305,,,305,305,305,305,305,305,305,305,,305,305,305,',
'305,305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305,,',
',,,305,,,,,,,,305,,,,,305,305,305,305,305,305,,,,305,305,,,,,,,305,',
',305,305,305,,,305,305,918,918,918,,918,,,,918,918,,,,918,,918,918,918',
'918,918,918,918,,,,,,918,918,918,918,918,918,918,,,918,,,,,,,918,,,918',
'918,918,918,918,918,918,918,,918,918,918,,918,918,,918,918,918,,,,,',
',,,,,,,,,,,,,,918,,,918,,,918,918,,,918,,,,,,918,,,,,,,,918,,,,,918',
'918,918,918,918,918,,,,918,918,,,,,,,918,,,918,918,918,,,918,918,311',
'311,311,311,311,,,,311,311,,,,311,,311,311,311,311,311,311,311,,,,,',
'311,311,311,311,311,311,311,,,311,,,,,,311,311,,311,311,311,311,311',
'311,311,311,311,,311,311,311,,311,311,,311,311,311,,,,,,,,,,,,,,,,,',
',,311,,,311,,,311,311,,,311,,311,,,,311,,,,,,,,311,,,,,311,311,311,311',
'311,311,,,,311,311,,,,,,,311,,,311,311,311,,,311,311,917,917,917,,917',
',,,917,917,,,,917,,917,917,917,917,917,917,917,,,,,,917,917,917,917',
'917,917,917,,,917,,,,,,,917,,,917,917,917,917,917,917,917,917,917,917',
'917,917,,917,917,,917,917,917,,,,,,,,,,,,,,,,,,,,917,,,917,,,917,917',
',,917,,,,917,,917,,,,,,,,917,,,,,917,917,917,917,917,917,,,,917,917',
',,,,,,917,,917,917,917,917,,,917,917,899,899,899,,899,,,,899,899,,,',
'899,,899,899,899,899,899,899,899,,,,,,899,899,899,899,899,899,899,,',
'899,,,,,,,899,,,899,899,899,899,899,899,899,899,,899,899,899,,899,899',
',899,899,899,,,,,,,,,,,,,,,,,,,,899,,,899,,,899,899,,,899,,,,,,899,',
',,,,,,899,,,,,899,899,899,899,899,899,,,,899,899,,,,,,,899,,,899,899',
'899,,,899,899,319,319,319,,319,,,,319,319,,,,319,,319,319,319,319,319',
'319,319,,,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319,319,319',
'319,319,319,319,319,,319,319,319,,319,319,,,,319,,,,,,,,,,,,,,,,,,,',
'319,,,319,,,319,319,,,319,,,,,,,,,,,,,,,,,,,319,319,319,319,319,319',
',,,319,319,,,,319,,,319,,,319,319,319,,,319,319,885,885,885,,885,,,',
'885,885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885,885',
'885,885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,885,,885,885,885',
',885,885,,885,885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,',
',,,,885,,,,,,,,885,,,,,885,885,885,885,885,885,,,,885,885,,,,,,,885',
',,885,885,885,,,885,885,336,336,336,,336,,,,336,336,,,,336,,336,336',
'336,336,336,336,336,,,,,,336,336,336,336,336,336,336,,,336,,,,,,,336',
',,336,336,336,336,336,336,336,336,,336,336,336,,336,336,,,,336,,,,,',
',,,,,,,,,,,,,,336,,,336,,,336,336,,,336,,,,,,,,,,,,,,,,,,,336,336,336',
'336,336,336,,,,336,336,,,,,,,336,,,336,336,336,,,336,336,828,828,828',
',828,,,,828,828,,,,828,,828,828,828,828,828,828,828,,,,,,828,828,828',
'828,828,828,828,,,828,,,,,,,828,,,828,828,828,828,828,828,828,828,,828',
'828,828,,828,828,,828,828,828,,,,,,,,,,,,,,,,,,,,828,,,828,,,828,828',
',,828,,,,,,828,,,,,,,,828,,,,,828,828,828,828,828,828,,,,828,828,,,',
',,,828,,,828,828,828,,,828,828,826,826,826,,826,,,,826,826,,,,826,,826',
'826,826,826,826,826,826,,,,,,826,826,826,826,826,826,826,,,826,,,,,',
',826,,,826,826,826,826,826,826,826,826,,826,826,826,,826,826,,826,826',
'826,,,,,,,,,,,,,,,,,,,,826,,,826,,,826,826,,,826,,,,,,826,,,,,,,,826',
',,,,826,826,826,826,826,826,,,,826,826,,,,,,,826,,,826,826,826,,,826',
'826,825,825,825,,825,,,,825,825,,,,825,,825,825,825,825,825,825,825',
',,,,,825,825,825,825,825,825,825,,,825,,,,,,,825,,,825,825,825,825,825',
'825,825,825,,825,825,825,,825,825,,825,825,825,,,,,,,,,,,,,,,,,,,,825',
',,825,,,825,825,,,825,,,,,,825,,,,,,,,825,,,,,825,825,825,825,825,825',
',,,825,825,,,,,,,825,,,825,825,825,,,825,825,343,343,343,,343,,,,343',
'343,,,,343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343',
'343,,,343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343,',
'343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,',
',,,343,,,,,,,,343,,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343,',
',343,343,343,,,343,343,345,345,345,,345,,,,345,345,,,,345,,345,345,345',
'345,345,345,345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345,,,345',
'345,345,345,345,345,345,345,,345,345,345,,345,345,,345,345,345,,,,,',
',,,,,,,,,,,,,,345,,,345,345,,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345',
'345,345,345,345,345,,,,345,345,,,,,,,345,,,345,345,345,,,345,345,348',
'348,348,348,348,,,,348,348,,,,348,,348,348,348,348,348,348,348,,,,,',
'348,348,348,348,348,348,348,,,348,,,,,,348,348,,348,348,348,348,348',
'348,348,348,348,,348,348,348,,348,348,,348,348,348,,,,,,,,,,,,,,,,,',
',,348,,,348,,,348,348,,,348,,348,,,,348,,,,,,,,348,,,,,348,348,348,348',
'348,348,,,,348,348,,,,,,,348,,,348,348,348,,,348,348,824,824,824,,824',
',,,824,824,,,,824,,824,824,824,824,824,824,824,,,,,,824,824,824,824',
'824,824,824,,,824,,,,,,,824,,,824,824,824,824,824,824,824,824,,824,824',
'824,,824,824,,824,824,824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824',
',,,,,824,,,,,,,,824,,,,,824,824,824,824,824,824,,,,824,824,,,,,,,824',
',,824,824,824,,,824,824,823,823,823,,823,,,,823,823,,,,823,,823,823',
'823,823,823,823,823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,,823',
',,823,823,823,823,823,823,823,823,,823,823,823,,823,823,,823,823,823',
',,,,,,,,,,,,,,,,,,,823,,,823,,,823,823,,,823,,,,,,823,,,,,,,,823,,,',
',823,823,823,823,823,823,,,,823,823,,,,,,,823,,,823,823,823,,,823,823',
'810,810,810,,810,,,,810,810,,,,810,,810,810,810,810,810,810,810,,,,',
',810,810,810,810,810,810,810,,,810,,,,,,,810,,,810,810,810,810,810,810',
'810,810,,810,810,810,,810,810,,810,810,810,,,,,,,,,,,,,,,,,,,,810,,',
'810,,,810,810,,,810,,,,,,810,,,,,,,,810,,,,,810,810,810,810,810,810',
',,,810,810,,,,,,,810,,,810,810,810,,,810,810,354,354,354,,354,,,,354',
'354,,,,354,,354,354,354,354,354,354,354,,,,,,354,354,354,354,354,354',
'354,,,354,,,,,,,354,,,354,354,354,354,354,354,354,354,354,354,354,354',
',354,354,,354,354,354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,,354,',
',,,,354,,,,,,,,354,,,,,354,354,354,354,354,354,,,,354,354,,,,,,,354',
',354,354,354,354,,,354,354,361,361,361,,361,,,,361,361,,,,361,,361,361',
'361,361,361,361,361,,,,,,361,361,361,361,361,361,361,,,361,,,,,,,361',
',,361,361,361,361,361,361,361,361,,361,361,361,,361,361,,361,361,361',
',,,,,,,,,,,,,,,,,,,361,,,361,,,361,361,,,361,,,,,,361,,,,,,,,361,,,',
',361,361,361,361,361,361,,,,361,361,,,,,,,361,,,361,361,361,,,361,361',
'802,802,802,,802,,,,802,802,,,,802,,802,802,802,802,802,802,802,,,,',
',802,802,802,802,802,802,802,,,802,,,,,,,802,,,802,802,802,802,802,802',
'802,802,,802,802,802,,802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802,,',
'802,,,802,802,,,802,,,,,,802,,,,,,,,802,,,,,802,802,802,802,802,802',
',,,802,802,,,,,,,802,,,802,802,802,,,802,802,375,375,375,,375,,,,375',
'375,,,,375,,375,375,375,375,375,375,375,,,,,,375,375,375,375,375,375',
'375,,,375,,,,,,,375,,,375,375,375,375,375,375,375,375,,375,375,375,',
'375,375,,,,375,,,,,,,,,,,,,,,,,,,,375,,,375,,,375,375,,,375,,,,,,,,',
',,,,,,,,,,375,375,375,375,375,375,,,,375,375,,,,,,,375,,,375,375,375',
',,375,375,377,377,377,,377,,,,377,377,,,,377,,377,377,377,377,377,377',
'377,,,,,,377,377,377,377,377,377,377,,,377,,,,,,,377,,,377,377,377,377',
'377,377,377,377,,377,377,377,,377,377,,,,377,,,,,,,,,,,,,,,,,,,,377',
',,377,,,377,377,,,377,,,,,,,,,,,,,,,,,,,377,377,377,377,377,377,,,,377',
'377,,,,,,,377,,,377,377,377,,,377,377,781,781,781,,781,,,,781,781,,',
',781,,781,781,781,781,781,781,781,,,,,,781,781,781,781,781,781,781,',
',781,,,,,,,781,,,781,781,781,781,781,781,781,781,781,781,781,781,,781',
'781,,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781,,,781,,781,',
'781,,781,,,,,,,,781,,,,,781,781,781,781,781,781,,,,781,781,,,,,,,781',
',781,781,781,781,,,781,781,769,769,769,,769,,,,769,769,,,,769,,769,769',
'769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,,,769',
',,769,769,769,769,769,769,769,769,,769,769,769,,769,769,,769,769,769',
',,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,769,,,,769,,,,,,,,769',
',,,,769,769,769,769,769,769,,,,769,769,,,,,,,769,,,769,769,769,,,769',
'769,748,748,748,,748,,,,748,748,,,,748,,748,748,748,748,748,748,748',
',,,,,748,748,748,748,748,748,748,,,748,,,,,,,748,,,748,748,748,748,748',
'748,748,748,,748,748,748,,748,748,,748,748,748,,,,,,,,,,,,,,,,,,,,748',
',,748,,,748,748,,,748,,,,,,748,,,,,,,,748,,,,,748,748,748,748,748,748',
',,,748,748,,,,,,,748,,,748,748,748,,,748,748,436,436,436,,436,,,,436',
'436,,,,436,,436,436,436,436,436,436,436,,,,,,436,436,436,436,436,436',
'436,,,436,,,,,,,436,,,436,436,436,436,436,436,436,436,,436,436,436,',
'436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,,436,,',
',,,436,,,,,,,,436,,,,,436,436,436,436,436,436,,,,436,436,,,,,,,436,',
',436,436,436,,,436,436,729,729,729,,729,,,,729,729,,,,729,,729,729,729',
'729,729,729,729,,,,,,729,729,729,729,729,729,729,,,729,,,,,,,729,,,729',
'729,729,729,729,729,729,729,,729,729,729,,729,729,,729,729,729,,,,,',
',,,,,,,,,,,,,,729,,,729,,,729,729,,,729,,729,,,,729,,,,,,,,729,,,,,729',
'729,729,729,729,729,,,,729,729,,,,,,,729,,,729,729,729,,,729,729,723',
'723,723,,723,,,,723,723,,,,723,,723,723,723,723,723,723,723,,,,,,723',
'723,723,723,723,723,723,,,723,,,,,,,723,,,723,723,723,723,723,723,723',
'723,,723,723,723,,723,723,,,,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723',
'723,,,723,,,,,,,,,,,,,,,,,,,723,723,723,723,723,723,,,,723,723,,,,,',
',723,,,723,723,723,,,723,723,479,479,479,,479,,,,479,479,,,,479,,479',
'479,479,479,479,479,479,,,,,,479,479,479,479,479,479,479,,,479,,,,,',
',479,,,479,479,479,479,479,479,479,479,479,479,479,479,,479,479,,479',
'479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479,,,479,,479,,479,,479',
',,,,,,,479,,,,,479,479,479,479,479,479,,,,479,479,,,,,,,479,,479,479',
'479,479,,,479,479,481,481,481,,481,,,,481,481,,,,481,,481,481,481,481',
'481,481,481,,,,,,481,481,481,481,481,481,481,,,481,,,,,,,481,,,481,481',
'481,481,481,481,481,481,,481,481,481,,481,481,,481,481,481,,,,,,,,,',
',,,,,,,,,,481,,,481,,,481,481,,,481,,,,,,481,,,,,,,,481,,,,,481,481',
'481,481,481,481,,,,481,481,,,,,,,481,,,481,481,481,,,481,481,482,482',
'482,,482,,,,482,482,,,,482,,482,482,482,482,482,482,482,,,,,,482,482',
'482,482,482,482,482,,,482,,,,,,,482,,,482,482,482,482,482,482,482,482',
',482,482,482,,482,482,,482,482,482,,,,,,,,,,,,,,,,,,,,482,,,482,,,482',
'482,,,482,,,,,,482,,,,,,,,482,,,,,482,482,482,482,482,482,,,,482,482',
',,,,,,482,,,482,482,482,,,482,482,483,483,483,,483,,,,483,483,,,,483',
',483,483,483,483,483,483,483,,,,,,483,483,483,483,483,483,483,,,483',
',,,,,,483,,,483,483,483,483,483,483,483,483,,483,483,483,,483,483,,483',
'483,483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483,,,483,,,,,,483,,,,,,',
',483,,,,,483,483,483,483,483,483,,,,483,483,,,,,,,483,,,483,483,483',
',,483,483,712,712,712,,712,,,,712,712,,,,712,,712,712,712,712,712,712',
'712,,,,,,712,712,712,712,712,712,712,,,712,,,,,,,712,,,712,712,712,712',
'712,712,712,712,,712,712,712,,712,712,,,,712,,,,,,,,,,,,,,,,,,,,712',
',,712,,,712,712,,,712,,,,,,,,,,,,,,,,,,,712,712,712,712,712,712,,,,712',
'712,,,,,,,712,,,712,712,712,,,712,712,708,708,708,,708,,,,708,708,,',
',708,,708,708,708,708,708,708,708,,,,,,708,708,708,708,708,708,708,',
',708,,,,,,,708,,,708,708,708,708,708,708,708,708,,708,708,708,,708,708',
',708,708,708,,,,,,,,,,,,,,,,,,,,708,,,708,,,708,708,,,708,,,,,,708,',
',,,,,,708,,,,,708,708,708,708,708,708,,,,708,708,,,,,,,708,,,708,708',
'708,,,708,708,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705,705',
'705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705,705,705',
'705,705,705,705,705,,705,705,705,,705,705,,705,705,705,,,,,,,,,,,,,',
',,,,,,705,,,705,,,705,705,,,705,,,,,,705,,,,,,,,705,,,,,705,705,705',
'705,705,705,,,,705,705,,,,,,,705,,,705,705,705,,,705,705,682,682,682',
',682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,,,682,682,682',
'682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682,682,682,682,,682',
'682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682',
',,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682,682,,,',
',,,682,,,682,682,682,,,682,682,681,681,681,,681,,,,681,681,,,,681,,681',
'681,681,681,681,681,681,,,,,,681,681,681,681,681,681,681,,,681,,,,,',
',681,,,681,681,681,681,681,681,681,681,,681,681,681,,681,681,,681,681',
'681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,,681,,,,,,681,,,,,,,,681',
',,,,681,681,681,681,681,681,,,,681,681,,,,,,,681,,,681,681,681,,,681',
'681,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549,549,549',
',,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549,549,549,549',
'549,549,549,,549,549,549,,549,549,,,,549,,,,,,,,,,,,,,,,,,,,549,,,549',
',,549,549,,,549,,,,,,,,,,,,,,,,,,,549,549,549,549,549,549,,,,549,549',
',,,,,,549,,,549,549,549,,,549,549,675,675,675,,675,,,,675,675,,,,675',
',675,675,675,675,675,675,675,,,,,,675,675,675,675,675,675,675,,,675',
',,,,,,675,,,675,675,675,675,675,675,675,675,,675,675,675,,675,675,,675',
'675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,,,,,675,,,,,,',
',675,,,,,675,675,675,675,675,675,,,,675,675,,,,,,,675,,,675,675,675',
',,675,675,674,674,674,,674,,,,674,674,,,,674,,674,674,674,674,674,674',
'674,,,,,,674,674,674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674',
'674,674,674,674,674,674,674,674,,674,674,,674,674,674,,,,,,,,,,,,,,',
',,,,,674,,,674,,,674,674,,,674,,,,674,,674,,,,,,,,674,,,,,674,674,674',
'674,674,674,,,,674,674,,,,,,,674,,674,674,674,674,,,674,674,673,673',
'673,,673,,,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673',
'673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673,673',
'673,673,673,673,,673,673,,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,',
',673,673,,,673,,673,,673,,673,,,,,,,,673,,,,,673,673,673,673,673,673',
',,,673,673,,,,,,,673,,673,673,673,673,,,673,673,670,670,670,,670,,,',
'670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670,670,670,670,670',
'670,670,,,670,,,,,,,670,,,670,670,670,670,670,670,670,670,,670,670,670',
',670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,',
',,,,670,,,,,,,,670,,,,,670,670,670,670,670,670,,,,670,670,,,,,,,670',
',,670,670,670,,,670,670,669,669,669,669,669,,,,669,669,,,,669,,669,669',
'669,669,669,669,669,,,,,,669,669,669,669,669,669,669,,,669,,,,,,669',
'669,,669,669,669,669,669,669,669,669,669,,669,669,669,,669,669,,669',
'669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669,,,669,,669,,,,669,,,',
',,,,669,,,,,669,669,669,669,669,669,,,,669,669,,,,,,,669,,,669,669,669',
',,669,669,666,666,666,,666,,,,666,666,,,,666,,666,666,666,666,666,666',
'666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666',
'666,666,666,666,666,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,',
',,,,,666,,,666,,,666,666,,,666,,666,,666,,666,,,,,,,,666,,,,,666,666',
'666,666,666,666,,,,666,666,,,,,,,666,,666,666,666,666,,,666,666,665',
'665,665,,665,,,,665,665,,,,665,,665,665,665,665,665,665,665,,,,,,665',
'665,665,665,665,665,665,,,665,,,,,,,665,,,665,665,665,665,665,665,665',
'665,,665,665,665,,665,665,,665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665',
',,665,665,,,665,,,,,,665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665',
'665,,,,,,,665,,,665,665,665,,,665,665,664,664,664,,664,,,,664,664,,',
',664,,664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,',
',664,,,,,,,664,,,664,664,664,664,664,664,664,664,,664,664,664,,664,664',
',664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,,664,,664,,,,664',
',,,,,,,664,,,,,664,664,664,664,664,664,,,,664,664,,,,,,,664,,,664,664',
'664,,,664,664,635,635,635,,635,,,,635,635,,,,635,,635,635,635,635,635',
'635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635,635',
'635,635,635,635,635,,635,635,635,,635,635,,635,635,635,,,,,,,,,,,,,',
',,,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,,,635,,,,,635,635,635',
'635,635,635,,,,635,635,,,,,,,635,,,635,635,635,,,635,635,629,629,629',
',629,,,,629,629,,,,629,,629,629,629,629,629,629,629,,,,,,629,629,629',
'629,629,629,629,,,629,,,,,,,629,,,629,629,629,629,629,629,629,629,,629',
'629,629,,629,629,,629,629,629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629',
',,629,,,,,,629,,,,,,,,629,,,,,629,629,629,629,629,629,,,,629,629,,,',
',,,629,,,629,629,629,,,629,629,522,522,522,,522,,,,522,522,,,,522,,522',
'522,522,522,522,522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,',
',522,,,522,522,522,522,522,522,522,522,522,522,522,522,,522,522,,522',
'522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,522,,522,,522',
',,,,,,,522,,,,,522,522,522,522,522,522,,,,522,522,,,,,,,522,,522,522',
'522,522,,,522,522,525,525,525,,525,,,,525,525,,,,525,,525,525,525,525',
'525,525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525',
'525,525,525,525,525,525,525,525,525,525,,525,525,,525,525,525,,,,,,',
',,,,,,,,,,,,,525,,,525,,,525,525,,,525,,,,525,,525,,,,,,,,525,,,,,525',
'525,525,525,525,525,,,,525,525,,,,,,,525,,525,525,525,525,,,525,525',
'527,527,527,,527,,,,527,527,,,,527,,527,527,527,527,527,527,527,,,,',
',527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527,527,527,527',
'527,527,,527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,',
'527,,,527,527,,,527,,,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527',
',,,527,527,,,,,,,527,,,527,527,527,,,527,527,533,533,533,533,533,,,',
'533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533,533,533,533',
'533,533,,,533,,,,,,533,533,533,533,533,533,533,533,533,533,533,533,',
'533,533,533,,533,533,,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533',
'533,,,533,,533,,,,533,,,,,,,,533,,,,,533,533,533,533,533,533,,,,533',
'533,,,,,,533,533,,,533,533,533,,,533,533,541,541,541,,541,,,,541,541',
',,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541,541,541',
',,541,,,,,,,541,,,541,541,541,541,541,541,541,541,,541,541,541,,541',
'541,,,,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,,,,,,,,,,,',
',,,,,,541,541,541,541,541,541,,,,541,541,,,,,,,541,,,541,541,541,,,541',
'541,617,617,617,,617,,,,617,617,,,,617,,617,617,617,617,617,617,617',
',,,,,617,617,617,617,617,617,617,,,617,,,,,,,617,,,617,617,617,617,617',
'617,617,617,617,617,617,617,,617,617,,617,617,617,,,,,,,,,,,,,,,,,,',
',617,,,617,,,617,617,,,617,,617,,617,,617,,,,,,,,617,,,,,617,617,617',
'617,617,617,,,,617,617,,,,,,,617,,617,617,617,617,,,617,617,543,543',
'543,,543,,,,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543',
'543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543,543,543,543,543',
'543,543,543,543,,543,543,,543,543,543,,,,,,,,,,,,,,,,,,,,543,,,543,',
',543,543,,,543,,543,,543,,543,,,,,,,,543,,,,,543,543,543,543,543,543',
',,,543,543,,,,,,,543,,543,543,543,543,470,,543,543,,,,470,470,470,,',
'470,470,470,789,470,789,789,789,789,789,,,,470,470,470,470,,,789,,,',
',470,470,,470,470,470,470,470,,,,,,,,,,789,,,,,,,,,789,789,789,789,',
'470,470,470,470,470,470,470,470,470,470,470,470,470,470,,,470,470,470',
',,470,,,470,,,470,470,,470,789,470,,470,,470,470,470,470,470,470,470',
',470,470,470,1059,,1059,1059,1059,1059,1059,,,,,,470,470,470,470,1059',
'470,31,470,,,,,470,31,31,31,,,31,31,31,,31,,,,1059,,,,,,31,31,,,,1059',
'1059,,,,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,,,1059,,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31',
',31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,,31,31,60,31,,31,,,,60',
'60,60,31,,60,60,60,574,60,574,574,574,574,574,,,,,60,60,60,,,574,,,',
',60,60,,60,60,60,60,60,,,,,,,,,,574,,,,,,,,,574,574,574,574,,60,60,60',
'60,60,60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60,60,,60,574',
'60,,60,,60,60,60,60,60,60,60,,60,,60,744,,744,744,744,744,744,,,,,,60',
'60,60,60,744,60,30,60,,,,,60,30,30,30,,,30,30,30,,30,,,,744,,,,,30,30',
'30,,744,744,744,744,,,,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,744',
',30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,',
'30,30,,30,,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30',
'471,30,,30,,,,471,471,471,30,,471,471,471,742,471,742,742,742,742,742',
',,,471,471,471,471,,,742,,,,,471,471,,471,471,471,471,471,,,,,,,,,,742',
',,,,,,,,742,742,742,742,,471,471,471,471,471,471,471,471,471,471,471',
'471,471,471,,,471,471,471,,,471,,,471,,,471,471,,471,742,471,,471,,471',
'471,471,471,471,471,471,,471,471,471,1086,,1086,1086,1086,1086,1086',
',,,,,471,471,471,471,1086,471,509,471,,,,,471,509,509,509,,,509,509',
'509,,509,,,,1086,,,,,509,509,,,,,1086,1086,,,,509,509,,509,509,509,509',
'509,,,,,,,,,,,,,,,,,,,,,,1086,,,,,,,,,,,,,509,,461,,,,,509,,461,461',
'461,509,509,461,461,461,746,461,746,746,746,746,746,,,,461,461,461,',
',,746,509,509,,,461,461,,461,461,461,461,461,,,509,,,,,509,,746,,,,',
'509,,,,,,746,746,,461,461,461,461,461,461,461,461,461,461,461,461,461',
'461,,,461,461,461,,,461,,461,461,,,461,461,,461,746,461,,461,,461,461',
'461,461,461,461,461,,461,461,461,,,,,,,,,,,,,461,461,,461,,461,,,,,',
',461,661,661,661,661,661,661,661,661,661,661,661,661,661,661,661,661',
'661,661,661,661,661,661,661,661,,,,661,661,661,661,661,661,661,661,661',
'661,,,,,,661,661,661,661,661,661,661,661,661,,,661,,,,,,,,,661,661,',
'661,661,661,661,661,661,661,,,661,661,,,,661,661,661,661,,,,,,,,,,,',
',,661,661,,661,661,661,661,661,661,661,661,661,661,661,,,661,661,,,',
',,,,,,661,,,,,,,,,661,,,,,661,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,427,427,427,,,,427,427,427',
'427,427,427,427,427,427,427,,,,,,427,427,427,427,427,427,427,427,427',
',,427,,,,,,,,,427,427,,427,427,427,427,427,427,427,,,427,427,,,,427',
'427,427,427,,,,,,,,,,,,,,427,427,,427,427,427,427,427,427,427,427,427',
'427,427,,,427,427,,,,,,,,,,427,,,,,,,,,427,,,,,427,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11',
'11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11',
'11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,',
'11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,',
'11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12',
'12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,',
',,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,',
',12,,,,,,,,,12,,,,,12,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,,,,103,103,103,103,103',
'103,103,103,103,103,,,,,,103,103,103,103,103,103,103,103,103,103,103',
'103,,103,,,,,,,103,103,,103,103,103,103,103,103,103,,,103,103,,,,103',
'103,103,103,,,,,,,,,,,,,,103,103,,103,103,103,103,103,103,103,103,103',
'103,103,,,103,,,,,,,,,,,,,,,,,,,,103,,,,,103,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75',
'75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75',
',75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75',
'75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,790',
'790,790,790,790,790,790,790,790,790,790,790,790,790,790,790,790,790',
'790,790,790,790,790,790,,,,790,790,790,790,790,790,790,790,790,790,',
',,,,790,790,790,790,790,790,790,790,790,,,790,,,,,,,,,790,790,,790,790',
'790,790,790,790,790,,,790,790,,,,790,790,790,790,,,,,,,,,,,,,,790,790',
',790,790,790,790,790,790,790,790,790,790,790,,,790,,,,,,,,,,668,668',
',,668,,,,,,790,,,668,668,790,668,668,668,668,668,668,668,,,668,668,',
',,668,668,668,668,,,,,,668,,,,,,,,668,668,,668,668,668,668,668,668,668',
'668,668,668,668,,,668,,,,,,,,,,619,619,,,619,,,,,,668,,,619,619,668',
'619,619,619,619,619,619,619,,,619,619,,,,619,619,619,619,,,,,,619,,',
',,,,,619,619,,619,619,619,619,619,619,619,619,619,619,619,,,619,,,,',
',,,,,1038,1038,,,1038,,,,,,619,,,1038,1038,619,1038,1038,1038,1038,1038',
'1038,1038,,,1038,1038,,,,1038,1038,1038,1038,,,,,,1038,,,,,,,,1038,1038',
',1038,1038,1038,1038,1038,1038,1038,1038,1038,1038,1038,,,1038,,,,,',
',,,,618,618,,,618,,,,,,1038,,,618,618,1038,618,618,618,618,618,618,618',
',,618,618,,,,618,618,618,618,,,,,,618,,,,,,,,618,618,,618,618,618,618',
'618,618,618,618,618,618,618,,,618,,,,,,,,,,545,545,,,545,,,,,,618,,',
'545,545,618,545,545,545,545,545,545,545,,,545,545,,,,545,545,545,545',
',,,,,545,,,,,,,,545,545,,545,545,545,545,545,545,545,545,545,545,545',
',,545,,,,,,,,,,555,555,,,555,,,,,,545,,,555,555,545,555,555,555,555',
'555,555,555,,,555,555,,,,555,555,555,555,,,,,,555,,,,,,,,555,555,,555',
'555,555,555,555,555,555,555,555,555,555,,,555,,,,,,,,,,1039,1039,,,1039',
',,,,,555,,,1039,1039,555,1039,1039,1039,1039,1039,1039,1039,,,1039,1039',
',,,1039,1039,1039,1039,,,,,,1039,,,,,,,,1039,1039,,1039,1039,1039,1039',
'1039,1039,1039,1039,1039,1039,1039,,,1039,,,,,,,,,,780,780,,,780,,,',
',,1039,,,780,780,1039,780,780,780,780,780,780,780,,,780,780,,,,780,780',
'780,780,,,,,,780,,,,,,,,780,780,,780,780,780,780,780,780,780,780,780',
'780,780,,,780,,,,,,,,,,779,779,,,779,,,,,,780,,,779,779,780,779,779',
'779,779,779,779,779,,,779,779,,,,779,779,779,779,,,,,,779,,,,,,,,779',
'779,,779,779,779,779,779,779,779,779,779,779,779,,,779,,,,,,,,,,229',
'229,,,229,,,,,,779,,,229,229,779,229,229,229,229,229,229,229,,,229,229',
',,,229,229,229,229,,,,,,229,,,,,,,,229,229,,229,229,229,229,229,229',
'229,229,229,229,229,,,229,,,,,,,,,,230,230,,,230,,,,,,229,,,230,230',
'229,230,230,230,230,230,230,230,,,230,230,,,,230,230,230,230,,,,,,230',
',,,,,,,230,230,,230,230,230,230,230,230,230,230,230,230,230,,,230,,',
',,,,,,,1033,1033,,,1033,,,,,,230,,,1033,1033,230,1033,1033,1033,1033',
'1033,1033,1033,,,1033,1033,,,,1033,1033,1033,1033,,,,,,1033,,,,,,,,1033',
'1033,,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,,,1033',
',,,,,,,,,478,478,,,478,,,,,,1033,,,478,478,1033,478,478,478,478,478',
'478,478,,,478,478,,,,478,478,478,478,,,,,,478,,,,,,,,478,478,,478,478',
'478,478,478,478,478,478,478,478,478,,,478,,,,,,,,,,554,554,,,554,,,',
',,478,,,554,554,478,554,554,554,554,554,554,554,,,554,554,,,,554,554',
'554,554,,,,,,554,,,,,,,,554,554,,554,554,554,554,554,554,554,554,554',
'554,554,,,554,,,,,,,,,,477,477,,,477,,,,,,554,,,477,477,554,477,477',
'477,477,477,477,477,,,477,477,,,,477,477,477,477,,,,,,477,,,,,,,,477',
'477,,477,477,477,477,477,477,477,477,477,477,477,,,477,,,,,,,,,,544',
'544,,,544,,,,,,477,,,544,544,477,544,544,544,544,544,544,544,,,544,544',
',,,544,544,544,544,,,,,,544,,,,,,,,544,544,,544,544,544,544,544,544',
'544,544,544,544,544,,,544,,,,,,,,,,667,667,,,667,,,,,,544,,,667,667',
'544,667,667,667,667,667,667,667,,,667,667,,,,667,667,667,667,,,,,,667',
',,,,,,,667,667,,667,667,667,667,667,667,667,667,667,667,667,,357,667',
'357,357,357,357,357,,,,,278,278,,,278,357,,,,,667,,,278,278,667,278',
'278,278,278,278,278,278,,,278,278,357,357,,278,278,278,278,,,357,357',
'357,357,,,,,,,,278,278,,278,278,278,278,278,278,278,278,278,278,278',
',980,278,980,980,980,980,980,,,,357,,,,,,980,,,,,278,,,,983,278,983',
'983,983,983,983,,,,,,,980,,788,983,788,788,788,788,788,980,980,980,980',
',,,,1043,788,1043,1043,1043,1043,1043,,983,952,,952,952,952,952,952',
'1043,983,983,983,983,,,788,,952,,,980,,,,788,788,788,788,,,1043,985',
',985,985,985,985,985,,952,,1043,1043,,,983,,985,,,952,952,950,,950,950',
'950,950,950,,788,948,,948,948,948,948,948,950,985,,,,,,1043,,948,,,985',
'985,,,952,,,,,1061,950,1061,1061,1061,1061,1061,,,,948,,950,950,,,1061',
',,,,948,948,,831,985,831,831,831,831,831,946,,946,946,946,946,946,1061',
',831,,,,,,950,946,,1061,1061,,,,,948,,,,,,,831,,,,,,,946,,831,831,831',
'831,,,,946,946,946,946,,1061,,,,,,,,,,,,,,,,831,,,,,,,,831,,,,,,,946' ]
        racc_action_check = arr = ::Array.new(26308, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1433,  3730,  1420,   nil,   651,   nil,   nil, 10599,   913,
   nil, 24062, 24200,   888,   nil,   855,   830,   858,   885,  1236,
   163,   nil,   -73,  6119,  1615,   939,   nil,   498,   nil,   159,
 23309, 23049,  6259,  6399,  6539,   nil,  2602,  6679,  6819,   nil,
   831,   398,   405,   885,   243,  7099,  7239,   514,  7379,   801,
   982,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 23177,   nil,   -68,  7519,   nil,   -10,   nil,  7659,  7799,   nil,
   nil,  7939,  8079,   794,   nil, 24476,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   106,   nil,   nil,   nil,   nil,   nil,   nil,   731,
   715,   702,   685, 24338,   nil,   nil,   nil,   nil,   nil,   nil,
   260,   nil,   nil,   392,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  8359,   nil,   nil,   nil,
   nil,  8499,  8639,  8779,  8919,  9059,   692,   nil,   733,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   645,   nil,  3166,  9339,  9479,  9619,  9759,  9899, 10039, 25344,
 25417,   nil, 10179, 10319, 10459,   nil,   nil,   494,   -53,   104,
   693,   109,   602,   646,   nil, 10739,  3025,   610, 11019, 11159,
 11299, 11439, 11579, 11719, 11859, 11999, 12139, 12279, 12419, 12559,
 12699, 12839, 12979, 13119, 13259, 13399, 13539, 13679, 13819, 13959,
   nil,   nil,   nil,   nil, 14099,   nil,   nil,   nil, 25928,   nil,
   nil,   601, 14239,   nil,   nil,   586,   nil,   nil,   nil, 14379,
   nil,   nil, 14519,   nil,  1333,   nil,   541,   529,   nil, 14799,
   396, 14939,   nil,   nil, 15079, 15219,   nil,   nil,   638,   nil,
   nil, 15499,   769,   nil,   229,  1897,   234,   259,   166, 15919,
  1615,  1123,  1054,  1051,  1408,   690,   nil,  1369,  1330,    67,
   nil,   nil,   nil,  1357,   256,  1317, 16199,   nil,   439,  1378,
   458,   nil,  1363, 16759,   nil, 16899,  3307,   nil, 17039,  1337,
   nil,   378,   295,  1326, 17599,   nil,   nil, 25917,   145,    -1,
    -7, 17739,  1333,  1192,   623,  1398,  1262,     8,    24,   135,
  1334,    38,  1351,   nil,   nil, 18019,   nil, 18159,   271,   149,
   624,   619,   597,   586,   541,   539,   102,   nil,   484,   nil,
   nil,   nil,   nil,   nil,   394,   nil,   188,   nil,   322,   nil,
  1246,   428,   nil,  1224,   256,   nil,  1218,   -41,   nil,  1208,
   -42,   nil,   330,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  2884, 23924,   nil,   nil,
   nil,   nil,  1213,   nil,   nil,  1196, 18719,  1194,   nil,   nil,
  1177,   nil,   578,   155,  1261,   nil,   nil,  1051,   nil,   nil,
   nil,   nil,   nil,  1192,  1166,   nil,   nil,  1154,  1145,   441,
   442, 23649,   nil,   nil,   nil,   524,   780,  1162,   nil,   nil,
 22917, 23437,   nil,   nil,   nil,   140,   nil, 25709, 25563, 19139,
   307, 19279, 19419, 19559,  3166,  3025,   222,   -43,  1161,  1149,
  1139,  1132,  3589,  3448,   939,  2320,  2602,  2743,   730,  2461,
  2179,   574,   667,  3307,  2884,  1756,   858,  1165,   nil, 23569,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1047,  1037,
   nil,   nil, 21939,   nil,   nil, 22079,   nil, 22219,   nil,   253,
   nil,   nil,   nil, 22359,  1318,  1034,  1016,  1012,   nil,   nil,
  1009, 22499,  1007, 22779, 25782, 24979,   496,   989,   nil, 20399,
   948,   nil,  5279,  5419, 25636, 25052,   602,  1897,  5699,  1041,
  1016,  1459,   nil,   nil,  5979,   nil,   nil,  5839,   nil,   914,
   nil,   570,   945,   nil, 23141,   nil,   918,   920,   nil,   921,
   929,   930,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   920,   592,   nil,   nil,  5559,   nil,   nil,   nil,  1013,   nil,
   nil,   nil,  1014,   nil,   nil,  1024,  2743,  1066,   nil,  2461,
    25,  1081,  1098,  1095,  1105,   nil,   nil, 22639, 24906, 24760,
    25,   nil,   200,   268,    45,   nil,   352,   nil,  1044, 21799,
   nil,  1074,   nil,   nil,   nil, 21659,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   161,   nil,   nil,
   135,   nil,   nil,   nil,  1047,   nil,   nil,  1049,   nil,  1069,
   nil, 23786,   nil,  1055, 21519, 21379, 21239, 25855, 24687, 21099,
 20959,   491,  1094, 20819, 20679, 20539,  5139,  1093,   nil,   nil,
   nil, 20259, 20119,  1103,   nil,   nil,   315,   330,   908,     0,
  1092,  1091,   nil,   -50,  1193,    73,   nil,  1116,   nil,  1222,
   nil,   nil,  1103,   nil,  1145, 19979,   nil,   nil, 19839,   nil,
   nil,    85, 19699,  1105,   nil,  1122,    21,    23,  1165,   229,
   820,  1189,  1153, 18999,   nil,  1220,    18,   210,   nil, 18859,
   nil,   nil,  1179,   413,   nil,   nil,     3,  1189,   314,   nil,
   nil,   457, 23401,   nil, 23240,   nil, 23613,   nil, 18579,   nil,
   585,   nil,  1211,   385,  1216,   nil,   nil,   nil,   nil,   862,
   nil,  1331,   nil,   nil,   nil,   nil,   nil,  1337,   nil, 18439,
  1223,     5,    33,    69,    65,  3871,   nil,  1195,   nil, 25271,
 25198, 18299,   nil,   nil,   nil,   863,  4717,  4999, 26030, 22881,
 24614,   -16,  1034,  1051,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1267, 17879,  1289,   335,   338,   652,   132,   nil,  1474,
 17459,   nil,  1295,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 17319, 17179, 16619, 16479,   -77, 16339,   nil,
   nil, 26166,   nil,  3448,   nil,   nil,  1341,   nil,   -23,   nil,
   nil,   nil,   nil,  1326,   168,   nil,   nil,   nil,   nil,   nil,
   nil,  3589,   nil,  1332,  1374,   nil,   nil,   nil,   nil,   nil,
  4435,  4858,  1333,  -120,  -107,   nil,   nil,   nil,   -94,   -79,
   nil,    41,    68,   nil,   103,   nil,   nil,   125,   559,   148,
   661,   nil,   270,   nil,   nil, 16059,   nil,  1474,   272,   nil,
   nil,    32,     6,   313,   230,  1228,   nil,   226,  1756, 15779,
   621,   418,   432,   321,   636,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   311,   326,   339,   nil,   nil, 15639, 15359,  2038,
   365,   416,   nil,   430,   444,   446,   nil,   468,   518,   511,
 14659,   nil,   nil,   nil,   nil,  2038,  2320,   nil,    34, 10879,
   nil,   597,   708,  1319,   nil,   nil, 26173,   nil, 26114,   nil,
 26105,   nil, 26054,   nil,   nil,   nil,   nil,   135,   687,   656,
   nil,   -10,   nil,   nil,  9199,  2179,   nil,   nil,   809,   -93,
   nil,   nil,   nil,   nil,   nil,   735,   nil,   446,   nil,   nil,
 25990,   nil,   nil, 26015,   nil, 26084,   nil,   nil,   764,  8219,
   818,   825,   nil,   874,  4576,   852,   880,   916,   835,   946,
   nil,   nil,   nil,   558,   nil,   nil,   nil,   768,   772,   773,
   784,   790,   773,   797,   815,  4294,   nil,    49,   nil,   nil,
  4153,  4012,   799,   nil,   nil,   800,   802,   803,   809,   nil,
   810,   nil,  1087, 25490,   nil,   nil,   936,  6959, 24833, 25125,
  1192,   nil,   975, 26045,   nil,   nil,   nil,   nil,   789,   839,
   592,   nil,   nil,   nil,   961,   962,   nil,   455,   nil, 22980,
   nil, 26142,   nil,   356,   nil,   nil,   899,   900,   nil,   871,
    -8,    -9,    52,  1333,   nil,   875,   879,   nil,   nil,   nil,
   889,  1056,  1075,  1076,   -11,   nil, 23500,   nil,   nil,   nil,
   nil,   345,   nil ]

racc_action_default = [
    -1,  -647,  -646,  -647,    -2,  -633,    -4,    -5,  -647,    -8,
    -9,  -647,  -647,  -647,   -35,  -647,  -647,   -39,  -647,  -647,
  -294,   -51,  -635,  -647,   -56,   -61,   -62,   -63,   -67,  -271,
  -271,  -271,  -308,  -341,  -342,   -79,  -646,   -83,   -91,   -93,
  -647,  -535,  -536,  -647,  -647,  -647,  -647,  -230,  -647,  -635,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -620,  -296,  -299,  -646,  -306,  -316,  -421,  -647,  -647,   -58,
   -58,  -633,  -647,  -326,  -333,  -647,  -343,  -344,  -346,  -347,
  -348,  -349,  -350,  -351,  -352,  -353,  -354,  -355,  -364,  -466,
  -467,  -468,  -469,  -470,  -471,  -646,  -474,  -646,  -646,  -646,
  -646,  -646,  -646,  -646,  -511,  -517,  -519,  -520,  -521,  -522,
  -618,  -524,  -525,  -619,  -527,  -528,  -529,  -530,  -531,  -532,
  -533,  -534,  -539,  -540,  1093,    -3,  -634,  -642,  -643,  -644,
    -7,  -647,  -647,  -647,  -647,  -647,  -647,   -23,  -647,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -134,  -135,
  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,
  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
   -28,  -131,  -646,  -647,  -647,  -647,  -647,  -647,  -646,  -647,
  -647,  -630,  -647,  -647,  -635,  -636,   -55,  -647,  -535,  -536,
  -647,  -294,  -647,  -647,  -236,  -647,  -646,  -647,  -647,  -647,
  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
  -245,  -246,  -247,  -248,  -647,  -357,  -450,  -429,  -647,  -631,
  -632,   -68,  -647,  -315,  -356,  -647,  -443,  -445,   -74,  -646,
  -440,   -75,  -635,   -76,  -251,  -266,  -646,  -646,  -270,  -647,
  -276,  -647,  -646,  -612,  -647,  -647,   -77,   -78,  -633,   -16,
   -17,  -647,   -20,   -21,   -81,  -646,  -635,  -647,   -84,   -87,
  -646,   -99,  -100,  -647,  -647,  -107,  -308,  -311,  -635,  -433,
  -341,  -342,  -345,  -441,  -647,   -89,  -647,   -95,  -304,  -518,
  -647,  -224,  -225,  -647,  -237,  -647,  -646,  -298,  -647,  -647,
  -252,  -639,  -639,  -647,  -646,  -317,  -318,  -567,   -57,  -647,
  -647,  -647,  -646,  -646,  -633,  -647,  -634,  -535,  -536,  -647,
  -647,  -294,  -647,  -374,  -375,  -647,  -329,  -647,  -122,  -123,
  -165,  -166,  -167,  -183,  -188,  -195,  -198,  -336,  -647,  -535,
  -536,  -607,  -608,  -472,  -647,  -495,  -647,  -497,  -647,  -499,
  -647,  -647,  -479,  -647,  -647,  -485,  -647,  -647,  -491,  -647,
  -647,  -493,  -647,  -510,  -512,  -513,  -514,  -515,    -6,  -645,
   -29,   -30,   -31,   -32,   -33,   -10,  -646,  -647,   -25,   -26,
   -27,  -132,  -647,   -36,   -38,  -281,  -647,  -647,  -280,   -37,
  -647,   -40,  -647,  -294,   -48,   -50,  -206,  -256,  -276,   -52,
   -53,   -41,  -207,  -256,  -635,  -261,  -262,  -646,  -646,  -621,
  -622,  -271,  -438,  -623,  -624,  -622,  -621,  -271,  -437,  -439,
  -623,  -624,   -47,  -214,   -54,  -635,  -314,  -647,  -647,  -646,
  -304,  -647,  -647,  -647,  -215,  -216,  -217,  -218,  -219,  -220,
  -221,  -222,  -226,  -227,  -228,  -229,  -231,  -232,  -233,  -234,
  -235,  -238,  -239,  -240,  -241,  -635,  -249,  -647,  -451,  -271,
  -621,  -622,   -65,   -69,  -272,  -434,  -447,  -450,  -635,  -635,
  -310,  -267,  -647,  -275,  -268,  -647,  -273,  -647,  -277,  -647,
  -615,  -617,   -15,  -634,   -19,  -647,  -635,   -80,  -302,   -96,
   -85,  -647,  -635,  -646,  -647,  -647,  -106,  -647,  -518,  -647,
   -92,   -97,  -647,  -647,  -647,  -647,  -250,  -242,  -647,  -458,
  -647,  -300,  -637,  -253,  -641,  -640,  -255,  -641,  -305,  -647,
  -610,  -639,  -647,  -422,  -567,  -425,  -606,  -606,  -550,  -552,
  -552,  -552,  -566,  -568,  -569,  -570,  -571,  -572,  -573,  -574,
  -575,  -647,  -577,  -579,  -581,  -586,  -588,  -589,  -591,  -596,
  -598,  -599,  -601,  -602,  -603,  -647,  -646,  -365,  -366,  -646,
  -647,  -647,  -647,  -647,  -647,  -360,  -453,  -646,  -647,  -647,
  -304,   -58,  -117,  -118,  -647,  -120,  -647,  -294,  -646,  -647,
  -334,  -545,  -338,  -628,  -629,  -647,  -473,  -496,  -501,  -502,
  -504,  -475,  -498,  -476,  -500,  -477,  -478,  -647,  -481,  -483,
  -647,  -484,  -487,  -488,  -647,  -489,  -490,  -647,  -516,  -647,
   -24,  -647,   -34,  -284,  -647,  -647,  -646,  -647,  -647,  -647,
  -647,  -442,  -647,  -263,  -265,  -647,  -647,   -70,  -259,  -260,
  -435,  -647,  -647,   -72,  -436,  -313,  -621,  -622,  -621,  -622,
  -635,  -647,  -428,  -646,   -64,  -430,  -447,  -647,  -448,  -647,
  -258,  -309,  -646,  -274,  -278,  -647,  -613,  -614,  -647,   -18,
   -22,   -82,  -647,   -88,   -94,  -635,  -621,  -622,  -646,  -103,
  -105,  -647,   -90,  -647,  -213,  -223,  -635,  -646,  -358,  -646,
  -297,  -363,  -635,  -639,  -307,  -611,  -647,  -635,  -647,  -548,
  -549,  -647,  -647,  -559,  -647,  -562,  -647,  -564,  -647,  -376,
  -647,  -378,  -380,  -387,  -635,  -580,  -590,  -600,  -604,  -646,
  -367,  -646,   -59,  -368,  -369,  -321,  -322,  -647,  -324,  -647,
  -635,  -621,  -622,  -625,  -303,  -646,  -117,  -118,  -119,  -647,
  -647,  -646,  -327,  -541,  -543,  -330,  -646,  -646,  -567,  -567,
  -647,  -635,  -647,  -646,  -480,  -482,  -486,  -492,  -494,   -11,
  -133,  -282,  -647,  -635,  -621,  -622,  -622,  -621,   -49,  -257,
  -647,  -638,  -646,   -43,  -209,   -44,  -210,   -71,   -45,  -212,
   -46,  -211,   -73,  -647,  -647,  -647,  -647,  -442,  -647,  -410,
  -411,  -635,  -413,  -646,  -432,  -431,  -647,  -444,  -646,  -446,
  -269,  -279,  -616,   -86,  -101,   -98,  -312,   -12,   -14,  -359,
  -361,  -646,  -465,  -459,  -646,  -460,  -461,  -301,  -254,  -423,
  -646,  -646,  -415,  -635,  -606,  -587,  -605,  -551,  -552,  -552,
  -578,  -552,  -552,  -597,  -552,  -575,  -592,  -635,  -647,  -385,
  -647,  -576,  -647,  -362,  -370,  -647,  -372,  -646,  -647,   -60,
  -323,  -647,  -442,  -647,  -117,  -118,  -121,  -635,  -646,  -647,
  -647,  -647,  -647,  -635,  -647,  -339,  -609,  -503,  -506,  -507,
  -508,  -509,  -647,  -283,  -442,   -42,  -208,  -264,  -647,  -243,
  -606,  -606,  -392,  -646,  -646,  -646,  -409,  -647,  -635,  -575,
  -583,  -584,  -594,  -452,   -66,  -646,  -646,  -464,  -647,  -647,
  -463,  -647,  -647,  -647,  -424,  -547,  -647,  -555,  -647,  -557,
  -647,  -560,  -647,  -563,  -565,  -377,  -379,  -383,  -647,  -388,
  -319,  -647,  -373,  -320,  -647,  -646,  -325,  -442,  -647,  -647,
  -331,  -335,  -337,  -544,  -546,  -545,  -505,  -647,  -390,  -391,
  -400,  -394,  -402,  -647,  -405,  -647,  -407,  -412,  -647,  -647,
  -582,  -647,  -449,  -646,  -646,  -108,  -109,  -647,  -647,  -116,
  -462,  -426,  -427,  -635,  -417,  -419,  -420,  -552,  -552,  -552,
  -552,  -381,  -647,  -386,  -647,  -646,  -278,  -646,  -328,  -542,
  -646,  -646,  -606,  -585,  -393,  -646,  -646,  -646,  -646,  -595,
  -646,  -414,  -593,  -647,  -304,   -13,  -458,  -646,  -647,  -647,
  -115,  -416,  -647,  -647,  -553,  -556,  -558,  -561,  -647,  -384,
  -646,  -454,  -455,  -456,  -647,  -647,  -389,  -647,  -397,  -647,
  -399,  -647,  -403,  -647,  -406,  -408,  -303,  -625,  -457,  -635,
  -621,  -622,  -625,  -114,  -418,  -552,  -382,  -371,  -332,  -340,
  -646,  -646,  -646,  -646,  -442,  -554,  -647,  -395,  -398,  -401,
  -404,  -646,  -396 ]

clist = [
'6,236,233,129,461,467,229,317,387,614,355,4,142,142,279,359,360,332',
'332,364,727,290,524,358,358,277,9,358,550,345,513,454,9,295,295,295',
'414,606,609,582,425,29,362,363,438,439,787,29,147,147,870,575,332,509',
'318,296,296,296,281,288,291,350,29,739,740,126,848,703,347,129,703,29',
'29,29,125,29,142,339,882,420,421,422,423,137,221,335,351,358,358,358',
'358,316,518,395,706,397,399,402,405,408,411,397,888,869,142,871,29,29',
'507,873,29,145,145,445,778,314,445,697,394,560,754,445,563,566,293,306',
'307,863,1006,924,590,297,297,297,956,833,706,130,1004,1029,365,642,396',
'644,375,959,648,451,412,648,9,647,472,628,650,630,898,642,629,424,900',
'1020,352,377,786,29,631,790,975,388,29,29,29,29,29,782,372,356,926,569',
'391,449,450,524,695,671,353,928,343,474,475,661,925,432,696,278,1003',
'2,1,573,859,433,444,357,736,444,889,762,427,516,444,517,838,1029,693',
'1051,769,317,703,703,462,927,854,1013,477,938,455,1006,393,295,434,471',
'398,713,401,374,404,1074,407,410,476,722,907,706,792,793,437,437,413',
'899,220,535,461,467,868,418,582,767,709,936,870,29,29,29,29,29,29,29',
'737,896,956,29,29,29,847,865,515,1049,1025,877,935,1023,690,295,136',
'29,317,455,870,635,295,317,346,295,523,523,632,836,520,332,395,348,732',
'354,,296,129,1007,547,610,544,873,,1076,,296,332,358,988,718,,29,537',
',290,529,,554,29,718,,29,1035,611,612,534,,,,,,1026,735,,1027,,715,590',
',699,29,945,570,551,29,332,618,332,1052,29,,,129,,,,540,548,533,1077',
'536,870,561,,514,542,,532,,,,297,,,519,29,,29,,,1021,297,795,718,314',
'795,,,,314,29,29,29,,843,,,978,979,,,,,,,,,,1080,,770,827,,,6,,817,840',
'142,667,,,822,613,672,659,,,,710,,,461,467,,,844,,,,9,,679,571,,523',
'523,32,684,678,,,703,32,147,29,,,462,803,582,582,,,,,,455,32,471,295',
'685,903,904,,691,706,32,32,32,677,32,,,,,683,1068,,660,679,892,,,858',
',,678,,1056,,,,,726,590,,590,29,,,332,32,32,700,701,32,145,,332,,,,',
'914,462,,840,694,,,455,711,,295,462,471,,714,,855,,,,445,718,471,,551',
'901,902,590,590,,445,445,551,,,965,445,445,29,,,,,759,,,761,32,29,,897',
'785,32,32,32,32,32,791,,,775,813,815,29,,,,818,820,,929,,,,763,462,',
',,,,455,994,,295,,471,702,743,745,747,,784,,967,,,,,,942,,,,,1015,835',
',,444,,29,,,29,,,,,444,444,,29,,462,444,444,1053,142,733,455,,,295,29',
'471,672,968,,,29,,,32,32,32,32,32,32,32,,,,32,32,32,,829,332,808,834',
'672,,,147,445,523,32,,332,29,29,,,29,679,,,684,930,29,29,678,862,,590',
'29,29,,905,,852,,856,,551,915,,846,800,,,,32,857,,845,,,,32,,893,32',
',,672,,437,929,,,929,886,,886,881,145,,,912,,32,,749,,32,462,812,,,32',
',,,455,471,,295,672,,,,,444,,,142,891,1054,1055,,,906,,,1084,32,,32',
'933,,,,,,523,862,,718,29,,32,32,32,,29,,937,864,,29,29,,,,929,941,29',
'961,,,829,,,,1069,358,,452,,,,969,473,29,,,940,,,358,,,962,930,,,930',
',,930,,930,,944,,,29,,,,,672,435,448,,32,,955,,,,,,,29,,,,,,,,970,29',
'29,,974,,,,992,993,862,973,332,947,949,,951,953,921,954,,332,,981,981',
'981,29,,29,749,,,879,,,,32,,1017,29,29,930,,930,,930,,930,,,,,,,,,526',
',528,,,530,531,,,,,1036,,1019,930,332,,,,,29,29,19,,,,,,19,1041,1038',
',1050,,32,,,852,,,,,,237,32,,,,,,29,,237,237,237,572,19,323,323,32,',
'886,,,,,,,,981,981,981,981,,981,462,,,,29,471,455,,18,295,,471,237,237',
'18,730,237,369,,886,672,1044,1045,1046,1047,29,749,,749,,29,29,32,1022',
',32,921,,,921,,921,18,32,,,,29,,981,981,981,981,,,32,866,,,866,981,32',
'663,,,,765,766,473,768,452,19,,,,,237,237,237,237,19,,982,984,986,,',
',,1085,,32,32,,,32,,,,,,32,32,,,1011,749,32,32,,,,,921,,921,,921,,921',
',,,,,,,,,,,,18,,,,,,,724,,18,921,,,872,,874,704,922,,572,,707,,,,,,',
'749,,749,,,,,19,237,442,237,237,442,237,,,,442,237,237,,,,,1058,1060',
'1062,1064,,1065,704,19,,572,,,749,,,,,32,,,,,,32,,,,,32,32,,,,,,32,755',
',890,,,,,237,18,,18,,923,18,237,,32,237,18,1087,1088,1089,1090,,,,,',
',,1092,,18,,,,19,,,32,19,,814,816,323,19,,,819,821,,,,,,,,32,,,,323',
',,,,32,32,,,801,19,,19,,866,,,922,704,572,922,,922,,,237,19,19,,,32',
',32,,,,18,,,626,18,626,,32,32,18,,,,,841,,,842,,,960,,,,,,963,,,,1008',
'966,1009,,1010,18,,18,853,971,972,,,,32,32,,,,,,18,18,,19,,,876,922',
',922,,922,,922,,,1028,,1030,,,,,32,,,,448,,916,,42,,,,,922,42,,,,,814',
'816,821,819,,,,,,,32,,,1018,237,,,,913,,,,18,42,322,322,,,,,,32,,,1075',
',32,32,,,,,,,,,,,1081,,1082,,1083,32,,,,,,368,,,390,,,,,,19,,,,,,,,323',
'1091,237,,,,,,323,,,,,,,,,237,,916,,,,1078,1079,,,,,,,,,,,,,42,,,,,',
',,,42,,,,,,,18,,,,572,,,,,,,,19,,,19,,,,,,,,237,,,,,,,,,,,,237,,,,,',
'237,,,,,,,,,,1016,,,,,,,,,,,,,,,,,,,,442,237,18,,19,18,,,,42,442,442',
',,,,442,442,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,323,,,,,,,,,,,323,,,18,,',
',18,,,,41,,18,18,,,41,,18,18,,,,,,,,,,,,,,,,,,,,42,,,,42,41,321,321',
'322,42,,,19,,,,,,237,,,,,19,19,322,,,,,19,,,,,42,,42,,,,367,,,389,,',
'442,,,,42,42,,,,,,,,,,,,390,,390,,,,19,,,18,,,,,,,,,,,18,18,,,19,,,18',
',,,41,,19,19,,,,,,41,,,,18,,,,,,,42,,,,,,,237,,19,,,,,,,18,,,,19,237',
',,,,,,,16,,,,,18,16,,,,,,,,18,18,,,,,,,,990,,,,,19,19,,,997,,16,,,,',
',,18,,,,,,41,,,,,18,,,,,,19,,,,,,,,,,,,373,41,,,,,,,42,,,,1032,,,,322',
'19,,18,18,,,,322,,,,,,,,,,,,,,19,,,,,19,19,,,,,18,,,,,16,,,,,,237,,',
'16,,,41,,,,41,,,,321,41,,,18,,,42,,,42,,,,,,,321,,,,,,,,18,,41,,41,18',
'18,,,,,,,,,,,,41,41,,,,,,,,,,,,389,,389,,,,,,,,,,,,42,,,,,,16,,440,',
',440,,,,,440,,,,,,,,,,,,,,16,,,,,,,41,,,,,,322,,,,,,,,,,,322,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,,,,16,,,,,16,,42,,,,,,,,,,,42,42',
',,,,,42,,,,,,16,,16,,,,,,,20,,,,,41,20,16,16,,,,,321,,,,,,,,321,,,,42',
',,,,,,,,20,325,325,,,,,,,42,,,,,,,,,42,42,,,,,,,,,,,,,,,,,371,16,,,',
',,,41,42,,41,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,390,,20,,,42',
'42,,,996,,20,,,,,,,,41,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,16,,,390',
',,321,,42,,,,,,,,,321,,,,,,,,,,,,42,,,,,42,42,,,,,,,20,,443,,,443,,',
',,443,,,,,,,,,,,,,,20,,,41,,,,16,,,16,,,,41,41,,,,,,41,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,20,440,,,20,16,,,325,20,,440,440,,41',
',,440,440,,,,,41,41,325,,,,,,,,,,20,,20,,,,,,,,,,,,,41,20,20,,,,,,,',
',41,,,627,,627,,,,,,,,,,,,,,,,,,,,,,,,,,,389,,,,,41,41,,,995,,,,,,,',
',16,,,,20,,,,,,,16,16,,,,,41,16,,,,,,,,,,,,,,,,,440,,,,,,389,,,,,41',
',,,,,,,,,,,16,,,,,,,,,41,,,,,41,41,,,16,,,,,,,,,16,16,,,,,,,,,,,,,,',
',,,,,,,,,,20,16,,,,,,,325,,,,16,,,,325,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,16,16,,,1000,,,,,,,,,,,,,,,,,,,,20,,,20,,,16,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,16,,,,,,,,,,,,,,,,,,,,,16,,,443,,16,16,20,,,,,,443,443,,,,,443',
'443,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,325,,,244,,,,,,,,325,294,294,294,,',
',,,,,,,,341,342,,344,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,20,,,,,,,',
',,,20,20,,,,,911,20,,,,,,,,,,,,,,,,,443,,,,,,,,,,,,,,,,,,,,,,,20,,,',
',,,,,,,,,,,,,,20,,,,,,,,,20,20,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,',
',20,,,,,,,,,,,,,,,,,294,447,,,453,294,,,,453,,,,,,627,,,,,20,20,244',
',999,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499',
'500,501,502,503,504,505,,,,20,506,,,,,,,,294,,,,,,,294,,,294,,,,,627',
',294,,294,20,,294,294,,,,,,,,,,,,,,,,,,20,,,,,20,20,,,,,,,,,,,,,,556',
',557,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,294,,453,453,453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,',
',294,,294,,,,,,,,,,,,,,,,294,,,,,,,,,453,725,,,,,,,,,,,294,,,294,,,',
',,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,453,294,,,,809,,,294,294,453,453',
',,,,453,453,,,,,,,,,,,,,,,,,,,,,,,294,,,294,,,,,,,,,,,,,,,,,,,,,294',
',,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,294,,,,,,,',
',,,,,,,,,,,,,294,,,,,,,,453,,,,,,,,,,,,,453,453,453,453,,919,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,294,453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,294' ]
        racc_goto_table = arr = ::Array.new(3962, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,26,39,119,49,49,37,13,69,114,103,2,70,70,37,23,23,79,79,23,14,86,88',
'30,30,170,9,30,64,39,51,35,9,45,45,45,69,107,107,201,10,53,41,41,28',
'28,122,53,74,74,207,169,79,49,62,83,83,83,50,50,50,6,53,152,152,8,16',
'89,60,119,89,53,53,53,5,53,70,77,108,23,23,23,23,21,21,63,83,30,30,30',
'30,59,35,6,217,6,6,6,6,6,6,6,110,158,70,158,53,53,171,212,53,73,73,24',
'67,58,24,52,187,12,147,24,84,84,57,57,57,161,164,157,206,85,85,85,145',
'159,217,7,163,213,5,192,188,192,129,148,192,32,188,192,9,191,32,68,191',
'68,130,192,131,9,132,133,85,134,135,53,136,137,138,123,53,53,53,53,53',
'118,116,105,149,102,99,30,30,88,87,36,82,155,80,30,30,75,158,13,54,48',
'162,3,1,165,166,26,26,167,168,26,44,42,31,174,26,175,177,213,179,180',
'181,13,89,89,86,161,182,148,37,183,6,164,186,45,29,70,189,64,190,25',
'193,163,194,195,60,64,196,217,197,198,83,83,199,200,22,20,49,49,205',
'7,201,114,19,17,207,53,53,53,53,53,53,53,169,67,145,53,53,53,15,209',
'86,148,157,147,159,210,35,45,11,53,13,6,207,216,45,13,125,45,6,6,124',
'52,60,79,6,126,127,128,,83,119,158,39,23,37,212,,148,,83,79,30,161,49',
',53,60,,86,187,,37,53,49,,53,16,13,13,9,,,,,,158,84,,158,,35,206,,171',
'53,152,6,62,53,79,37,79,110,53,,,119,,,,63,77,8,108,59,207,9,,57,59',
',5,,,,85,,,57,53,,53,,,122,85,192,49,58,192,,,,58,53,53,53,,64,,,152',
'152,,,,,,,,,,158,,35,36,,,6,,51,88,70,37,,,51,5,39,2,,,,10,,,49,49,',
',36,,,,9,,86,85,,6,6,56,86,6,,,89,56,74,53,,,86,35,201,201,,,,,,6,56',
'70,45,60,169,169,,39,217,56,56,56,50,56,,,,,50,14,,21,86,36,,,84,,,6',
',152,,,,,30,206,,206,53,,,79,56,56,60,60,56,73,,79,,,,,36,86,,88,50',
',,6,60,,45,86,70,,60,,28,,,,24,49,70,,62,12,12,206,206,,24,24,62,,,107',
'24,24,53,,,,,13,,,13,56,53,,35,30,56,56,56,56,56,30,,,41,32,32,53,,',
',32,32,,206,,,,119,86,,,,,,6,107,,45,,70,85,204,204,204,,6,,36,,,,,',
'12,,,,,107,103,,,26,,53,,,53,,,,,26,26,,53,,86,26,26,114,70,85,6,,,45',
'53,70,39,12,,,53,,,56,56,56,56,56,56,56,,,,56,56,56,,6,79,9,170,39,',
',74,24,6,56,,79,53,53,,,53,86,,,86,208,53,53,6,39,,206,53,53,,69,,6',
',6,,62,32,,60,21,,,,56,60,,62,,,,56,,13,56,,,39,,83,206,,,206,6,,6,60',
'73,,,13,,56,,146,,56,86,85,,,56,,,,6,70,,45,39,,,,,26,,,70,83,12,12',
',,60,,,36,56,,56,13,,,,,,6,39,,49,53,,56,56,56,,53,,13,151,,53,53,,',
',206,13,53,23,,,6,,,,35,30,,76,,,,23,76,53,,,6,,,30,,,13,208,,,208,',
',208,,208,,60,,,53,,,,,39,81,81,,56,,60,,,,,,,53,,,,,,,,119,53,53,,119',
',,,13,13,39,60,79,204,204,,204,204,151,204,,79,,6,6,6,53,,53,146,,,146',
',,,56,,13,53,53,208,,208,,208,,208,,,,,,,,,81,,81,,,81,81,,,,,13,,119',
'208,79,,,,,53,53,34,,,,,,34,39,37,,13,,56,,,6,,,,,,34,56,,,,,,53,,34',
'34,34,81,34,34,34,56,,6,,,,,,,,6,6,6,6,,6,86,,,,53,70,6,,33,45,,70,34',
'34,33,101,34,34,,6,39,204,204,204,204,53,146,,146,,53,53,56,151,,56',
'151,,,151,,151,33,56,,,,53,,6,6,6,6,,,56,153,,,153,6,56,81,,,,101,101',
'76,101,76,34,,,,,34,34,34,34,34,,154,154,154,,,,,204,,56,56,,,56,,,',
',,56,56,,,146,146,56,56,,,,,151,,151,,151,,151,,,,,,,,,,,,,33,,,,,,',
'76,,33,151,,,156,,156,81,153,,81,,81,,,,,,,146,,146,,,,,34,34,34,34',
'34,34,34,,,,34,34,34,,,,,154,154,154,154,,154,81,34,,81,,,146,,,,,56',
',,,,,56,,,,,56,56,,,,,,56,81,,101,,,,,34,33,,33,,156,33,34,,56,34,33',
'154,154,154,154,,,,,,,,154,,33,,,,34,,,56,34,,76,76,34,34,,,76,76,,',
',,,,,56,,,,34,,,,,56,56,,,81,34,,34,,153,,,153,81,81,153,,153,,,34,34',
'34,,,56,,56,,,,33,,,34,33,34,,56,56,33,,,,,81,,,81,,,101,,,,,,101,,',
',156,101,156,,156,33,,33,81,101,101,,,,56,56,,,,,,33,33,,34,,,81,153',
',153,,153,,153,,,156,,156,,,,,56,,,,81,,76,,66,,,,,153,66,,,,,76,76',
'76,76,,,,,,,56,,,101,34,,,,81,,,,33,66,66,66,,,,,,56,,,156,,56,56,,',
',,,,,,,,156,,156,,156,56,,,,,,66,,,66,,,,,,34,,,,,,,,34,156,34,,,,,',
'34,,,,,,,,,34,,76,,,,101,101,,,,,,,,,,,,,66,,,,,,,,,66,,,,,,,33,,,,81',
',,,,,,,34,,,34,,,,,,,,34,,,,,,,,,,,,34,,,,,,34,,,,,,,,,,81,,,,,,,,,',
',,,,,,,,,,34,34,33,,34,33,,,,66,34,34,,,,,34,34,,,,,,,,,,,,,,,,66,,',
',,,,,,,,,,,34,,,,,,,,,,,34,,,33,,,,33,,,,65,,33,33,,,65,,33,33,,,,,',
',,,,,,,,,,,,,,66,,,,66,65,65,65,66,66,,,34,,,,,,34,,,,,34,34,66,,,,',
'34,,,,,66,,66,,,,65,,,65,,,34,,,,66,66,,,,,,,,,,,,66,,66,,,,34,,,33',
',,,,,,,,,,33,33,,,34,,,33,,,,65,,34,34,,,,,,65,,,,33,,,,,,,66,,,,,,',
'34,,34,,,,,,,33,,,,34,34,,,,,,,,27,,,,,33,27,,,,,,,,33,33,,,,,,,,34',
',,,,34,34,,,34,,27,,,,,,,33,,,,,,65,,,,,33,,,,,,34,,,,,,,,,,,,27,65',
',,,,,,66,,,,34,,,,66,34,,33,33,,,,66,,,,,,,,,,,,,,34,,,,,34,34,,,,,33',
',,,,27,,,,,,34,,,27,,,65,,,,65,,,,65,65,,,33,,,66,,,66,,,,,,,65,,,,',
',,,33,,65,,65,33,33,,,,,,,,,,,,65,65,,,,,,,,,,,,65,,65,,,,,,,,,,,,66',
',,,,,27,,27,,,27,,,,,27,,,,,,,,,,,,,,27,,,,,,,65,,,,,,66,,,,,,,,,,,66',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,27,,,,,27,,66,,,,,,,,',
',,66,66,,,,,,66,,,,,,27,,27,,,,,,,38,,,,,65,38,27,27,,,,,65,,,,,,,,65',
',,,66,,,,,,,,,38,38,38,,,,,,,66,,,,,,,,,66,66,,,,,,,,,,,,,,,,,38,27',
',,,,,,65,66,,65,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,38,,,66',
'66,,,66,,38,,,,,,,,65,,,,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,27,,,66',
',,65,,66,,,,,,,,,65,,,,,,,,,,,,66,,,,,66,66,,,,,,,38,,38,,,38,,,,,38',
',,,,,,,,,,,,,38,,,65,,,,27,,,27,,,,65,65,,,,,,65,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,65,,,,38,27,,,38,27,,,38,38,,27,27,,65,,,27,27,',
',,,65,65,38,,,,,,,,,,38,,38,,,,,,,,,,,,,65,38,38,,,,,,,,,65,,,38,,38',
',,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,65,65,,,65,,,,,,,,,27,,,,38,,,,,,,27',
'27,,,,,65,27,,,,,,,,,,,,,,,,,27,,,,,,65,,,,,65,,,,,,,,,,,,27,,,,,,,',
',65,,,,,65,65,,,27,,,,,,,,,27,27,,,,,,,,,,,,,,,,,,,,,,,,,38,27,,,,,',
',38,,,,27,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,27,,,27,,,,,,,,,',
',,,,,,,,,,38,,,38,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,',
',,,,,,27,,,38,,27,27,38,,,,,,38,38,,,,,38,38,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,38,,,40,,,,,,,,38,40,40,40,,,,,,,,,,,40,40,,40,,,,,,,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,38,38,,,,,38,38,,,,,,,,,,,,,,,,,38,',
',,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,38,,,,,,,,,38,38,,,,,,,,,,',
',,,,,,,,,,,,,,,38,,,,,,,,,,,38,,,,,,,,,,,,,,,,,40,40,,,40,40,,,,40,',
',,,,38,,,,,38,38,40,,38,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,40,,,,38,40,,,,,,,,40,,,,,,,40,,,40,,,,,38,,40,,40',
'38,,40,40,,,,,,,,,,,,,,,,,,38,,,,,38,38,,,,,,,,,,,,,,40,,40,,,,,,,,',
'40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40',
'40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,',
',,,40,,,,,,,,,40,40,,,,,,,,,,,40,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,40,',
',,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,40,40,40,,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,40,,',
'40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40',
',,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,40,,,,,,,,,,,,,40,40,40',
'40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3962, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   198,     9,   197,   nil,    69,    -2,   129,    60,    24,
   -96,   274,  -227,   -29,  -539,  -453,  -661,  -588,   nil,  -275,
   -62,    72,   238,   -52,  -111,   163,   -22,  1879,  -179,     7,
   -44,    71,   -80,  1035,   974,  -197,  -269,   -13,  2232,   -20,
  2924,   -27,  -403,   nil,  -556,     1,   nil,   nil,   168,  -225,
    29,  -251,  -399,    39,  -318,   nil,   455,    92,    79,    55,
     6,   nil,    17,    47,  -308,  1706,  1426,  -510,  -222,   -67,
     1,   nil,   nil,   100,    37,  -240,   616,    33,   nil,   -20,
   141,   655,   123,    23,  -229,    99,    -9,  -325,  -275,  -455,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   105,
   nil,   484,  -175,   -55,   nil,   111,   nil,  -322,  -681,   nil,
  -659,   nil,   nil,   nil,  -356,   nil,   104,   nil,  -453,    -2,
   nil,   nil,  -585,    94,   -92,   231,   239,  -259,   239,    71,
  -626,  -218,  -625,  -809,    89,  -466,  -221,  -465,  -737,   nil,
   nil,   nil,   nil,   nil,   nil,  -744,   177,  -471,  -735,  -653,
   nil,    85,  -513,   347,   188,  -644,   430,  -702,  -639,  -558,
   nil,  -610,  -747,  -805,  -815,  -158,  -536,   137,  -369,  -306,
     0,  -168,   nil,   nil,   -77,   -76,   nil,  -486,   nil,  -294,
  -802,  -400,  -507,  -629,   nil,   nil,   136,    23,    45,   134,
   135,  -250,  -255,   136,   137,   137,  -550,  -395,  -395,   145,
  -534,  -318,   nil,   nil,    43,  -488,  -227,  -692,  -118,  -463,
  -696,   nil,  -635,  -844,   nil,   nil,  -103,  -431 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   309,     7,   366,   312,
   nil,   nil,   nil,   559,   nil,   nil,   nil,   nil,   308,   310,
   nil,   nil,   nil,   nil,    14,    15,    21,   242,   nil,   nil,
    17,   nil,   441,   243,   340,   nil,   nil,   780,   241,   349,
    24,   nil,   nil,   361,   nil,    25,    26,    27,   nil,   721,
   nil,   nil,   nil,   329,   nil,    28,   326,   456,    35,   nil,
   nil,    37,    40,    39,   nil,   238,   239,   625,   nil,   144,
   464,   143,   146,    90,    91,   nil,   446,   105,    47,    50,
   274,   300,   nil,   457,   nil,   458,   469,   680,   521,   298,
   282,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    61,   nil,   nil,   283,    65,   nil,    67,   nil,   nil,    68,
   884,    69,    70,    71,   nil,    72,   nil,    73,   nil,   607,
    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,
   276,   729,   851,   616,   885,   751,   589,   nil,   752,  1024,
   920,   577,   nil,   578,   nil,   nil,   579,   nil,   581,   nil,
   830,   nil,   nil,   nil,   587,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   468,   285,   nil,   nil,   698,   nil,   508,   nil,
   nil,   nil,   nil,   nil,    89,    92,    94,   nil,   nil,   nil,
   nil,   nil,   637,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   867,   789,   576,   nil,   580,   875,   592,   594,   595,
   931,   598,   599,   932,   602,   605,   nil,   303 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  3, 152, :_reduce_10,
  3, 155, :_reduce_11,
  0, 162, :_reduce_12,
  6, 157, :_reduce_13,
  3, 157, :_reduce_14,
  2, 158, :_reduce_15,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 163, :_reduce_18,
  2, 163, :_reduce_19,
  1, 164, :_reduce_none,
  0, 165, :_reduce_21,
  3, 164, :_reduce_22,
  0, 176, :_reduce_23,
  4, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  2, 154, :_reduce_28,
  3, 154, :_reduce_29,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  3, 154, :_reduce_32,
  3, 154, :_reduce_33,
  4, 154, :_reduce_34,
  1, 154, :_reduce_none,
  3, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  1, 154, :_reduce_none,
  3, 169, :_reduce_40,
  3, 169, :_reduce_41,
  6, 169, :_reduce_42,
  5, 169, :_reduce_43,
  5, 169, :_reduce_44,
  5, 169, :_reduce_45,
  5, 169, :_reduce_46,
  3, 169, :_reduce_47,
  1, 177, :_reduce_48,
  3, 177, :_reduce_49,
  1, 177, :_reduce_none,
  1, 175, :_reduce_none,
  3, 175, :_reduce_52,
  3, 175, :_reduce_53,
  3, 175, :_reduce_54,
  2, 175, :_reduce_55,
  1, 175, :_reduce_none,
  1, 168, :_reduce_57,
  0, 188, :_reduce_58,
  0, 189, :_reduce_59,
  4, 186, :_reduce_60,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 191, :_reduce_none,
  4, 191, :_reduce_64,
  0, 199, :_reduce_65,
  4, 196, :_reduce_66,
  1, 198, :_reduce_67,
  2, 190, :_reduce_68,
  3, 190, :_reduce_69,
  4, 190, :_reduce_70,
  5, 190, :_reduce_71,
  4, 190, :_reduce_72,
  5, 190, :_reduce_73,
  2, 190, :_reduce_74,
  2, 190, :_reduce_75,
  2, 190, :_reduce_76,
  2, 190, :_reduce_77,
  2, 190, :_reduce_78,
  1, 170, :_reduce_none,
  3, 170, :_reduce_80,
  1, 204, :_reduce_none,
  3, 204, :_reduce_82,
  1, 203, :_reduce_83,
  2, 203, :_reduce_84,
  3, 203, :_reduce_85,
  5, 203, :_reduce_86,
  2, 203, :_reduce_87,
  4, 203, :_reduce_88,
  2, 203, :_reduce_89,
  4, 203, :_reduce_90,
  1, 203, :_reduce_91,
  3, 203, :_reduce_92,
  1, 207, :_reduce_none,
  3, 207, :_reduce_94,
  2, 206, :_reduce_95,
  3, 206, :_reduce_96,
  1, 209, :_reduce_97,
  3, 209, :_reduce_98,
  1, 208, :_reduce_99,
  1, 208, :_reduce_100,
  4, 208, :_reduce_101,
  3, 208, :_reduce_102,
  3, 208, :_reduce_103,
  3, 208, :_reduce_104,
  3, 208, :_reduce_105,
  2, 208, :_reduce_106,
  1, 208, :_reduce_107,
  1, 172, :_reduce_108,
  1, 172, :_reduce_109,
  4, 172, :_reduce_110,
  3, 172, :_reduce_111,
  3, 172, :_reduce_112,
  3, 172, :_reduce_113,
  3, 172, :_reduce_114,
  2, 172, :_reduce_115,
  1, 172, :_reduce_116,
  1, 212, :_reduce_117,
  1, 212, :_reduce_none,
  2, 213, :_reduce_119,
  1, 213, :_reduce_120,
  3, 213, :_reduce_121,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_125,
  1, 214, :_reduce_126,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 166, :_reduce_129,
  1, 166, :_reduce_none,
  1, 167, :_reduce_131,
  0, 220, :_reduce_132,
  4, 167, :_reduce_133,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  3, 185, :_reduce_206,
  3, 185, :_reduce_207,
  6, 185, :_reduce_208,
  5, 185, :_reduce_209,
  5, 185, :_reduce_210,
  5, 185, :_reduce_211,
  5, 185, :_reduce_212,
  4, 185, :_reduce_213,
  3, 185, :_reduce_214,
  3, 185, :_reduce_215,
  3, 185, :_reduce_216,
  3, 185, :_reduce_217,
  3, 185, :_reduce_218,
  3, 185, :_reduce_219,
  3, 185, :_reduce_220,
  3, 185, :_reduce_221,
  3, 185, :_reduce_222,
  4, 185, :_reduce_223,
  2, 185, :_reduce_224,
  2, 185, :_reduce_225,
  3, 185, :_reduce_226,
  3, 185, :_reduce_227,
  3, 185, :_reduce_228,
  3, 185, :_reduce_229,
  1, 185, :_reduce_none,
  3, 185, :_reduce_231,
  3, 185, :_reduce_232,
  3, 185, :_reduce_233,
  3, 185, :_reduce_234,
  3, 185, :_reduce_235,
  2, 185, :_reduce_236,
  2, 185, :_reduce_237,
  3, 185, :_reduce_238,
  3, 185, :_reduce_239,
  3, 185, :_reduce_240,
  3, 185, :_reduce_241,
  3, 185, :_reduce_242,
  6, 185, :_reduce_243,
  1, 185, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  3, 223, :_reduce_249,
  3, 223, :_reduce_250,
  1, 226, :_reduce_251,
  1, 227, :_reduce_none,
  2, 227, :_reduce_253,
  4, 227, :_reduce_254,
  2, 227, :_reduce_255,
  1, 221, :_reduce_none,
  3, 221, :_reduce_257,
  3, 231, :_reduce_258,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 180, :_reduce_261,
  1, 180, :_reduce_262,
  2, 180, :_reduce_263,
  4, 180, :_reduce_264,
  2, 180, :_reduce_265,
  1, 202, :_reduce_266,
  2, 202, :_reduce_267,
  2, 202, :_reduce_268,
  4, 202, :_reduce_269,
  1, 202, :_reduce_270,
  0, 235, :_reduce_271,
  2, 195, :_reduce_272,
  2, 234, :_reduce_273,
  2, 233, :_reduce_274,
  1, 233, :_reduce_none,
  1, 228, :_reduce_276,
  2, 228, :_reduce_277,
  3, 228, :_reduce_278,
  4, 228, :_reduce_279,
  1, 174, :_reduce_280,
  1, 174, :_reduce_281,
  3, 173, :_reduce_282,
  4, 173, :_reduce_283,
  2, 173, :_reduce_284,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_295,
  0, 270, :_reduce_296,
  4, 224, :_reduce_297,
  2, 224, :_reduce_298,
  0, 271, :_reduce_299,
  0, 272, :_reduce_300,
  5, 224, :_reduce_301,
  3, 224, :_reduce_302,
  3, 224, :_reduce_303,
  2, 224, :_reduce_304,
  3, 224, :_reduce_305,
  0, 273, :_reduce_306,
  4, 224, :_reduce_307,
  1, 224, :_reduce_308,
  4, 224, :_reduce_309,
  3, 224, :_reduce_310,
  1, 224, :_reduce_311,
  5, 224, :_reduce_312,
  4, 224, :_reduce_313,
  3, 224, :_reduce_314,
  2, 224, :_reduce_315,
  1, 224, :_reduce_none,
  2, 224, :_reduce_317,
  2, 224, :_reduce_318,
  6, 224, :_reduce_319,
  6, 224, :_reduce_320,
  4, 224, :_reduce_321,
  4, 224, :_reduce_322,
  5, 224, :_reduce_323,
  4, 224, :_reduce_324,
  6, 224, :_reduce_325,
  0, 274, :_reduce_326,
  0, 275, :_reduce_327,
  7, 224, :_reduce_328,
  0, 276, :_reduce_329,
  0, 277, :_reduce_330,
  0, 278, :_reduce_331,
  9, 224, :_reduce_332,
  0, 279, :_reduce_333,
  0, 280, :_reduce_334,
  6, 224, :_reduce_335,
  0, 281, :_reduce_336,
  6, 224, :_reduce_337,
  0, 282, :_reduce_338,
  0, 283, :_reduce_339,
  9, 224, :_reduce_340,
  1, 224, :_reduce_341,
  1, 224, :_reduce_342,
  1, 224, :_reduce_343,
  1, 224, :_reduce_344,
  1, 179, :_reduce_345,
  1, 245, :_reduce_none,
  1, 251, :_reduce_none,
  1, 254, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 260, :_reduce_none,
  1, 262, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 284, :_reduce_none,
  1, 285, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 160, :_reduce_none,
  1, 289, :_reduce_none,
  1, 246, :_reduce_none,
  1, 201, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  2, 252, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 253, :_reduce_none,
  5, 253, :_reduce_371,
  1, 255, :_reduce_none,
  2, 255, :_reduce_373,
  1, 261, :_reduce_none,
  1, 261, :_reduce_375,
  1, 290, :_reduce_none,
  3, 290, :_reduce_377,
  1, 293, :_reduce_378,
  3, 293, :_reduce_379,
  1, 292, :_reduce_380,
  4, 292, :_reduce_381,
  6, 292, :_reduce_382,
  3, 292, :_reduce_383,
  5, 292, :_reduce_384,
  2, 292, :_reduce_385,
  4, 292, :_reduce_386,
  1, 292, :_reduce_387,
  3, 292, :_reduce_388,
  4, 294, :_reduce_389,
  2, 294, :_reduce_390,
  2, 294, :_reduce_391,
  1, 294, :_reduce_392,
  2, 299, :_reduce_393,
  1, 299, :_reduce_none,
  6, 300, :_reduce_395,
  8, 300, :_reduce_396,
  4, 300, :_reduce_397,
  6, 300, :_reduce_398,
  4, 300, :_reduce_399,
  2, 300, :_reduce_400,
  6, 300, :_reduce_401,
  2, 300, :_reduce_402,
  4, 300, :_reduce_403,
  6, 300, :_reduce_404,
  2, 300, :_reduce_405,
  4, 300, :_reduce_406,
  2, 300, :_reduce_407,
  4, 300, :_reduce_408,
  1, 300, :_reduce_409,
  1, 304, :_reduce_410,
  1, 304, :_reduce_411,
  3, 305, :_reduce_412,
  1, 305, :_reduce_413,
  4, 305, :_reduce_414,
  1, 306, :_reduce_none,
  4, 306, :_reduce_416,
  1, 307, :_reduce_417,
  3, 307, :_reduce_418,
  1, 308, :_reduce_419,
  1, 308, :_reduce_none,
  0, 312, :_reduce_421,
  0, 313, :_reduce_422,
  4, 250, :_reduce_423,
  4, 310, :_reduce_424,
  1, 310, :_reduce_425,
  3, 311, :_reduce_426,
  3, 311, :_reduce_427,
  3, 315, :_reduce_428,
  2, 192, :_reduce_429,
  4, 192, :_reduce_430,
  5, 192, :_reduce_431,
  5, 192, :_reduce_432,
  0, 318, :_reduce_433,
  3, 249, :_reduce_434,
  4, 249, :_reduce_435,
  4, 249, :_reduce_436,
  3, 249, :_reduce_437,
  3, 249, :_reduce_438,
  3, 249, :_reduce_439,
  2, 249, :_reduce_440,
  1, 249, :_reduce_441,
  4, 249, :_reduce_442,
  0, 319, :_reduce_443,
  4, 248, :_reduce_444,
  0, 320, :_reduce_445,
  4, 248, :_reduce_446,
  0, 321, :_reduce_447,
  0, 322, :_reduce_448,
  4, 197, :_reduce_449,
  0, 323, :_reduce_450,
  0, 324, :_reduce_451,
  4, 316, :_reduce_452,
  0, 326, :_reduce_453,
  6, 259, :_reduce_454,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  6, 159, :_reduce_457,
  0, 159, :_reduce_458,
  1, 327, :_reduce_459,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  2, 328, :_reduce_462,
  1, 328, :_reduce_none,
  2, 161, :_reduce_464,
  1, 161, :_reduce_none,
  1, 236, :_reduce_466,
  1, 236, :_reduce_467,
  1, 236, :_reduce_none,
  1, 237, :_reduce_469,
  1, 330, :_reduce_470,
  1, 330, :_reduce_none,
  2, 330, :_reduce_472,
  3, 331, :_reduce_473,
  1, 331, :_reduce_474,
  3, 238, :_reduce_475,
  3, 239, :_reduce_476,
  3, 240, :_reduce_477,
  3, 240, :_reduce_478,
  1, 335, :_reduce_479,
  3, 335, :_reduce_480,
  1, 336, :_reduce_none,
  2, 336, :_reduce_482,
  3, 242, :_reduce_483,
  3, 242, :_reduce_484,
  1, 338, :_reduce_485,
  3, 338, :_reduce_486,
  3, 241, :_reduce_487,
  3, 241, :_reduce_488,
  3, 243, :_reduce_489,
  3, 243, :_reduce_490,
  1, 339, :_reduce_491,
  3, 339, :_reduce_492,
  1, 340, :_reduce_493,
  3, 340, :_reduce_494,
  1, 332, :_reduce_495,
  2, 332, :_reduce_496,
  1, 333, :_reduce_497,
  2, 333, :_reduce_498,
  1, 334, :_reduce_499,
  2, 334, :_reduce_500,
  1, 337, :_reduce_501,
  0, 342, :_reduce_502,
  3, 337, :_reduce_503,
  0, 343, :_reduce_504,
  4, 337, :_reduce_505,
  1, 341, :_reduce_506,
  1, 341, :_reduce_507,
  1, 341, :_reduce_508,
  1, 341, :_reduce_none,
  2, 218, :_reduce_510,
  1, 218, :_reduce_511,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  3, 219, :_reduce_516,
  1, 329, :_reduce_none,
  2, 329, :_reduce_518,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 211, :_reduce_528,
  1, 211, :_reduce_529,
  1, 211, :_reduce_530,
  1, 211, :_reduce_531,
  1, 211, :_reduce_532,
  1, 211, :_reduce_533,
  1, 211, :_reduce_534,
  1, 244, :_reduce_535,
  1, 244, :_reduce_536,
  1, 178, :_reduce_537,
  1, 178, :_reduce_538,
  1, 183, :_reduce_539,
  1, 183, :_reduce_540,
  0, 345, :_reduce_541,
  4, 263, :_reduce_542,
  1, 263, :_reduce_543,
  3, 267, :_reduce_544,
  0, 347, :_reduce_545,
  3, 267, :_reduce_546,
  4, 346, :_reduce_547,
  2, 346, :_reduce_548,
  2, 346, :_reduce_549,
  1, 346, :_reduce_none,
  2, 349, :_reduce_551,
  0, 349, :_reduce_552,
  6, 314, :_reduce_553,
  8, 314, :_reduce_554,
  4, 314, :_reduce_555,
  6, 314, :_reduce_556,
  4, 314, :_reduce_557,
  6, 314, :_reduce_558,
  2, 314, :_reduce_559,
  4, 314, :_reduce_560,
  6, 314, :_reduce_561,
  2, 314, :_reduce_562,
  4, 314, :_reduce_563,
  2, 314, :_reduce_564,
  4, 314, :_reduce_565,
  1, 314, :_reduce_566,
  0, 314, :_reduce_567,
  1, 309, :_reduce_568,
  1, 309, :_reduce_569,
  1, 309, :_reduce_570,
  1, 309, :_reduce_571,
  1, 291, :_reduce_none,
  1, 291, :_reduce_573,
  1, 351, :_reduce_none,
  1, 352, :_reduce_none,
  3, 352, :_reduce_576,
  1, 301, :_reduce_577,
  3, 301, :_reduce_578,
  1, 353, :_reduce_none,
  2, 354, :_reduce_580,
  1, 354, :_reduce_581,
  2, 355, :_reduce_582,
  1, 355, :_reduce_583,
  1, 295, :_reduce_none,
  3, 295, :_reduce_585,
  1, 348, :_reduce_none,
  3, 348, :_reduce_587,
  1, 356, :_reduce_none,
  1, 356, :_reduce_none,
  2, 296, :_reduce_590,
  1, 296, :_reduce_591,
  3, 357, :_reduce_592,
  3, 358, :_reduce_593,
  1, 302, :_reduce_594,
  3, 302, :_reduce_595,
  1, 350, :_reduce_596,
  3, 350, :_reduce_597,
  1, 359, :_reduce_none,
  1, 359, :_reduce_none,
  2, 303, :_reduce_600,
  1, 303, :_reduce_601,
  1, 360, :_reduce_none,
  1, 360, :_reduce_none,
  2, 298, :_reduce_604,
  2, 297, :_reduce_605,
  0, 297, :_reduce_606,
  1, 268, :_reduce_none,
  0, 361, :_reduce_608,
  4, 268, :_reduce_609,
  1, 247, :_reduce_610,
  2, 247, :_reduce_611,
  1, 230, :_reduce_none,
  3, 230, :_reduce_613,
  3, 362, :_reduce_614,
  2, 362, :_reduce_615,
  4, 362, :_reduce_616,
  2, 362, :_reduce_617,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 182, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  2, 205, :_reduce_none,
  2, 181, :_reduce_none,
  0, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 264, :_reduce_642,
  1, 264, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_645,
  0, 151, :_reduce_646 ]

racc_reduce_n = 647

racc_shift_n = 1093

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@3",
  "stmts",
  "stmt_or_begin",
  "@4",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@10",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@25",
  "@26",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@27",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "@38",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      _, _, block = val
                      result = block
                    
    result
end

def _reduce_11(val, _values, result)
                      _, stmt, _ = val
                      result = new_iter s(:preexe), 0, stmt
                    
    result
end

def _reduce_12(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res
                    
    result
end

def _reduce_13(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]
                    
    result
end

def _reduce_14(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_22(val, _values, result)
                      _, _, stmt = val
                      result = stmt
                    
    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_24(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_28(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_29(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_30(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val
                      result = new_rescue body, new_resbody(s(:array), resbody)
                    
    result
end

def _reduce_34(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_37(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr
                    
    result
end

def _reduce_49(val, _values, result)
                      expr, _, resbody = val
                      expr = value_expr expr
                      result = new_rescue(expr, new_resbody(s(:array), resbody))
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_53(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_55(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend
                    
    result
end

def _reduce_67(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_70(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_88(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_89(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_90(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_91(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_97(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_109(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_110(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_111(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_114(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_115(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_121(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = :expr_end
                      result = sym
                    
    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_208(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_211(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_212(val, _values, result)
                      # TODO: assignment
                      raise "not yet: %p" % [val]
                    
    result
end

def _reduce_213(val, _values, result)
                      # TODO: assignment
                      raise "not yet: %p" % [val]
                    
    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn
                    
    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, _, resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody
                      result  = new_rescue(body, new_resbody(s(:array), resbody))
                    
    result
end

def _reduce_258(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_267(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_271(val, _values, result)
                      result = lexer.cmdarg.store true
                    
    result
end

def _reduce_272(val, _values, result)
                      lexer.cmdarg.restore val[0]
                      result = val[1]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_278(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_296(val, _values, result)
                      result = self.lexer.lineno
                      # TODO:
                      # $<val>1 = cmdarg_stack;
                      # CMDARG_SET(0);
                    
    result
end

def _reduce_297(val, _values, result)
                      # TODO: CMDARG_SET($<val>1);
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_298(val, _values, result)
                      # TODO: lex_state = :expr_endarg in between
                      debug20 13, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      result = lexer.cmdarg.store false
                      # result = self.lexer.cmdarg.stack.dup
                      # lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_301(val, _values, result)
                      _, cmdarg, stmt, _, _, = val
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.restore cmdarg
                      result = stmt
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_303(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_304(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_306(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_308(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_312(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_314(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_315(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 316 omitted

def _reduce_317(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_318(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f
                    
    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t
                    
    result
end

def _reduce_321(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true
                    
    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true
                    
    result
end

def _reduce_323(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_324(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_325(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_331(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_334(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_337(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_338(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_339(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_340(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_343(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_345(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_380(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_381(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_382(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_383(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_384(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_385(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_386(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_387(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_388(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_389(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_410(val, _values, result)
 result = 0 
    result
end

def _reduce_411(val, _values, result)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:args)
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_417(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_418(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.cmdarg.store(false), self.lexer.lineno]
                    
    result
end

def _reduce_423(val, _values, result)
                      lpar, args, (cmdarg, lineno), body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.lexpop

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      result.line = lineno
                      self.env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_425(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      # TODO: maybe fix lineno to kDO's lineno?
                      result = val[1]
                    
    result
end

def _reduce_429(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_431(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_432(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_443(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_444(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_447(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_448(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_449(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?
                    
    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                    
    result
end

def _reduce_453(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 455 omitted

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_470(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_487(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_494(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_496(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_502(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_503(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_505(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_506(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_507(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_508(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_529(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_530(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_531(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_532(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_533(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_534(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_535(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_537(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_539(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_540(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_541(val, _values, result)
                      lexer.lex_state = :expr_beg
                      lexer.command_start = true
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_545(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      # TODO: self.lexer.lex_state |= :expr_label
                    
    result
end

def _reduce_546(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = :expr_beg
                      lexer.command_start = true
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      result = args val
                    
    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_553(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_554(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_555(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_556(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_557(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_558(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_559(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_560(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_562(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_564(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_577(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_578(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_581(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_582(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_583(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      result = args val
                    
    result
end

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"
                    
    result
end

def _reduce_591(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_592(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_593(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

def _reduce_600(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_601(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_605(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_606(val, _values, result)
                      result = nil
                    
    result
end

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_609(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_610(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_611(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 612 omitted

def _reduce_613(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_614(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_615(val, _values, result)
                      (label, _), arg = val
                      result = s(:array, s(:lit, label.to_sym), arg)
                    
    result
end

def _reduce_616(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_617(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

def _reduce_642(val, _values, result)
 yyerrok 
    result
end

# reduce 643 omitted

# reduce 644 omitted

def _reduce_645(val, _values, result)
 yyerrok 
    result
end

def _reduce_646(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
