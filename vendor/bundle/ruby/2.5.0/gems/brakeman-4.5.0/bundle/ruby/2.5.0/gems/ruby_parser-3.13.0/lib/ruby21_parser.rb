#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-303,605,605,-112,-110,605,938,-303,-303,-303,672,-111,-303,-303,-303',
'284,-303,234,-304,654,225,226,225,226,828,-304,-303,-303,-303,-108,605',
'-109,-114,651,-304,235,-303,-303,-116,-303,-303,-303,-303,-303,605,-113',
'95,-113,-112,-111,760,856,-102,235,96,-110,-115,586,827,583,582,581',
'772,584,737,-111,773,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-619,653,-303,-303,-303,941,822,-303,284,284,-303',
'225,226,-303,-303,650,-303,-620,-303,284,-303,286,-303,-303,-303,-303',
'-303,-303,-303,235,-303,235,-303,-619,128,128,-112,-110,128,127,127',
'-112,-110,127,-111,-303,-303,-303,-303,-111,-303,-623,-303,-99,875,-100',
'-105,-303,-623,-623,-623,-114,-107,128,-623,-623,959,-623,127,128,-102',
'-104,-103,-102,127,855,-623,128,-113,-101,-106,-633,127,-113,-433,943',
'-537,-623,-623,-538,-623,-623,-623,-623,-623,286,286,-535,-104,828,945',
'235,-94,-528,-535,630,286,106,107,128,-528,232,631,-535,127,-80,235',
'947,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623',
'-623,947,827,-623,-623,-623,-102,679,-537,590,-108,-623,635,-109,-623',
'480,232,106,107,-623,593,-623,-107,-623,-623,-623,-623,-623,-623,-623',
'235,-623,-623,-623,-104,-116,586,635,583,582,581,-102,584,635,-102,550',
'-623,-623,635,-623,-99,-623,-623,601,600,108,109,-102,-623,-623,-623',
'-623,-112,-108,-623,-623,-623,953,-623,-104,-116,-116,-104,637,636,225',
'226,-623,-623,-623,-623,-442,790,635,844,-104,640,594,-623,-623,845',
'-623,-623,-623,-623,-623,108,109,637,636,-115,-530,225,226,637,636,633',
'792,-530,637,636,648,563,635,1007,565,819,-623,727,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,820,-442,-623,-623',
'-623,727,821,-623,-442,537,-623,637,636,-623,-623,672,-623,-442,-623',
'635,-623,673,-623,-623,-623,-623,-623,-623,-623,590,-623,-623,-623,563',
'635,-442,565,-623,-111,727,593,637,636,643,-623,-623,-623,-623,-623',
'-619,-623,-523,-623,-623,913,-113,-538,-623,-523,-523,-523,-112,550',
'-523,-523,-523,882,-523,612,255,-111,-623,536,601,600,-523,-113,-523',
'-523,-523,637,636,655,563,-617,806,565,-523,-523,235,-523,-523,-523',
'-523,-523,637,636,638,-100,235,235,252,1037,-529,-106,254,253,594,231',
'-110,-529,-109,601,600,-79,280,-616,-115,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,-523,-523,-523,673,806,-523,-523,-523,-526',
'-523,-523,-110,-623,-523,727,-526,-523,-523,727,-523,-617,-523,235,-523',
'-526,-523,-523,-523,-523,-523,-523,-523,971,-523,-531,-523,-534,-532',
'-279,255,-523,-531,-617,-534,-532,-104,-101,-523,-523,-523,-523,-523',
'-616,-523,-623,-523,-523,1058,-113,-110,-523,-623,-623,-623,-523,-623',
'-533,-623,-623,526,-623,252,-623,-533,-616,254,253,-619,-526,-623,586',
'-623,583,582,581,-526,584,128,878,882,-623,-623,127,-623,-623,-623,-623',
'-623,972,-623,272,273,586,-536,583,582,581,-523,584,586,-536,583,582',
'581,-523,584,737,563,746,-536,562,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,-623,271,270,-623,-623,-623,746,679,878',
'882,975,-623,427,746,-623,749,978,429,428,-623,980,-623,749,-623,-623',
'-623,-623,-623,-623,-623,128,-623,-623,-623,586,127,583,582,581,590',
'584,231,225,226,982,235,-623,-623,1034,-103,593,-623,-303,984,524,521',
'289,1032,-623,-303,-303,-303,-112,511,255,-303,-303,586,-303,583,582',
'581,588,584,128,234,996,128,997,127,265,266,127,601,600,128,482,481',
'-303,-303,127,-303,-303,-303,-303,-303,252,479,258,430,254,253,250,251',
'1009,746,256,586,257,583,582,581,425,584,952,408,727,594,784,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,405,402',
'-303,-303,-303,586,678,583,582,581,-303,584,746,-303,399,1026,375,1029',
'-303,844,-303,1035,-303,-303,-303,-303,-303,-303,-303,1038,-303,947',
'-303,586,947,583,582,581,590,584,231,947,1043,746,1009,-303,-303,775',
'-105,593,-303,-526,235,737,1052,1054,777,-303,-526,-526,-526,-114,1056',
'-526,-526,-526,1058,-526,255,1058,586,588,583,582,581,-526,584,-526',
'-526,-526,598,597,601,600,265,266,337,-526,-526,724,-526,-526,-526,-526',
'-526,586,336,583,582,581,252,584,258,275,254,253,250,251,746,1009,256',
'1000,257,583,582,581,594,584,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,727,746,-526,-526,-526,-294,-526,-526',
'727,227,-526,224,-294,-526,-526,-620,-526,-619,-526,235,-526,-294,-526',
'-526,-526,-526,-526,-526,-526,223,-526,222,-526,586,947,583,582,581',
'590,584,255,1009,727,724,730,-526,-526,-526,-526,593,-526,-303,-526',
'719,526,734,737,-526,-303,-303,-303,-526,738,255,-303,-303,740,-303',
'231,742,744,588,252,-304,556,553,254,253,250,251,-304,752,601,600,478',
'753,754,-303,-303,-304,-303,-303,-303,-303,-303,252,-535,231,231,254',
'253,250,251,-535,1028,616,131,132,133,134,135,756,-535,777,614,235,594',
'708,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-536,727,-303,-303,-303,-304,678,-536,727,612,-303,727,-304,-303',
'-94,235,-536,255,-303,425,-303,-304,-303,-303,-303,-303,-303,-303,-303',
'235,-303,231,-303,265,266,231,-294,235,230,779,689,784,477,-294,793',
'-303,-303,228,-303,252,-303,478,-294,254,253,250,251,-303,794,795,-277',
'-114,310,85,86,87,12,78,1081,807,231,79,80,255,511,255,83,1028,81,82',
'84,33,34,76,77,255,777,511,1058,1058,88,31,30,116,115,117,118,903,904',
'22,255,905,122,123,667,11,49,312,13,120,119,121,110,60,112,111,113,235',
'114,122,123,824,106,107,275,45,46,44,255,259,260,261,262,272,273,267',
'268,263,264,-303,248,249,231,833,265,266,-303,43,835,665,36,-620,524',
'62,63,-303,526,64,663,38,252,719,258,48,254,253,250,251,271,270,256',
'23,257,235,289,-303,103,95,97,98,99,101,-303,3,289,96,104,-620,269,671',
'-251,-303,289,66,719,670,93,100,102,255,235,108,109,310,85,86,87,12',
'78,666,235,-345,79,80,235,662,661,83,-345,81,82,84,33,34,76,77,-276',
'-345,659,652,873,88,31,30,116,115,117,118,649,235,22,882,727,646,235',
'667,11,49,312,13,120,119,121,110,60,112,111,113,642,114,122,123,618',
'106,107,617,45,46,44,255,259,260,261,262,272,273,267,268,263,264,-303',
'248,249,231,418,265,266,-303,43,-278,543,36,-620,612,62,63,-303,235',
'64,541,38,252,1058,258,48,254,253,250,251,271,270,256,23,257,566,912',
'560,103,95,97,98,99,101,255,124,551,96,104,547,269,289,929,719,235,66',
'292,-276,93,100,102,934,544,108,109,310,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,131,132,133,134,135,88,31,30,116,115,117,118,',
'1000,22,583,582,581,,584,11,49,312,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269',
',,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,131,132,133,134,135,88,31,30,116,115,117,118,,,22',
'131,132,133,134,135,11,49,312,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264',
',248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66',
',,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,314,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99',
'101,,,,96,104,,269,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,',
',265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270',
'256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102',
',,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,248,249,,,265,266,,43,,,314,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,235,269,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102,,,108',
'109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273',
'267,,263,264,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259',
'260,261,262,272,273,,,263,264,,,,,,265,266,,43,,,36,,,62,63,,,64,,38',
'252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,255,-645,-645,-645,-645,272,273,,,-645,-645,,,,,,265,266,,43,',
',36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,255,-645,-645,-645,-645,272,273,,,-645,-645',
',,,,,265,266,,43,,,314,,,62,63,,,64,,38,252,,258,48,254,253,250,251',
'271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,255,-645,-645,-645,-645',
'272,273,,,-645,-645,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'-645,-645,-645,-645,272,273,,,-645,-645,,,,,,265,266,,43,,,36,,,62,63',
',,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,255,-645,-645,-645,-645,272,273,,,-645,-645,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,-645,-645,-645,-645,272',
'273,,,-645,-645,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259',
'260,261,262,272,273,267,268,263,264,,-645,-645,,,265,266,,43,,,36,,',
'62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,',
'-645,-645,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,255,,,,,,,,,,,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,,,,23,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,255,,,,,,,,,,,,,,,,265,266,,43,,,36,,,62,63,',
',64,,38,252,,258,48,254,253,250,251,,,,23,,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,',
'327,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,',
',,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,',
'49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,702,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,',
'120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,',
',103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76',
'77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,',
',319,,,62,63,,,64,,318,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,',
',,,,,,,323,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,335,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,',
',49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,,,48,,,,,,',
',245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
'128,,,,,127,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,',
',,,,,,,,,,,,,369,,,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,327,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'333,,,,,,,,,,,,,,,,,,,,986,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,418,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,',
'83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,702,,,,48,',
',,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,435,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,435,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,235,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326',
'332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,993',
',,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,',
'120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,',
',103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,235,,,,,,66,,304',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76',
'77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,986,',
',246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299',
',48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323',
',,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,539,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,',
'327,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,',
',,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,556,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121',
'619,60,112,111,620,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,621',
',,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120',
'119,121,619,60,112,111,620,,114,122,123,,106,107,,,,333,,,,,,,,,,,,',
',,,,,,,621,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,435,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,',
',,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,702,,299,,48,,,,,,',
',245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326',
'332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,798,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,',
'49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,702,,299,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,418,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,304,93,100,102,-441,,108,109,,,,-441,-441,-441,,,-441',
'-441,-441,586,-441,583,582,581,590,584,,,,-441,-441,-441,,,,593,,,,',
'-441,-441,,-441,-441,-441,-441,-441,,,,,,,,,,588,,,,,,,,,,,601,600,',
'-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441',
',,-441,-441,-441,,,-441,,289,-441,,,-441,-441,,-441,594,-441,,-441,',
'-441,-441,-441,-441,-441,-441,-441,,-441,-441,-441,,,,,,,,,,,,,-441',
'-441,-625,-441,,-441,,,,-625,-625,-625,-441,,-625,-625,-625,586,-625',
'583,582,581,590,584,,,,-625,-625,-625,-625,,,593,,,,,-625,-625,,-625',
'-625,-625,-625,-625,,,,,,,,,,588,,,,,,,,,598,597,601,600,,-625,-625',
'-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,,,-625,-625',
'-625,,,-625,,,-625,,,-625,-625,,-625,594,-625,,-625,,-625,-625,-625',
'-625,-625,-625,-625,,-625,-625,-625,586,,583,582,581,590,584,,,,,,-625',
'-625,-625,-625,593,-625,-311,-625,,,,,-625,-311,-311,-311,,,-311,-311',
'-311,,-311,,,,588,,,,,,-311,-311,,598,597,601,600,,,,-311,-311,,-311',
'-311,-311,-311,-311,,,,,,,,,,,,,,,,,,,,,,594,,-311,-311,-311,-311,-311',
'-311,-311,-311,-311,-311,-311,-311,-311,-311,,,-311,-311,-311,,,-311',
',292,-311,,,-311,-311,,-311,,-311,,-311,,-311,-311,-311,-311,-311,-311',
'-311,,-311,,-311,,,,,,,,,,,,,-311,-311,-295,-311,,-311,,,,-295,-295',
'-295,-311,,-295,-295,-295,586,-295,583,582,581,590,584,,,,,-295,-295',
'-295,,,593,,,,,-295,-295,,-295,-295,-295,-295,-295,,,,,,,,,,588,,,,',
',,,,598,597,601,600,,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,,,-295,-295,-295,,,-295,,,-295,,,-295,-295,,-295',
'594,-295,,-295,,-295,-295,-295,-295,-295,-295,-295,,-295,,-295,586,',
'583,582,581,590,584,,,,,,-295,-295,-295,-295,593,-295,-624,-295,,,,',
'-295,-624,-624,-624,,,-624,-624,-624,,-624,,,,588,,,,,-624,-624,-624',
'-624,,,601,600,,,,-624,-624,,-624,-624,-624,-624,-624,,,,,,,,,,,,,,',
',,,,,,,594,,-624,-624,-624,-624,-624,-624,-624,-624,-624,-624,-624,-624',
'-624,-624,,,-624,-624,-624,,,-624,,,-624,,,-624,-624,,-624,,-624,,-624',
',-624,-624,-624,-624,-624,-624,-624,,-624,-624,-624,586,,583,582,581',
'590,584,,,,,,-624,-624,-624,-624,593,-624,-644,-624,,,,,-624,-644,-644',
'-644,,,-644,-644,-644,,-644,,,,588,,,,,-644,-644,-644,,,,601,600,,,',
'-644,-644,,-644,-644,-644,-644,-644,,,,,,,,,,,,,,,,,,,,,,594,,-644,-644',
'-644,-644,-644,-644,-644,-644,-644,-644,-644,-644,-644,-644,,,-644,-644',
'-644,,,-644,,289,-644,,,-644,-644,,-644,,-644,,-644,,-644,-644,-644',
'-644,-644,-644,-644,,-644,-644,-644,,,,,,,,,,,,,-644,-644,-644,-644',
',-644,,,,-644,-644,-644,-644,,-644,-644,-644,586,-644,583,582,581,590',
'584,,,,-644,-644,,,,,593,,,,,-644,-644,,-644,-644,-644,-644,-644,,586',
',583,582,581,590,584,,588,,,,,,,,593,598,597,601,600,,,,,,,,,,,,,-644',
',,,,588,,-644,,,,,289,-644,598,597,601,600,,,594,,,,,,,,,,,,,,-644,-644',
',,,,,,,,,,,,-644,,594,,,-644,,,,,,,-644,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,',
',154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,',
',,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104',
',,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211,194',
'193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202',
'212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,138,,140',
',,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,',
',154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,',
',,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,',
',,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188',
'214,218,219,198,187,201,205,207,199,192,,,,208,215,210,384,383,385,382',
'185,204,203,,,,,,184,191,182,183,379,380,381,377,141,112,111,378,,114',
',,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,391,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,415,414,140,,416,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1065,462,,,1066,,,,,',
'170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,,,,,,,,,,1062,469,,,1061,,,,,,170,,,173,174,178,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,683,462',
',,684,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,',
',,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,,,,,,,,,,685,469,,,686,,,,,,170,,,173,174,178',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
',,,,,683,462,,,684,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,1067,469,,,1068,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,712,462,,,713,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,803,469,,,802',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,715,469,,,716,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',767,462,,,768,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,889,469,,,890,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,800,462,,,801,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,586,177,583,582,581,590,584',
',,,,509,462,,,510,593,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,588,,,175,176,161,162,,,598,597,601,600,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,594,465,469',
',,464,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,',
',,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,,,,,,,,,,458,462,,,459,,,,,,170,,,173,174,178',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
',,,,,769,469,,,770,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,509,462,,,510,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,586,,583,582,581,590,584,,,685,469,,,686,,,593,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,588,175,176,161,162,,,,',
',289,601,600,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',586,177,583,582,581,590,584,,,,,,594,,,,593,,,,,170,,,,586,178,583',
'582,581,590,584,,,,,,,588,572,586,593,583,582,581,590,584,598,597,601',
'600,,,,,586,593,583,582,581,590,584,,588,586,,583,582,581,590,584,593',
'598,597,601,600,,,588,,593,,,594,,,,598,597,601,600,,,588,586,,583,582',
'581,590,584,,588,,601,600,,,594,,593,,,601,600,235,,,,,,,,594,586,,583',
'582,581,590,584,,588,,,,,,594,,593,,,601,600,,,594,586,,583,582,581',
'590,584,,,,,,,,588,,593,,,,,,,,,601,600,,,594,,,,,,,,,588,,,,,,,,,598',
'597,601,600,,,,,,,,,594,,,,,,,,,,,,,,,,,,,,,,,,594' ]
        racc_action_table = arr = ::Array.new(26196, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'686,933,359,1067,1079,956,857,686,686,686,458,1065,686,686,686,328,686',
'22,1035,409,722,722,787,787,834,1035,686,686,686,366,886,367,770,406',
'1035,858,686,686,370,686,686,686,686,686,358,1066,92,768,769,767,607',
'732,458,22,92,887,617,749,834,749,749,749,621,749,859,458,621,686,686',
'686,686,686,686,686,686,686,686,686,686,686,686,1067,409,686,686,686',
'863,686,686,65,692,686,474,474,686,686,406,686,770,686,29,686,328,686',
'686,686,686,686,686,686,722,686,787,686,769,933,359,1067,1079,956,933',
'359,1067,1079,956,1065,686,686,686,686,1065,686,803,686,366,749,367',
'770,686,803,803,803,686,370,886,803,803,886,803,886,607,712,768,769',
'767,607,732,803,358,1066,887,617,62,358,1066,29,864,238,803,803,239',
'803,803,803,803,803,65,692,990,713,690,866,474,707,383,990,387,29,333',
'333,307,383,20,387,990,307,707,62,867,803,803,803,803,803,803,803,803',
'803,803,803,803,803,803,869,690,803,803,803,712,803,41,734,238,803,644',
'239,803,241,442,44,44,803,734,803,20,803,803,803,803,803,803,803,872',
'803,803,803,713,20,952,647,952,952,952,712,952,393,712,479,803,803,403',
'803,41,803,685,734,734,333,333,712,803,685,685,685,803,41,685,685,685',
'874,685,713,241,442,713,644,644,17,17,685,685,685,685,839,644,397,723',
'713,397,734,685,685,723,685,685,685,685,685,44,44,647,647,479,385,781',
'781,393,393,393,647,385,403,403,403,569,400,952,569,683,715,877,685',
'685,685,685,685,685,685,685,685,685,685,685,685,685,684,839,685,685',
'685,883,685,685,839,317,685,397,397,685,685,800,685,839,685,411,685',
'801,685,685,685,685,685,685,685,972,685,685,685,351,395,839,351,715',
'683,888,972,400,400,400,715,685,685,685,685,715,685,110,685,715,823',
'684,42,685,110,110,110,685,337,110,110,110,1012,110,1012,486,800,715',
'316,972,972,110,801,110,110,110,411,411,411,729,620,909,729,110,110',
'892,110,110,110,110,110,395,395,395,42,998,315,486,998,384,337,486,486',
'972,27,823,384,42,737,737,313,27,619,337,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,459,668,110,110,110,620,110,110,909,889',
'110,896,620,110,110,897,110,620,110,898,110,620,110,110,110,110,110',
'110,110,907,110,382,110,381,380,908,485,619,382,620,381,380,459,668',
'619,110,110,110,110,619,110,465,110,619,1086,459,668,110,465,465,465',
'110,889,379,465,465,300,465,485,889,379,619,485,485,889,378,465,953',
'889,953,953,953,378,953,964,1045,1045,465,465,964,465,465,465,465,465',
'915,889,47,47,746,991,746,746,746,377,746,588,991,588,588,588,377,588',
'916,350,953,991,350,465,465,465,465,465,465,465,465,465,465,465,465',
'465,465,47,47,465,465,465,746,465,755,755,918,465,138,588,465,746,919',
'138,138,465,920,465,588,465,465,465,465,465,465,465,895,465,465,465',
'947,895,947,947,947,947,947,992,357,357,922,923,465,465,992,465,947',
'465,464,924,297,296,285,992,465,464,464,464,465,281,505,464,464,873',
'464,873,873,873,947,873,899,247,936,5,937,899,505,505,5,947,947,363',
'243,242,464,464,363,464,464,464,464,464,505,240,505,220,505,505,505',
'505,954,873,505,875,505,875,875,875,136,875,873,102,963,947,970,464',
'464,464,464,464,464,464,464,464,464,464,464,464,464,101,100,464,464',
'464,1043,464,1043,1043,1043,464,1043,875,464,99,983,73,986,464,988,464',
'993,464,464,464,464,464,464,464,1002,464,1003,464,1052,1004,1052,1052',
'1052,1052,1052,623,1005,1006,1043,1008,464,464,623,464,1052,464,113',
'49,1017,1020,1021,623,464,113,113,113,464,1022,113,113,113,1023,113',
'554,1025,1007,1052,1007,1007,1007,113,1007,113,113,113,1052,1052,1052',
'1052,554,554,43,113,113,1031,113,113,113,113,113,1009,40,1009,1009,1009',
'554,1009,554,25,554,554,554,554,1007,1044,554,1037,554,1037,1037,1037',
'1052,1037,113,113,113,113,113,113,113,113,113,113,113,113,113,113,1049',
'1009,113,113,113,994,113,113,1050,18,113,16,994,113,113,1061,113,1062',
'113,1064,113,994,113,113,113,113,113,113,113,15,113,13,113,1038,1070',
'1038,1038,1038,1038,1038,500,1071,558,557,567,113,113,113,113,1038,113',
'802,113,548,570,574,575,113,802,802,802,113,577,501,802,802,578,802',
'339,579,587,1038,500,544,545,339,500,500,500,500,544,595,1038,1038,339',
'599,602,802,802,544,802,802,802,802,802,501,320,1027,368,501,501,501',
'501,320,1027,368,559,559,559,559,559,604,320,1027,368,540,1038,538,802',
'802,802,802,802,802,802,802,802,802,802,802,802,802,321,608,802,802',
'802,773,802,321,609,610,802,611,773,802,535,534,321,493,802,533,802',
'773,802,802,802,802,802,802,802,518,802,19,802,493,493,237,324,517,19',
'625,506,628,237,324,651,802,802,19,802,493,802,237,324,493,493,493,493',
'802,654,656,660,802,789,789,789,789,789,789,1075,669,985,789,789,490',
'674,489,789,985,789,789,789,789,789,789,789,488,985,680,1076,1077,789',
'789,789,789,789,789,789,788,788,789,487,788,788,788,446,789,789,789',
'789,789,789,789,789,789,789,789,789,687,789,789,789,688,789,789,691',
'789,789,789,446,446,446,446,446,446,446,446,446,446,446,890,446,446',
'441,694,446,446,890,789,696,441,789,890,699,789,789,890,701,789,441',
'789,446,709,446,789,446,446,446,446,446,446,446,789,446,711,466,716',
'789,789,789,789,789,789,716,1,714,789,789,716,446,457,446,716,717,789',
'718,456,789,789,789,721,453,789,789,362,362,362,362,362,362,443,728',
'50,362,362,733,439,436,362,50,362,362,362,362,362,362,362,434,50,431',
'408,748,362,362,362,362,362,362,362,405,750,362,757,763,402,766,452',
'362,362,362,362,362,362,362,362,362,362,362,362,399,362,362,362,371',
'362,362,369,362,362,362,452,452,452,452,452,452,452,452,452,452,452',
'1068,452,452,322,365,452,452,1068,362,797,322,362,1068,364,362,362,1068',
'799,362,322,362,452,1078,452,362,452,452,452,452,452,452,452,362,452',
'352,808,348,362,362,362,362,362,362,341,3,338,362,362,334,452,332,832',
'838,327,362,326,848,362,362,362,849,323,362,362,361,361,361,361,361',
'361,,,,361,361,,,,361,,361,361,361,361,361,361,361,311,311,311,311,311',
'361,361,361,361,361,361,361,,938,361,938,938,938,,938,361,361,361,361',
'361,361,361,361,361,361,361,361,,361,361,361,,361,361,,361,361,361,555',
'555,555,555,555,555,555,555,555,555,555,,555,555,,,555,555,,361,,,361',
',,361,361,,,361,,361,555,,555,361,555,555,555,555,555,555,555,361,555',
',,,361,361,361,361,361,361,,,,361,361,,555,,,,,361,,,361,361,361,,,361',
'361,882,882,882,882,882,882,,,,882,882,,,,882,,882,882,882,882,882,882',
'882,9,9,9,9,9,882,882,882,882,882,882,882,,,882,532,532,532,532,532',
'882,882,882,882,882,882,882,882,882,882,882,882,,882,882,882,,882,882',
',882,882,882,294,294,294,294,294,294,294,294,294,294,294,,294,294,,',
'294,294,,882,,,882,,,882,882,,,882,,882,294,,294,882,294,294,294,294',
'294,294,294,882,294,,,,882,882,882,882,882,882,,,,882,882,,294,,,,,882',
',,882,882,882,,,882,882,319,319,319,319,319,319,,,,319,319,,,,319,,319',
'319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319,,,319,,,,,',
'319,319,319,319,319,319,319,319,319,319,319,319,,319,319,319,,319,319',
',319,319,319,805,805,805,805,805,805,805,805,805,805,805,,805,805,,',
'805,805,,319,,,319,,,319,319,,,319,,319,805,,805,319,805,805,805,805',
'805,805,805,319,805,,,,319,319,319,319,319,319,,,,319,319,,805,,,,,319',
',,319,319,319,,,319,319,893,893,893,893,893,893,,,,893,893,,,,893,,893',
'893,893,893,893,893,893,,,,,,893,893,893,893,893,893,893,,,893,,,,,',
'893,893,893,893,893,893,893,893,893,893,893,893,,893,893,893,,893,893',
',893,893,893,914,914,914,914,914,914,914,914,914,914,914,,914,914,,',
'914,914,,893,,,893,,,893,893,,,893,,893,914,,914,893,914,914,914,914',
'914,914,914,893,914,,,,893,893,893,893,893,893,,,,893,893,,914,,,,,893',
',,893,893,893,,,893,893,314,314,314,314,314,314,,,,314,314,,,,314,,314',
'314,314,314,314,314,314,,,,,,314,314,314,314,314,314,314,,,314,,,,,',
'314,314,314,314,314,314,314,314,314,314,314,314,,314,314,314,,314,314',
',314,314,314,504,504,504,504,504,504,504,504,504,504,504,,504,504,,',
'504,504,,314,,,314,,,314,314,,,314,,314,504,,504,314,504,504,504,504',
'504,504,504,314,504,,,,314,314,314,314,314,314,,,,314,314,504,504,,',
',,314,,,314,314,314,,,314,314,930,930,930,930,930,930,,,,930,930,,,',
'930,,930,930,930,930,930,930,930,,,,,,930,930,930,930,930,930,930,,',
'930,,,,,,930,930,930,930,930,930,930,930,930,930,930,930,,930,930,930',
',930,930,,930,930,930,24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24',
',930,,,930,,,930,930,,,930,,930,24,,24,930,24,24,24,24,24,24,24,930',
'24,,,,930,930,930,930,930,930,,,,930,930,,24,,,,,930,,,930,930,930,',
',930,930,960,960,960,960,960,960,,,,960,960,,,,960,,960,960,960,960',
'960,960,960,,,,,,960,960,960,960,960,960,960,,,960,,,,,,960,960,960',
'960,960,960,960,960,960,960,960,960,,960,960,960,,960,960,,960,960,960',
'503,503,503,503,503,503,503,503,,503,503,,,,,,503,503,,960,,,960,,,960',
'960,,,960,,960,503,,503,960,503,503,503,503,503,503,503,960,503,,,,960',
'960,960,960,960,960,,,,960,960,,,,,,,960,,,960,960,960,,,960,960,931',
'931,931,931,931,931,,,,931,931,,,,931,,931,931,931,931,931,931,931,',
',,,,931,931,931,931,931,931,931,,,931,,,,,,931,931,931,931,931,931,931',
'931,931,931,931,931,,931,931,931,,931,931,,931,931,931,502,502,502,502',
'502,502,502,,,502,502,,,,,,502,502,,931,,,931,,,931,931,,,931,,931,502',
',502,931,502,502,502,502,502,502,502,931,502,,,,931,931,931,931,931',
'931,,,,931,931,,,,,,,931,,,931,931,931,,,931,931,606,606,606,606,606',
'606,,,,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606,606,606',
'606,606,606,606,,,606,,,,,,606,606,606,606,606,606,606,606,606,606,606',
'606,,606,606,606,,606,606,,606,606,606,499,499,499,499,499,499,499,',
',499,499,,,,,,499,499,,606,,,606,,,606,606,,,606,,606,499,,499,606,499',
'499,499,499,499,499,499,606,499,,,,606,606,606,606,606,606,,,,606,606',
',,,,,,606,,,606,606,606,,,606,606,36,36,36,36,36,36,,,,36,36,,,,36,',
'36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,36,36',
'36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,498,498,498,498,498',
'498,498,,,498,498,,,,,,498,498,,36,,,36,,,36,36,,,36,,36,498,,498,36',
'498,498,498,498,498,498,498,36,498,,,,36,36,36,36,36,36,,,,36,36,,,',
',,,36,,,36,36,36,,,36,36,425,425,425,425,425,425,,,,425,425,,,,425,',
'425,425,425,425,425,425,425,,,,,,425,425,425,425,425,425,425,,,425,',
',,,,425,425,425,425,425,425,425,425,425,425,425,425,,425,425,425,,425',
'425,,425,425,425,497,497,497,497,497,497,497,,,497,497,,,,,,497,497',
',425,,,425,,,425,425,,,425,,425,497,,497,425,497,497,497,497,497,497',
'497,425,497,,,,425,425,425,425,425,425,,,,425,425,,,,,,,425,,,425,425',
'425,,,425,425,246,246,246,246,246,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,246,246',
'246,246,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246',
'246,496,496,496,496,496,496,496,,,496,496,,,,,,496,496,,246,,,246,,',
'246,246,,,246,,246,496,,496,246,496,496,496,496,496,496,496,246,496',
',,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246',
'246,222,222,222,222,222,222,,,,222,222,,,,222,,222,222,222,222,222,222',
'222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,222,222,222,222,222',
'222,222,222,222,222,222,222,,222,222,222,,222,222,,222,222,222,495,495',
'495,495,495,495,495,,,495,495,,,,,,495,495,,222,,,222,,,222,222,,,222',
',222,495,,495,222,495,495,495,495,495,495,495,222,495,,,,222,222,222',
'222,222,222,,,,222,222,,,,,,,222,,,222,222,222,,,222,222,345,345,345',
'345,345,345,,,,345,345,,,,345,,345,345,345,345,345,345,345,,,,,,345',
'345,345,345,345,345,345,,,345,,,,,,345,345,345,345,345,345,345,345,345',
'345,345,345,,345,345,345,,345,345,,345,345,345,494,494,494,494,494,494',
'494,,,494,494,,,,,,494,494,,345,,,345,,,345,345,,,345,,345,494,,494',
'345,494,494,494,494,494,494,494,345,494,,,,345,345,345,345,345,345,',
',,345,345,,,,,,,345,,,345,345,345,,,345,345,829,829,829,829,829,829',
',,,829,829,,,,829,,829,829,829,829,829,829,829,,,,,,829,829,829,829',
'829,829,829,,,829,,,,,,829,829,829,829,829,829,829,829,829,829,829,829',
',829,829,829,,829,829,,829,829,829,484,484,484,484,484,484,484,484,484',
'484,484,,484,484,,,484,484,,829,,,829,,,829,829,,,829,,829,484,,484',
'829,484,484,484,484,484,484,484,829,484,,,,829,829,829,829,829,829,',
',,829,829,,,,,,,829,,,829,829,829,,,829,829,846,846,846,846,846,846',
',,,846,846,,,,846,,846,846,846,846,846,846,846,,,,,,846,846,846,846',
'846,846,846,,,846,,,,,,846,846,846,846,846,846,846,846,846,846,846,846',
',846,846,846,,846,846,,846,846,846,483,483,483,483,483,483,483,483,483',
'483,483,,483,483,,,483,483,,846,,,846,,,846,846,,,846,,846,483,,483',
'846,483,483,483,483,483,483,483,846,483,,,,846,846,846,846,846,846,',
',,846,846,,,,,,,846,,,846,846,846,,,846,846,2,2,2,2,2,2,,,,2,2,,,,2',
',2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,',
'2,2,2,,2,2,,2,2,2,491,,,,,,,,,,,,,,,,491,491,,2,,,2,,,2,2,,,2,,2,491',
',491,2,491,491,491,491,,,,2,,,,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,',
',2,2,771,771,771,771,771,771,,,,771,771,,,,771,,771,771,771,771,771',
'771,771,,,,,,771,771,771,771,771,771,771,,,771,,,,,,771,771,771,771',
'771,771,771,771,771,771,771,771,,771,771,771,,771,771,,771,771,771,492',
',,,,,,,,,,,,,,,492,492,,771,,,771,,,771,771,,,771,,771,492,,492,771',
'492,492,492,492,,,,771,,,,,771,771,771,771,771,771,,,,771,771,,,,,,',
'771,,,771,771,771,,,771,771,603,603,603,603,603,603,,,,603,603,,,,603',
',603,603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603,,,603',
',,,,,603,603,603,603,603,603,603,603,603,603,603,603,,603,603,603,,603',
'603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603,,603,',
',,603,,,,,,,,603,,,,,603,603,603,603,603,603,,,,603,603,,,,,,,603,,',
'603,603,603,,,603,603,1016,1016,1016,1016,1016,1016,,,,1016,1016,,,',
'1016,,1016,1016,1016,1016,1016,1016,1016,,,,,,1016,1016,1016,1016,1016',
'1016,1016,,,1016,,,,,,1016,1016,1016,1016,1016,1016,1016,1016,1016,1016',
'1016,1016,,1016,1016,1016,,1016,1016,,1016,1016,1016,,,,,,,,,,,,,,,',
',,,,1016,,,1016,,,1016,1016,,,1016,,1016,,,,1016,,,,,,,,1016,,,,,1016',
'1016,1016,1016,1016,1016,,,,1016,1016,,,,,,,1016,,,1016,1016,1016,,',
'1016,1016,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,1015,,1015,1015',
'1015,1015,1015,1015,1015,,,,,,1015,1015,1015,1015,1015,1015,1015,,,1015',
',,,,,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,,1015',
'1015,1015,,1015,1015,,1015,1015,1015,,,,,,,,,,,,,,,,,,,,1015,,,1015',
',,1015,1015,,,1015,,1015,,,,1015,,,,,,,,1015,,,,,1015,1015,1015,1015',
'1015,1015,,,,1015,1015,,,,,,,1015,,,1015,1015,1015,,,1015,1015,1010',
'1010,1010,1010,1010,1010,,,,1010,1010,,,,1010,,1010,1010,1010,1010,1010',
'1010,1010,,,,,,1010,1010,1010,1010,1010,1010,1010,,,1010,,,,,,1010,1010',
'1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,,1010,1010,1010,,1010',
'1010,,1010,1010,1010,,,,,,,,,,,,,,,,,,,,1010,,,1010,,,1010,1010,,,1010',
',1010,,,,1010,,,,,,,,1010,,,,,1010,1010,1010,1010,1010,1010,,,,1010',
'1010,,,,,,,1010,,,1010,1010,1010,,,1010,1010,855,855,855,855,855,855',
',,,855,855,,,,855,,855,855,855,855,855,855,855,,,,,,855,855,855,855',
'855,855,855,,,855,,,,,,855,855,855,855,855,855,855,855,855,855,855,855',
',855,855,855,,855,855,,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855',
'855,,,855,,855,,,,855,,,,,,,,855,,,,,855,855,855,855,855,855,,,,855',
'855,,,,,,,855,,,855,855,855,,,855,855,989,989,989,989,989,989,,,,989',
'989,,,,989,,989,989,989,989,989,989,989,,,,,,989,989,989,989,989,989',
'989,,,989,,,,,,989,989,989,989,989,989,989,989,989,989,989,989,,989',
'989,989,,989,989,,989,989,989,,,,,,,,,,,,,,,,,,,,989,,,989,,,989,989',
',,989,,989,,,,989,,,,,,,,989,,,,,989,989,989,989,989,989,,,,989,989',
',,,,,,989,,,989,989,989,,,989,989,782,782,782,782,782,782,,,,782,782',
',,,782,,782,782,782,782,782,782,782,,,,,,782,782,782,782,782,782,782',
',,782,,,,,,782,782,782,782,782,782,782,782,782,782,782,782,,782,782',
'782,,782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,,782',
',782,,,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782,,,,,,',
'782,,,782,782,782,,,782,782,856,856,856,856,856,856,,,,856,856,,,,856',
',856,856,856,856,856,856,856,,,,,,856,856,856,856,856,856,856,,,856',
',,,,,856,856,856,856,856,856,856,856,856,856,856,856,,856,856,856,,856',
'856,,856,856,856,,,,,,,,,,,,,,,,,,,,856,,,856,,,856,856,,,856,,856,',
',,856,,,,,,,,856,,,,,856,856,856,856,856,856,,,,856,856,,,,,,,856,,',
'856,856,856,,,856,856,783,783,783,783,783,783,,,,783,783,,,,783,,783',
'783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,,,783,,,,,',
'783,783,783,783,783,783,783,783,783,783,783,783,,783,783,783,,783,783',
',783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,,783,,783,,,,783',
',,,,,,,783,,,,,783,783,783,783,783,783,,,,783,783,,,,,,,783,,,783,783',
'783,,,783,783,673,673,673,,673,,,,673,673,,,,673,,673,673,673,673,673',
'673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673',
'673,673,673,673,673,,673,673,673,,673,673,,673,673,673,,,,,,,,,,,,,',
',,,,,,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,673,,,,,673,673,673',
'673,673,673,,,,673,673,,,,,,,673,,,673,673,673,,,673,673,547,547,547',
',547,,,,547,547,,,,547,,547,547,547,547,547,547,547,,,,,,547,547,547',
'547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,547,,547',
'547,547,,547,547,,,,547,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,547,,,547',
',,,,,,,,,,,,,,,,,,547,547,547,547,547,547,,,,547,547,,,,,,,547,,,547',
'547,547,,,547,547,550,550,550,,550,,,,550,550,,,,550,,550,550,550,550',
'550,550,550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,,550,,,550,550',
'550,550,550,550,550,550,,550,550,550,,550,550,,550,550,550,,,,,,,,,',
',,,,,,,,,,550,,,550,,,550,550,,,550,,,,,,550,,,,,,,,550,,,,,550,550',
'550,550,550,550,,,,550,550,,,,,,,550,,,550,550,550,,,550,550,551,551',
'551,,551,,,,551,551,,,,551,,551,551,551,551,551,551,551,,,,,,551,551',
'551,551,551,551,551,,,551,,,,,,,551,,,551,551,551,551,551,551,551,551',
',551,551,551,,551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551',
'551,,,551,,,,,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551',
',,,,,,551,,,551,551,551,,,551,551,565,565,565,,565,,,,565,565,,,,565',
',565,565,565,565,565,565,565,,,,,,565,565,565,565,565,565,565,,,565',
',,,,,,565,,,565,565,565,565,565,565,565,565,565,565,565,565,,565,565',
',565,565,565,,,,,,,,,,,,,,,,,,,,565,,,565,,,565,565,,,565,,,,,,565,',
',,,,,,565,,,,,565,565,565,565,565,565,,,,565,565,,,,,,,565,,565,565',
'565,565,,,565,565,556,556,556,,556,,,,556,556,,,,556,,556,556,556,556',
'556,556,556,,,,,,556,556,556,556,556,556,556,,,556,,,,,,,556,,,556,556',
'556,556,556,556,556,556,,556,556,556,,556,556,,556,556,556,,,,,,,,,',
',,,,,,,,,,556,,,556,,,556,556,,,556,,,,,,556,,,,,,,,556,,,,,556,556',
'556,556,556,556,,,,556,556,,,,,,,556,,,556,556,556,,,556,556,562,562',
'562,,562,,,,562,562,,,,562,,562,562,562,562,562,562,562,,,,,,562,562',
'562,562,562,562,562,,,562,,,,,,,562,,,562,562,562,562,562,562,562,562',
'562,562,562,562,,562,562,,562,562,562,,,,,,,,,,,,,,,,,,,,562,,,562,',
',562,562,,,562,,562,,,,562,,,,,,,,562,,,,,562,562,562,562,562,562,,',
',562,562,,,,,,,562,,562,562,562,562,,,562,562,23,23,23,,23,,,,23,23',
',,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23',
',,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,',
',,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,',
'23,23,,,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32',
'32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32',
'32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32',
',,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,',
',,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33',
'33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33',
'33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33',
',,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,',
'33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34',
',,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34',
'34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34',
',34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34',
'34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37',
'37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37',
',37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,',
',,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38',
',38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,',
',38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,',
',,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38',
',,,38,38,,,,38,,,38,,,38,38,38,,,38,38,1032,1032,1032,,1032,,,,1032',
'1032,,,,1032,,1032,1032,1032,1032,1032,1032,1032,,,,,,1032,1032,1032',
'1032,1032,1032,1032,,,1032,,,,,,,1032,,,1032,1032,1032,1032,1032,1032',
'1032,1032,1032,1032,1032,1032,,1032,1032,,1032,1032,1032,,,,,,,,,,,',
',,,,,,,,1032,,,1032,,,1032,1032,,,1032,,1032,,1032,,1032,,,,,,,,1032',
',,,,1032,1032,1032,1032,1032,1032,,,,1032,1032,,,,,,,1032,,1032,1032',
'1032,1032,,,1032,1032,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45',
'45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45',
',45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,',
',,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46',
'46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46',
'46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,',
'46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,48,48',
'48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48',
',,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,',
',,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48',
'48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,,48,48,63,63,63,,63,,,,63,63',
',,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63',
',,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,',
',,,,,,63,,,63,,,63,63,,,63,,63,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63',
',,,63,63,,,,,,,63,,63,63,63,63,,,63,63,67,67,67,,67,,,,67,67,,,,67,',
'67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67',
'67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,',
',67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,',
',,,,67,,,67,67,67,,,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68',
'68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68',
'68,,68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68',
',,,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68',
',,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71',
'71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71',
'71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,',
'71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72',
'72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72',
'72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,',
',,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72',
'72,72,,,,72,72,,,,,,,72,,,72,72,72,,,72,72,984,984,984,,984,,,,984,984',
',,,984,,984,984,984,984,984,984,984,,,,,,984,984,984,984,984,984,984',
',,984,,,,,,,984,,,984,984,984,984,984,984,984,984,,984,984,984,,984',
'984,,,,984,,,,,,,,,,,,,,,,,,,,984,,,984,,,984,984,,,984,,,,,,,,,,,,',
',,,,,,984,984,984,984,984,984,,,,984,984,,,,,,,984,,,984,984,984,,,984',
'984,126,126,126,126,126,,,,126,126,,,,126,,126,126,126,126,126,126,126',
',,,,,126,126,126,126,126,126,126,,,126,,,,,,126,126,126,126,126,126',
'126,126,126,126,126,126,,126,126,126,,126,126,,126,126,126,,,,,,,,,',
',,,,,,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,,,,,,126,,,,,126,126',
'126,126,126,126,,,,126,126,,,,,,126,126,,,126,126,126,,,126,126,131',
'131,131,,131,,,,131,131,,,,131,,131,131,131,131,131,131,131,,,,,,131',
'131,131,131,131,131,131,,,131,,,,,,,131,,,131,131,131,131,131,131,131',
'131,,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131',
',,131,131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131',
'131,,,,,,,131,,,131,131,131,,,131,131,132,132,132,,132,,,,132,132,,',
',132,,132,132,132,132,132,132,132,,,,,,132,132,132,132,132,132,132,',
',132,,,,,,,132,,,132,132,132,132,132,132,132,132,,132,132,132,,132,132',
',132,132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,,,,,,132,',
',,,,,,132,,,,,132,132,132,132,132,132,,,,132,132,,,,,,,132,,,132,132',
'132,,,132,132,133,133,133,,133,,,,133,133,,,,133,,133,133,133,133,133',
'133,133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,,133,,,133,133,133',
'133,133,133,133,133,,133,133,133,,133,133,,133,133,133,,,,,,,,,,,,,',
',,,,,,133,,,133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,,,133,133,133',
'133,133,133,,,,133,133,,,,,,,133,,,133,133,133,,,133,133,134,134,134',
',134,,,,134,134,,,,134,,134,134,134,134,134,134,134,,,,,,134,134,134',
'134,134,134,134,,,134,,,,,,,134,,,134,134,134,134,134,134,134,134,,134',
'134,134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134',
',,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134,134,,,',
',,,134,,,134,134,134,,,134,134,135,135,135,135,135,,,,135,135,,,,135',
',135,135,135,135,135,135,135,,,,,,135,135,135,135,135,135,135,,,135',
',,,,,135,135,,135,135,135,135,135,135,135,135,135,,135,135,135,,135',
'135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135,,,135,,135,',
',,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135,,,,,,,135,,',
'135,135,135,,,135,135,959,959,959,,959,,,,959,959,,,,959,,959,959,959',
'959,959,959,959,,,,,,959,959,959,959,959,959,959,,,959,,,,,,,959,,,959',
'959,959,959,959,959,959,959,,959,959,959,,959,959,,959,959,959,,,,,',
',,,,,,,,,,,,,,959,,,959,,,959,959,,,959,,959,,,,959,,,,,,,,959,,,,,959',
'959,959,959,959,959,,,,959,959,,,,,,,959,,,959,959,959,,,959,959,223',
'223,223,,223,,,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223',
'223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223',
'223,,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223',
',,223,223,,,223,,223,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,',
',,223,223,,,,,,,223,,,223,223,223,,,223,223,224,224,224,,224,,,,224',
'224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224',
'224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224,',
'224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,224',
',,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,',
',224,224,224,,,224,224,225,225,225,,225,,,,225,225,,,,225,,225,225,225',
'225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225',
'225,225,225,225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,',
',,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225',
'225,225,225,225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225,225,226',
'226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226',
'226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226',
'226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226',
',,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226',
'226,,,,,,,226,,,226,226,226,,,226,226,227,227,227,,227,,,,227,227,,',
',227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227,227,',
',227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,,227,227',
',227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,',
',,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,227',
'227,,,227,227,228,228,228,,228,,,,228,228,,,,228,,228,228,228,228,228',
'228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228',
'228,228,228,228,228,228,228,228,228,,228,228,,228,228,228,,,,,,,,,,',
',,,,,,,,,228,,,228,,,228,228,,,228,,228,,228,,228,,,,,,,,228,,,,,228',
'228,228,228,228,228,,,,228,228,,,,,,,228,,228,228,228,228,,,228,228',
'232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232,,,,',
',232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232',
'232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,',
'232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232',
',,,232,232,,,,,,,232,,,232,232,232,,,232,232,233,233,233,,233,,,,233',
'233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233',
'233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,',
'233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,',
',,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233,',
',233,233,233,,,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234,234',
'234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234',
'234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,',
',,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234',
'234,234,234,234,234,,,,234,234,234,,,,,,234,,,234,234,234,,,234,234',
'8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8',
'8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8',
'8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8',
'245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,',
',245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245',
'245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,',
'245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,,,245,245,934,934,934,,934,,,,934',
'934,,,,934,,934,934,934,934,934,934,934,,,,,,934,934,934,934,934,934',
'934,,,934,,,,,,,934,,,934,934,934,934,934,934,934,934,,934,934,934,',
'934,934,,,,934,,,,,,,,,,,,,,,,,,,,934,,,934,,,934,934,,,934,,,,,,,,',
',,,,,,,,,,934,934,934,934,934,934,,,,934,934,,,,,,,934,,,934,934,934',
',,934,934,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248',
'248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248',
'248,248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,',
',,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248',
'248,248,,,,248,248,,,,,,,248,,,248,248,248,,,248,248,249,249,249,,249',
',,,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249',
'249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249',
'249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249',
',,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249',
',,249,249,249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250',
'250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250',
',,250,250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250',
',,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,',
',250,250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250',
'251,251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,',
',251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251',
'251,251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,',
'251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251',
',,,251,251,,,,,,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252',
'252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252',
'252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,',
'252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,',
',,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,',
',252,252,252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253',
'253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253',
'253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,',
',,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253',
'253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,254',
'254,254,,254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254',
'254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254',
'254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254',
',,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254',
'254,,,,,,,254,,,254,254,254,,,254,254,255,255,255,,255,,,,255,255,,',
',255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,',
',255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255',
',255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,',
',,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255',
'255,,,255,255,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,',
',,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256,256,257,257,257',
',257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257',
'257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257',
'257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257',
',,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,',
',,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258',
'258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,',
',258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258',
'258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258',
',,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258',
'258,259,259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259',
',,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259',
'259,259,259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259',
',,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259',
',,,259,259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260',
'260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260',
'260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,',
'260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,',
',,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,',
',260,260,260,,,260,260,261,261,261,,261,,,,261,261,,,,261,,261,261,261',
'261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261',
'261,261,261,261,261,261,261,,261,261,261,,261,261,,261,261,261,,,,,',
',,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261',
'261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261,261,,,261,261,262',
'262,262,,262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262',
'262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262',
'262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262',
',,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262',
'262,,,,,,,262,,,262,262,262,,,262,262,263,263,263,,263,,,,263,263,,',
',263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,',
',263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263',
',263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,',
',,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263',
'263,,,263,263,264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264',
'264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264',
'264,264,264,264,264,,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,',
',,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264,264',
'264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,,264,264,265,265,265',
',265,,,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265',
'265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265',
'265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265',
',,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,',
',,,265,,,265,265,265,,,265,265,266,266,266,,266,,,,266,266,,,,266,,266',
'266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,',
',266,,,266,266,266,266,266,266,266,266,,266,266,266,,266,266,,266,266',
'266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266',
',,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266,266,,,266',
'266,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267',
',,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267',
'267,267,267,,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267',
',,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267',
',,,267,267,,,,,,,267,,,267,267,267,,,267,267,268,268,268,,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268,,268,268,268,',
'268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,',
',,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,,,,,268,',
',268,268,268,,,268,268,269,269,269,,269,,,,269,269,,,,269,,269,269,269',
'269,269,269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269',
'269,269,269,269,269,269,269,,269,269,269,,269,269,,269,269,269,,,,,',
',,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269',
'269,269,269,269,269,,,,269,269,,,,,,,269,,,269,269,269,,,269,269,274',
'274,274,,274,,,,274,274,,,,274,,274,274,274,274,274,274,274,,,,,,274',
'274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274,274,274,274,274',
'274,,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274',
',,274,274,,,274,,,,,,274,,,,,,,,274,,,,,274,274,274,274,274,274,,,,274',
'274,,,,,,,274,,,274,274,274,,,274,274,282,282,282,,282,,,,282,282,,',
',282,,282,282,282,282,282,282,282,,,,,,282,282,282,282,282,282,282,',
',282,,,,,,,282,,,282,282,282,282,282,282,282,282,282,282,282,282,,282',
'282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,282,',
'282,,282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282,282,,,,,,,282',
',282,282,282,282,,,282,282,289,289,289,,289,,,,289,289,,,,289,,289,289',
'289,289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289',
',,289,289,289,289,289,289,289,289,289,289,289,289,,289,289,,289,289',
'289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,289,,289,,289,,,,',
',,,289,,,,,289,289,289,289,289,289,,,,289,289,,,,,,,289,,289,289,289',
'289,,,289,289,292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292',
'292,292,,,,,,292,292,292,292,292,292,292,,,292,,,,,,,292,,,292,292,292',
'292,292,292,292,292,292,292,292,292,,292,292,,292,292,292,,,,,,,,,,',
',,,,,,,,,292,,,292,,,292,292,,,292,,292,,292,,292,,,,,,,,292,,,,,292',
'292,292,292,292,292,,,,292,292,292,,,,,,292,,292,292,292,292,,,292,292',
'925,925,925,,925,,,,925,925,,,,925,,925,925,925,925,925,925,925,,,,',
',925,925,925,925,925,925,925,,,925,,,,,,,925,,,925,925,925,925,925,925',
'925,925,,925,925,925,,925,925,,,,925,,,,,,,,,,,,,,,,,,,,925,,,925,,',
'925,925,,,925,,,,,,,,,,,,,,,,,,,925,925,925,925,925,925,,,,925,925,',
',,,,,925,,,925,925,925,,,925,925,299,299,299,,299,,,,299,299,,,,299',
',299,299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299',
',,,,,,299,,,299,299,299,299,299,299,299,299,,299,299,299,,299,299,,299',
'299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,,,,,,',
',299,,,,,299,299,299,299,299,299,,,,299,299,,,,,,,299,,,299,299,299',
',,299,299,301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301',
'301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301',
'301,301,301,301,,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,',
',,301,,,301,,,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301',
'301,301,,,,301,301,,,,,,,301,,,301,301,301,,,301,301,303,303,303,,303',
',,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303',
'303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303,303,303,,303,303',
'303,,303,303,,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303',
',,,,,303,,,,,,,,303,,,,,303,303,303,303,303,303,,,,303,303,,,,,,,303',
',,303,303,303,,,303,303,304,304,304,,304,,,,304,304,,,,304,,304,304',
'304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304',
',,304,304,304,304,304,304,304,304,,304,304,304,,304,304,,304,304,304',
',,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,304,,,,,,,,304,,,',
',304,304,304,304,304,304,,,,304,304,,,,,,,304,,,304,304,304,,,304,304',
'913,913,913,,913,,,,913,913,,,,913,,913,913,913,913,913,913,913,,,,',
',913,913,913,913,913,913,913,,,913,,,,,,,913,,,913,913,913,913,913,913',
'913,913,,913,913,913,,913,913,,913,913,913,,,,,,,,,,,,,,,,,,,,913,,',
'913,,,913,913,,,913,,,,,,913,,,,,,,,913,,,,,913,913,913,913,913,913',
',,,913,913,,,,,,,913,,,913,913,913,,,913,913,310,310,310,310,310,,,',
'310,310,,,,310,,310,310,310,310,310,310,310,,,,,,310,310,310,310,310',
'310,310,,,310,,,,,,310,310,,310,310,310,310,310,310,310,310,310,,310',
'310,310,,310,310,,310,310,310,,,,,,,,,,,,,,,,,,,,310,,,310,,,310,310',
',,310,,310,,,,310,,,,,,,,310,,,,,310,310,310,310,310,310,,,,310,310',
',,,,,,310,,,310,310,310,,,310,310,912,912,912,,912,,,,912,912,,,,912',
',912,912,912,912,912,912,912,,,,,,912,912,912,912,912,912,912,,,912',
',,,,,,912,,,912,912,912,912,912,912,912,912,912,912,912,912,,912,912',
',912,912,912,,,,,,,,,,,,,,,,,,,,912,,,912,,,912,912,,,912,,,,912,,912',
',,,,,,,912,,,,,912,912,912,912,912,912,,,,912,912,,,,,,,912,,912,912',
'912,912,,,912,912,894,894,894,,894,,,,894,894,,,,894,,894,894,894,894',
'894,894,894,,,,,,894,894,894,894,894,894,894,,,894,,,,,,,894,,,894,894',
'894,894,894,894,894,894,,894,894,894,,894,894,,894,894,894,,,,,,,,,',
',,,,,,,,,,894,,,894,,,894,894,,,894,,,,,,894,,,,,,,,894,,,,,894,894',
'894,894,894,894,,,,894,894,,,,,,,894,,,894,894,894,,,894,894,318,318',
'318,,318,,,,318,318,,,,318,,318,318,318,318,318,318,318,,,,,,318,318',
'318,318,318,318,318,,,318,,,,,,,318,,,318,318,318,318,318,318,318,318',
',318,318,318,,318,318,,,,318,,,,,,,,,,,,,,,,,,,,318,,,318,,,318,318',
',,318,,,,,,,,,,,,,,,,,,,318,318,318,318,318,318,,,,318,318,,,,318,,',
'318,,,318,318,318,,,318,318,880,880,880,,880,,,,880,880,,,,880,,880',
'880,880,880,880,880,880,,,,,,880,880,880,880,880,880,880,,,880,,,,,',
',880,,,880,880,880,880,880,880,880,880,,880,880,880,,880,880,,880,880',
'880,,,,,,,,,,,,,,,,,,,,880,,,880,,,880,880,,,880,,,,,,880,,,,,,,,880',
',,,,880,880,880,880,880,880,,,,880,880,,,,,,,880,,,880,880,880,,,880',
'880,335,335,335,,335,,,,335,335,,,,335,,335,335,335,335,335,335,335',
',,,,,335,335,335,335,335,335,335,,,335,,,,,,,335,,,335,335,335,335,335',
'335,335,335,,335,335,335,,335,335,,,,335,,,,,,,,,,,,,,,,,,,,335,,,335',
',,335,335,,,335,,,,,,,,,,,,,,,,,,,335,335,335,335,335,335,,,,335,335',
',,,,,,335,,,335,335,335,,,335,335,824,824,824,,824,,,,824,824,,,,824',
',824,824,824,824,824,824,824,,,,,,824,824,824,824,824,824,824,,,824',
',,,,,,824,,,824,824,824,824,824,824,824,824,,824,824,824,,824,824,,824',
'824,824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,,,,,824,,,,,,',
',824,,,,,824,824,824,824,824,824,,,,824,824,,,,,,,824,,,824,824,824',
',,824,824,822,822,822,,822,,,,822,822,,,,822,,822,822,822,822,822,822',
'822,,,,,,822,822,822,822,822,822,822,,,822,,,,,,,822,,,822,822,822,822',
'822,822,822,822,,822,822,822,,822,822,,822,822,822,,,,,,,,,,,,,,,,,',
',,822,,,822,,,822,822,,,822,,,,,,822,,,,,,,,822,,,,,822,822,822,822',
'822,822,,,,822,822,,,,,,,822,,,822,822,822,,,822,822,821,821,821,,821',
',,,821,821,,,,821,,821,821,821,821,821,821,821,,,,,,821,821,821,821',
'821,821,821,,,821,,,,,,,821,,,821,821,821,821,821,821,821,821,,821,821',
'821,,821,821,,821,821,821,,,,,,,,,,,,,,,,,,,,821,,,821,,,821,821,,,821',
',,,,,821,,,,,,,,821,,,,,821,821,821,821,821,821,,,,821,821,,,,,,,821',
',,821,821,821,,,821,821,342,342,342,,342,,,,342,342,,,,342,,342,342',
'342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342',
',,342,342,342,342,342,342,342,342,,342,342,342,,342,342,,342,342,342',
',,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,342,,,,,,,,342,,,',
',342,342,342,342,342,342,,,,342,342,,,,,,,342,,,342,342,342,,,342,342',
'344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344,344,344,,,,',
',344,344,344,344,344,344,344,,,344,,,,,,,344,,,344,344,344,344,344,344',
'344,344,,344,344,344,,344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,',
'344,344,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344,344,344,344,344,344',
',,,344,344,,,,,,,344,,,344,344,344,,,344,344,347,347,347,347,347,,,',
'347,347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347',
'347,347,,,347,,,,,,347,347,,347,347,347,347,347,347,347,347,347,,347',
'347,347,,347,347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347',
',,347,,347,,,,347,,,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347',
',,,,,,347,,,347,347,347,,,347,347,820,820,820,,820,,,,820,820,,,,820',
',820,820,820,820,820,820,820,,,,,,820,820,820,820,820,820,820,,,820',
',,,,,,820,,,820,820,820,820,820,820,820,820,,820,820,820,,820,820,,820',
'820,820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820,820,,,820,,,,,,820,,,,,,',
',820,,,,,820,820,820,820,820,820,,,,820,820,,,,,,,820,,,820,820,820',
',,820,820,819,819,819,,819,,,,819,819,,,,819,,819,819,819,819,819,819',
'819,,,,,,819,819,819,819,819,819,819,,,819,,,,,,,819,,,819,819,819,819',
'819,819,819,819,,819,819,819,,819,819,,819,819,819,,,,,,,,,,,,,,,,,',
',,819,,,819,,,819,819,,,819,,,,,,819,,,,,,,,819,,,,,819,819,819,819',
'819,819,,,,819,819,,,,,,,819,,,819,819,819,,,819,819,806,806,806,,806',
',,,806,806,,,,806,,806,806,806,806,806,806,806,,,,,,806,806,806,806',
'806,806,806,,,806,,,,,,,806,,,806,806,806,806,806,806,806,806,,806,806',
'806,,806,806,,806,806,806,,,,,,,,,,,,,,,,,,,,806,,,806,,,806,806,,,806',
',,,,,806,,,,,,,,806,,,,,806,806,806,806,806,806,,,,806,806,,,,,,,806',
',,806,806,806,,,806,806,353,353,353,,353,,,,353,353,,,,353,,353,353',
'353,353,353,353,353,,,,,,353,353,353,353,353,353,353,,,353,,,,,,,353',
',,353,353,353,353,353,353,353,353,353,353,353,353,,353,353,,353,353',
'353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353,353,,,353,,,,,,353,,,,,,,,353',
',,,,353,353,353,353,353,353,,,,353,353,,,,,,,353,,353,353,353,353,,',
'353,353,360,360,360,,360,,,,360,360,,,,360,,360,360,360,360,360,360',
'360,,,,,,360,360,360,360,360,360,360,,,360,,,,,,,360,,,360,360,360,360',
'360,360,360,360,,360,360,360,,360,360,,360,360,360,,,,,,,,,,,,,,,,,',
',,360,,,360,,,360,360,,,360,,,,,,360,,,,,,,,360,,,,,360,360,360,360',
'360,360,,,,360,360,,,,,,,360,,,360,360,360,,,360,360,798,798,798,,798',
',,,798,798,,,,798,,798,798,798,798,798,798,798,,,,,,798,798,798,798',
'798,798,798,,,798,,,,,,,798,,,798,798,798,798,798,798,798,798,,798,798',
'798,,798,798,,798,798,798,,,,,,,,,,,,,,,,,,,,798,,,798,,,798,798,,,798',
',,,,,798,,,,,,,,798,,,,,798,798,798,798,798,798,,,,798,798,,,,,,,798',
',,798,798,798,,,798,798,374,374,374,,374,,,,374,374,,,,374,,374,374',
'374,374,374,374,374,,,,,,374,374,374,374,374,374,374,,,374,,,,,,,374',
',,374,374,374,374,374,374,374,374,,374,374,374,,374,374,,,,374,,,,,',
',,,,,,,,,,,,,,374,,,374,,,374,374,,,374,,,,,,,,,,,,,,,,,,,374,374,374',
'374,374,374,,,,374,374,,,,,,,374,,,374,374,374,,,374,374,376,376,376',
',376,,,,376,376,,,,376,,376,376,376,376,376,376,376,,,,,,376,376,376',
'376,376,376,376,,,376,,,,,,,376,,,376,376,376,376,376,376,376,376,,376',
'376,376,,376,376,,,,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376,376,,,376',
',,,,,,,,,,,,,,,,,,376,376,376,376,376,376,,,,376,376,,,,,,,376,,,376',
'376,376,,,376,376,777,777,777,,777,,,,777,777,,,,777,,777,777,777,777',
'777,777,777,,,,,,777,777,777,777,777,777,777,,,777,,,,,,,777,,,777,777',
'777,777,777,777,777,777,777,777,777,777,,777,777,,777,777,777,,,,,,',
',,,,,,,,,,,,,777,,,777,,,777,777,,,777,,777,,777,,777,,,,,,,,777,,,',
',777,777,777,777,777,777,,,,777,777,,,,,,,777,,777,777,777,777,,,777',
'777,765,765,765,,765,,,,765,765,,,,765,,765,765,765,765,765,765,765',
',,,,,765,765,765,765,765,765,765,,,765,,,,,,,765,,,765,765,765,765,765',
'765,765,765,,765,765,765,,765,765,,765,765,765,,,,,,,,,,,,,,,,,,,,765',
',,765,,,765,765,,,765,,765,,,,765,,,,,,,,765,,,,,765,765,765,765,765',
'765,,,,765,765,,,,,,,765,,,765,765,765,,,765,765,744,744,744,,744,,',
',744,744,,,,744,,744,744,744,744,744,744,744,,,,,,744,744,744,744,744',
'744,744,,,744,,,,,,,744,,,744,744,744,744,744,744,744,744,,744,744,744',
',744,744,,744,744,744,,,,,,,,,,,,,,,,,,,,744,,,744,,,744,744,,,744,',
',,,,744,,,,,,,,744,,,,,744,744,744,744,744,744,,,,744,744,,,,,,,744',
',,744,744,744,,,744,744,435,435,435,,435,,,,435,435,,,,435,,435,435',
'435,435,435,435,435,,,,,,435,435,435,435,435,435,435,,,435,,,,,,,435',
',,435,435,435,435,435,435,435,435,,435,435,435,,435,435,,435,435,435',
',,,,,,,,,,,,,,,,,,,435,,,435,,,435,435,,,435,,,,,,435,,,,,,,,435,,,',
',435,435,435,435,435,435,,,,435,435,,,,,,,435,,,435,435,435,,,435,435',
'725,725,725,,725,,,,725,725,,,,725,,725,725,725,725,725,725,725,,,,',
',725,725,725,725,725,725,725,,,725,,,,,,,725,,,725,725,725,725,725,725',
'725,725,,725,725,725,,725,725,,725,725,725,,,,,,,,,,,,,,,,,,,,725,,',
'725,,,725,725,,,725,,725,,,,725,,,,,,,,725,,,,,725,725,725,725,725,725',
',,,725,725,,,,,,,725,,,725,725,725,,,725,725,719,719,719,,719,,,,719',
'719,,,,719,,719,719,719,719,719,719,719,,,,,,719,719,719,719,719,719',
'719,,,719,,,,,,,719,,,719,719,719,719,719,719,719,719,,719,719,719,',
'719,719,,,,719,,,,,,,,,,,,,,,,,,,,719,,,719,,,719,719,,,719,,,,,,,,',
',,,,,,,,,,719,719,719,719,719,719,,,,719,719,,,,,,,719,,,719,719,719',
',,719,719,478,478,478,,478,,,,478,478,,,,478,,478,478,478,478,478,478',
'478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478,478,478',
'478,478,478,478,478,478,478,478,,478,478,,478,478,478,,,,,,,,,,,,,,',
',,,,,478,,,478,,,478,478,,,478,,478,,478,,478,,,,,,,,478,,,,,478,478',
'478,478,478,478,,,,478,478,,,,,,,478,,478,478,478,478,,,478,478,480',
'480,480,,480,,,,480,480,,,,480,,480,480,480,480,480,480,480,,,,,,480',
'480,480,480,480,480,480,,,480,,,,,,,480,,,480,480,480,480,480,480,480',
'480,,480,480,480,,480,480,,480,480,480,,,,,,,,,,,,,,,,,,,,480,,,480',
',,480,480,,,480,,,,,,480,,,,,,,,480,,,,,480,480,480,480,480,480,,,,480',
'480,,,,,,,480,,,480,480,480,,,480,480,481,481,481,,481,,,,481,481,,',
',481,,481,481,481,481,481,481,481,,,,,,481,481,481,481,481,481,481,',
',481,,,,,,,481,,,481,481,481,481,481,481,481,481,,481,481,481,,481,481',
',481,481,481,,,,,,,,,,,,,,,,,,,,481,,,481,,,481,481,,,481,,,,,,481,',
',,,,,,481,,,,,481,481,481,481,481,481,,,,481,481,,,,,,,481,,,481,481',
'481,,,481,481,482,482,482,,482,,,,482,482,,,,482,,482,482,482,482,482',
'482,482,,,,,,482,482,482,482,482,482,482,,,482,,,,,,,482,,,482,482,482',
'482,482,482,482,482,,482,482,482,,482,482,,482,482,482,,,,,,,,,,,,,',
',,,,,,482,,,482,,,482,482,,,482,,,,,,482,,,,,,,,482,,,,,482,482,482',
'482,482,482,,,,482,482,,,,,,,482,,,482,482,482,,,482,482,708,708,708',
',708,,,,708,708,,,,708,,708,708,708,708,708,708,708,,,,,,708,708,708',
'708,708,708,708,,,708,,,,,,,708,,,708,708,708,708,708,708,708,708,,708',
'708,708,,708,708,,,,708,,,,,,,,,,,,,,,,,,,,708,,,708,,,708,708,,,708',
',,,,,,,,,,,,,,,,,,708,708,708,708,708,708,,,,708,708,,,,,,,708,,,708',
'708,708,,,708,708,702,702,702,,702,,,,702,702,,,,702,,702,702,702,702',
'702,702,702,,,,,,702,702,702,702,702,702,702,,,702,,,,,,,702,,,702,702',
'702,702,702,702,702,702,,702,702,702,,702,702,,702,702,702,,,,,,,,,',
',,,,,,,,,,702,,,702,,,702,702,,,702,,,,,,702,,,,,,,,702,,,,,702,702',
'702,702,702,702,,,,702,702,,,,,,,702,,,702,702,702,,,702,702,679,679',
'679,,679,,,,679,679,,,,679,,679,679,679,679,679,679,679,,,,,,679,679',
'679,679,679,679,679,,,679,,,,,,,679,,,679,679,679,679,679,679,679,679',
',679,679,679,,679,679,,679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679',
'679,,,679,,,,,,679,,,,,,,,679,,,,,679,679,679,679,679,679,,,,679,679',
',,,,,,679,,,679,679,679,,,679,679,678,678,678,,678,,,,678,678,,,,678',
',678,678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,,,678',
',,,,,,678,,,678,678,678,678,678,678,678,678,,678,678,678,,678,678,,678',
'678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,,,,,678,,,,,,',
',678,,,,,678,678,678,678,678,678,,,,678,678,,,,,,,678,,,678,678,678',
',,678,678,591,591,591,,591,,,,591,591,,,,591,,591,591,591,591,591,591',
'591,,,,,,591,591,591,591,591,591,591,,,591,,,,,,,591,,,591,591,591,591',
'591,591,591,591,,591,591,591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,',
',,591,,,591,,,591,591,,,591,,,,,,591,,,,,,,,591,,,,,591,591,591,591',
'591,591,,,,591,591,,,,,,,591,,,591,591,591,,,591,591,672,672,672,,672',
',,,672,672,,,,672,,672,672,672,672,672,672,672,,,,,,672,672,672,672',
'672,672,672,,,672,,,,,,,672,,,672,672,672,672,672,672,672,672,,672,672',
'672,,672,672,,672,672,672,,,,,,,,,,,,,,,,,,,,672,,,672,,,672,672,,,672',
',,,,,672,,,,,,,,672,,,,,672,672,672,672,672,672,,,,672,672,,,,,,,672',
',,672,672,672,,,672,672,671,671,671,,671,,,,671,671,,,,671,,671,671',
'671,671,671,671,671,,,,,,671,671,671,671,671,671,671,,,671,,,,,,,671',
',,671,671,671,671,671,671,671,671,671,671,671,671,,671,671,,671,671',
'671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,,,671,,671,,,,,,,',
'671,,,,,671,671,671,671,671,671,,,,671,671,,,,,,,671,,671,671,671,671',
',,671,671,670,670,670,,670,,,,670,670,,,,670,,670,670,670,670,670,670',
'670,,,,,,670,670,670,670,670,670,670,,,670,,,,,,,670,,,670,670,670,670',
'670,670,670,670,670,670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,,',
',,,,,670,,,670,,,670,670,,,670,,670,,670,,670,,,,,,,,670,,,,,670,670',
'670,670,670,670,,,,670,670,,,,,,,670,,670,670,670,670,,,670,670,667',
'667,667,,667,,,,667,667,,,,667,,667,667,667,667,667,667,667,,,,,,667',
'667,667,667,667,667,667,,,667,,,,,,,667,,,667,667,667,667,667,667,667',
'667,,667,667,667,,667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667',
',,667,667,,,667,,,,,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667',
'667,,,,,,,667,,,667,667,667,,,667,667,666,666,666,666,666,,,,666,666',
',,,666,,666,666,666,666,666,666,666,,,,,,666,666,666,666,666,666,666',
',,666,,,,,,666,666,,666,666,666,666,666,666,666,666,666,,666,666,666',
',666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,',
'666,,,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666,666,,,,,,,666',
',,666,666,666,,,666,666,663,663,663,,663,,,,663,663,,,,663,,663,663',
'663,663,663,663,663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,,663',
',,663,663,663,663,663,663,663,663,663,663,663,663,,663,663,,663,663',
'663,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663,,663,,663,,663,,,,',
',,,663,,,,,663,663,663,663,663,663,,,,663,663,,,,,,,663,,663,663,663',
'663,,,663,663,662,662,662,,662,,,,662,662,,,,662,,662,662,662,662,662',
'662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662,662',
'662,662,662,662,662,,662,662,662,,662,662,,662,662,662,,,,,,,,,,,,,',
',,,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,662,,,,,662,662,662',
'662,662,662,,,,662,662,,,,,,,662,,,662,662,662,,,662,662,661,661,661',
',661,,,,661,661,,,,661,,661,661,661,661,661,661,661,,,,,,661,661,661',
'661,661,661,661,,,661,,,,,,,661,,,661,661,661,661,661,661,661,661,,661',
'661,661,,661,661,,661,661,661,,,,,,,,,,,,,,,,,,,,661,,,661,,,661,661',
',,661,,661,,,,661,,,,,,,,661,,,,,661,661,661,661,661,661,,,,661,661',
',,,,,,661,,,661,661,661,,,661,661,632,632,632,,632,,,,632,632,,,,632',
',632,632,632,632,632,632,632,,,,,,632,632,632,632,632,632,632,,,632',
',,,,,,632,,,632,632,632,632,632,632,632,632,,632,632,632,,632,632,,632',
'632,632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,,,,,632,,,,,,',
',632,,,,,632,632,632,632,632,632,,,,632,632,,,,,,,632,,,632,632,632',
',,632,632,626,626,626,,626,,,,626,626,,,,626,,626,626,626,626,626,626',
'626,,,,,,626,626,626,626,626,626,626,,,626,,,,,,,626,,,626,626,626,626',
'626,626,626,626,,626,626,626,,626,626,,626,626,626,,,,,,,,,,,,,,,,,',
',,626,,,626,,,626,626,,,626,,,,,,626,,,,,,,,626,,,,,626,626,626,626',
'626,626,,,,626,626,,,,,,,626,,,626,626,626,,,626,626,521,521,521,,521',
',,,521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521,521,521,521',
'521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,521,521',
'521,521,,521,521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521',
',,521,,521,,521,,521,,,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521',
',,,,,,521,,521,521,521,521,,,521,521,524,524,524,,524,,,,524,524,,,',
'524,,524,524,524,524,524,524,524,,,,,,524,524,524,524,524,524,524,,',
'524,,,,,,,524,,,524,524,524,524,524,524,524,524,524,524,524,524,,524',
'524,,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,,,524',
',524,,,,,,,,524,,,,,524,524,524,524,524,524,,,,524,524,,,,,,,524,,524',
'524,524,524,,,524,524,526,526,526,,526,,,,526,526,,,,526,,526,526,526',
'526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526',
'526,526,526,526,526,526,526,,526,526,526,,526,526,,526,526,526,,,,,',
',,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,,,526,,,,,526',
'526,526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526,,,526,526,531',
'531,531,531,531,,,,531,531,,,,531,,531,531,531,531,531,531,531,,,,,',
'531,531,531,531,531,531,531,,,531,,,,,,531,531,531,531,531,531,531,531',
'531,531,531,531,,531,531,531,,531,531,,531,531,531,,,,,,,,,,,,,,,,,',
',,531,,,531,,,531,531,,,531,,531,,,,531,,,,,,,,531,,,,,531,531,531,531',
'531,531,,,,531,531,,,,,,531,531,,,531,531,531,,,531,531,614,614,614',
',614,,,,614,614,,,,614,,614,614,614,614,614,614,614,,,,,,614,614,614',
'614,614,614,614,,,614,,,,,,,614,,,614,614,614,614,614,614,614,614,614',
'614,614,614,,614,614,,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614',
'614,,,614,,614,,614,,614,,,,,,,,614,,,,,614,614,614,614,614,614,,,,614',
'614,,,,,,,614,,614,614,614,614,,,614,614,539,539,539,,539,,,,539,539',
',,,539,,539,539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539',
',,539,,,,,,,539,,,539,539,539,539,539,539,539,539,,539,539,539,,539',
'539,,,,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,,,,,,,,,,,',
',,,,,,539,539,539,539,539,539,,,,539,539,,,,,,,539,,,539,539,539,,,539',
'539,541,541,541,,541,,,,541,541,,,,541,,541,541,541,541,541,541,541',
',,,,,541,541,541,541,541,541,541,,,541,,,,,,,541,,,541,541,541,541,541',
'541,541,541,541,541,541,541,,541,541,,541,541,541,,,,,,,,,,,,,,,,,,',
',541,,,541,,,541,541,,,541,,541,,541,,541,,,,,,,,541,,,,,541,541,541',
'541,541,541,,,,541,541,,,,,,,541,,541,541,541,541,30,,541,541,,,,30',
'30,30,,,30,30,30,742,30,742,742,742,742,742,,,,30,30,30,,,,742,,,,,30',
'30,,30,30,30,30,30,,,,,,,,,,742,,,,,,,,,,,742,742,,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,742,30,,30',
',30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,470,30,,30,,,,470',
'470,470,30,,470,470,470,740,470,740,740,740,740,740,,,,470,470,470,470',
',,740,,,,,470,470,,470,470,470,470,470,,,,,,,,,,740,,,,,,,,,740,740',
'740,740,,470,470,470,470,470,470,470,470,470,470,470,470,470,470,,,470',
'470,470,,,470,,,470,,,470,470,,470,740,470,,470,,470,470,470,470,470',
'470,470,,470,470,470,738,,738,738,738,738,738,,,,,,470,470,470,470,738',
'470,31,470,,,,,470,31,31,31,,,31,31,31,,31,,,,738,,,,,,31,31,,738,738',
'738,738,,,,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,,,738,,31,31,31',
'31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31',
',31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,,31,31,60,31,,31,,',
',60,60,60,31,,60,60,60,572,60,572,572,572,572,572,,,,,60,60,60,,,572',
',,,,60,60,,60,60,60,60,60,,,,,,,,,,572,,,,,,,,,572,572,572,572,,60,60',
'60,60,60,60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60,60,,60',
'572,60,,60,,60,60,60,60,60,60,60,,60,,60,1054,,1054,1054,1054,1054,1054',
',,,,,60,60,60,60,1054,60,469,60,,,,,60,469,469,469,,,469,469,469,,469',
',,,1054,,,,,469,469,469,469,,,1054,1054,,,,469,469,,469,469,469,469',
'469,,,,,,,,,,,,,,,,,,,,,,1054,,469,469,469,469,469,469,469,469,469,469',
'469,469,469,469,,,469,469,469,,,469,,,469,,,469,469,,469,,469,,469,',
'469,469,469,469,469,469,469,,469,469,469,1056,,1056,1056,1056,1056,1056',
',,,,,469,469,469,469,1056,469,460,469,,,,,469,460,460,460,,,460,460',
'460,,460,,,,1056,,,,,460,460,460,,,,1056,1056,,,,460,460,,460,460,460',
'460,460,,,,,,,,,,,,,,,,,,,,,,1056,,460,460,460,460,460,460,460,460,460',
'460,460,460,460,460,,,460,460,460,,,460,,460,460,,,460,460,,460,,460',
',460,,460,460,460,460,460,460,460,,460,460,460,,,,,,,,,,,,,460,460,508',
'460,,460,,,,508,508,508,460,,508,508,508,784,508,784,784,784,784,784',
',,,508,508,,,,,784,,,,,508,508,,508,508,508,508,508,,975,,975,975,975',
'975,975,,784,,,,,,,,975,784,784,784,784,,,,,,,,,,,,,508,,,,,975,,508',
',,,,508,508,975,975,975,975,,,784,,,,,,,,,,,,,,508,508,,,,,,,,,,,,,508',
',975,,,508,,,,,,,508,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,,,,426,426,426,426,426',
'426,426,426,426,426,,,,,,426,426,426,426,426,426,426,426,426,,,426,',
',,,,,,,426,426,,426,426,426,426,426,426,426,,,426,426,,,,426,426,426',
'426,,,,,,,,,,,,,,426,426,,426,426,426,426,426,426,426,426,426,426,426',
',,426,426,,,,,,,,,,426,,,,,,,,,426,,,,,426,658,658,658,658,658,658,658',
'658,658,658,658,658,658,658,658,658,658,658,658,658,658,658,658,658',
',,,658,658,658,658,658,658,658,658,658,658,,,,,,658,658,658,658,658',
'658,658,658,658,,,658,,,,,,,,,658,658,,658,658,658,658,658,658,658,',
',658,658,,,,658,658,658,658,,,,,,,,,,,,,,658,658,,658,658,658,658,658',
'658,658,658,658,658,658,,,658,658,,,,,,,,,,658,,,,,,,,,658,,,,,658,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
',,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11',
',11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,',
',,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11',
',,,,,,,,11,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12',
'12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,',
',,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,',
',12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12,786,786,786,786,786,786,786,786',
'786,786,786,786,786,786,786,786,786,786,786,786,786,786,786,786,,,,786',
'786,786,786,786,786,786,786,786,786,,,,,,786,786,786,786,786,786,786',
'786,786,,,786,,,,,,,,,786,786,,786,786,786,786,786,786,786,,,786,786',
',,,786,786,786,786,,,,,,,,,,,,,,786,786,,786,786,786,786,786,786,786',
'786,786,786,786,,,786,,,,,,,,,,,,,,,,,,,,786,,,,,786,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75',
'75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,',
',,,,75,75,,75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,',
',,75,75,,75,75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75',
',,,,75,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,,,,103,103,103,103,103,103,103,103,103',
'103,,,,,,103,103,103,103,103,103,103,103,103,103,103,103,,103,,,,,,',
'103,103,,103,103,103,103,103,103,103,,,103,103,,,,103,103,103,103,,',
',,,,,,,,,,,103,103,,103,103,103,103,103,103,103,103,103,103,103,,,103',
',,,,,,,,,1033,1033,,,1033,,,,,,103,,,1033,1033,103,1033,1033,1033,1033',
'1033,1033,1033,,,1033,1033,,,,1033,1033,1033,1033,,,,,,1033,,,,,,,,1033',
'1033,,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,,,1033',
',,,,,,,,,1028,1028,,,1028,,,,,,1033,,,1028,1028,1033,1028,1028,1028',
'1028,1028,1028,1028,,,1028,1028,,,,1028,1028,1028,1028,,,,,,1028,,,',
',,,,1028,1028,,1028,1028,1028,1028,1028,1028,1028,1028,1028,1028,1028',
',,1028,,,,,,,,,,552,552,,,552,,,,,,1028,,,552,552,1028,552,552,552,552',
'552,552,552,,,552,552,,,,552,552,552,552,,,,,,552,,,,,,,,552,552,,552',
'552,552,552,552,552,552,552,552,552,552,,,552,,,,,,,,,,477,477,,,477',
',,,,,552,,,477,477,552,477,477,477,477,477,477,477,,,477,477,,,,477',
'477,477,477,,,,,,477,,,,,,,,477,477,,477,477,477,477,477,477,477,477',
'477,477,477,,,477,,,,,,,,,,476,476,,,476,,,,,,477,,,476,476,477,476',
'476,476,476,476,476,476,,,476,476,,,,476,476,476,476,,,,,,476,,,,,,',
',476,476,,476,476,476,476,476,476,476,476,476,476,476,,,476,,,,,,,,',
',1034,1034,,,1034,,,,,,476,,,1034,1034,476,1034,1034,1034,1034,1034',
'1034,1034,,,1034,1034,,,,1034,1034,1034,1034,,,,,,1034,,,,,,,,1034,1034',
',1034,1034,1034,1034,1034,1034,1034,1034,1034,1034,1034,,,1034,,,,,',
',,,,542,542,,,542,,,,,,1034,,,542,542,1034,542,542,542,542,542,542,542',
',,542,542,,,,542,542,542,542,,,,,,542,,,,,,,,542,542,,542,542,542,542',
'542,542,542,542,542,542,542,,,542,,,,,,,,,,665,665,,,665,,,,,,542,,',
'665,665,542,665,665,665,665,665,665,665,,,665,665,,,,665,665,665,665',
',,,,,665,,,,,,,,665,665,,665,665,665,665,665,665,665,665,665,665,665',
',,665,,,,,,,,,,543,543,,,543,,,,,,665,,,543,543,665,543,543,543,543',
'543,543,543,,,543,543,,,,543,543,543,543,,,,,,543,,,,,,,,543,543,,543',
'543,543,543,543,543,543,543,543,543,543,,,543,,,,,,,,,,615,615,,,615',
',,,,,543,,,615,615,543,615,615,615,615,615,615,615,,,615,615,,,,615',
'615,615,615,,,,,,615,,,,,,,,615,615,,615,615,615,615,615,615,615,615',
'615,615,615,,,615,,,,,,,,,,775,775,,,775,,,,,,615,,,775,775,615,775',
'775,775,775,775,775,775,,,775,775,,,,775,775,775,775,,,,,,775,,,,,,',
',775,775,,775,775,775,775,775,775,775,775,775,775,775,,,775,,,,,,,,',
',664,664,,,664,,,,,,775,,,664,664,775,664,664,664,664,664,664,664,,',
'664,664,,,,664,664,664,664,,,,,,664,,,,,,,,664,664,,664,664,664,664',
'664,664,664,664,664,664,664,,978,664,978,978,978,978,978,,,,,278,278',
',,278,978,,,,,664,,,278,278,664,278,278,278,278,278,278,278,,,278,278',
'978,,,278,278,278,278,,,978,978,978,978,,,,,,,,278,278,,278,278,278',
'278,278,278,278,278,278,278,278,,,278,,,,,,,,,978,230,230,,,230,,,,',
',278,,,230,230,278,230,230,230,230,230,230,230,,,230,230,,,,230,230',
'230,230,,,,,,230,,,,,,,,230,230,,230,230,230,230,230,230,230,230,230',
'230,230,,,230,,,,,,,,,,229,229,,,229,,,,,,230,,,229,229,230,229,229',
'229,229,229,229,229,,,229,229,,,,229,229,229,229,,,,,,229,,,,,,,,229',
'229,,229,229,229,229,229,229,229,229,229,229,229,,,229,,,,,,,,,,616',
'616,,,616,,,,,,229,,,616,616,229,616,616,616,616,616,616,616,,,616,616',
',,,616,616,616,616,,,,,,616,,,,,,,,616,616,,616,616,616,616,616,616',
'616,616,616,616,616,,,616,,,,,,,,,,776,776,,,776,,,,,,616,,,776,776',
'616,776,776,776,776,776,776,776,,,776,776,,,,776,776,776,776,,,,,,776',
',,,,,,,776,776,,776,776,776,776,776,776,776,776,776,776,776,,,776,980',
',980,980,980,980,980,,,553,553,,,553,,,980,,,776,,,553,553,776,553,553',
'553,553,553,553,553,,,553,553,,,980,553,553,553,553,,,,,,553,980,980',
',,,,,553,553,,553,553,553,553,553,553,553,553,553,553,553,,356,553,356',
'356,356,356,356,,,,,,980,,,,356,,,,,553,,,,785,553,785,785,785,785,785',
',,,,,,356,356,827,785,827,827,827,827,827,356,356,356,356,,,,,1081,827',
'1081,1081,1081,1081,1081,,785,1058,,1058,1058,1058,1058,1058,1081,785',
'785,785,785,,,827,,1058,,,356,,,,827,827,827,827,,,1081,945,,945,945',
'945,945,945,,1058,,1081,1081,,,785,,945,,,1058,1058,827,,,,,,,,827,943',
',943,943,943,943,943,,945,,,,,,1081,,943,,,945,945,,,1058,941,,941,941',
'941,941,941,,,,,,,,943,,941,,,,,,,,,943,943,,,945,,,,,,,,,941,,,,,,',
',,941,941,941,941,,,,,,,,,943,,,,,,,,,,,,,,,,,,,,,,,,941' ]
        racc_action_check = arr = ::Array.new(26196, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1188,  3604,  1329,   nil,   559,   nil,   nil, 10614,  1474,
   nil, 23985, 24123,   792,   nil,   760,   742,   251,   795,   958,
   105,   nil,   -73,  6134,  2053,   817,   nil,   375,   nil,    75,
 22792, 23052,  6274,  6414,  6554,   nil,  2617,  6694,  6834,   nil,
   708,   133,   314,   772,   168,  7114,  7254,   502,  7394,   667,
  1138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 23180,   nil,    71,  7534,   nil,    64,   nil,  7674,  7814,   nil,
   nil,  7954,  8094,   674,   nil, 24399,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -70,   nil,   nil,   nil,   nil,   nil,   nil,   625,
   612,   611,   593, 24537,   nil,   nil,   nil,   nil,   nil,   nil,
   396,   nil,   nil,   792,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  8374,   nil,   nil,   nil,
   nil,  8514,  8654,  8794,  8934,  9074,   608,   nil,   567,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   578,   nil,  3040,  9354,  9494,  9634,  9774,  9914, 10054, 25632,
 25559,   nil, 10194, 10334, 10474,   nil,   nil,   962,    80,    83,
   650,   140,   553,   607,   nil, 10754,  2899,   593, 11034, 11174,
 11314, 11454, 11594, 11734, 11874, 12014, 12154, 12294, 12434, 12574,
 12714, 12854, 12994, 13134, 13274, 13414, 13554, 13694, 13834, 13974,
   nil,   nil,   nil,   nil, 14114,   nil,   nil,   nil, 25486,   nil,
   nil,   574, 14254,   nil,   nil,   574,   nil,   nil,   nil, 14394,
   nil,   nil, 14534,   nil,  1489,   nil,   534,   533,   nil, 14814,
   455, 14954,   nil, 15094, 15234,   nil,   nil,    64,   nil,   nil,
 15514,  1333,   nil,   317,  1912,   319,   326,   225, 15934,  1630,
   891,   927,  1210,  1291,   963,   nil,  1250,  1212,   -10,   nil,
   nil,   nil,  1245,   127,  1204, 16214,   nil,   320,  1263,   863,
   nil,  1261, 16774,   nil, 16914,  3181,   nil, 17054,  1230,   nil,
   465,   252,  1224, 17614,   nil,   nil, 25913,   614,    32,   -10,
 17754,  1348,  1207,   567,  1282,  1158,     5,     7,   893,  1215,
    14,  1243,   nil,   nil, 18034,   nil, 18174,   503,   474,   462,
   433,   432,   430,   106,   370,   235,   nil,   108,   nil,   nil,
   nil,   nil,   nil,   195,   nil,   319,   nil,   235,   nil,  1140,
   265,   nil,  1125,   200,   nil,  1120,   -27,   nil,  1111,   -41,
   nil,   304,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  2758, 23709,   nil,   nil,   nil,
   nil,  1120,   nil,   nil,  1102, 18734,  1092,   nil,   nil,  1078,
   nil,  1069,   141,  1171,   nil,   nil,  1066,   nil,   nil,   nil,
   nil,   nil,  1207,  1079,   nil,   nil,  1071,  1065,   -77,   390,
 23444,   nil,   nil,   nil,   660,   528,  1089,   nil,   nil, 23312,
 22920,   nil,   nil,   nil,    56,   nil, 24902, 24829, 19154,   170,
 19294, 19434, 19574,  3463,  3322,   446,   347,  1038,  1023,  1013,
  1011,  3604,  3745,   955,  3181,  3040,  2899,  2758,  2617,  2476,
   846,   869,  2335,  2194,  1912,   605,  1036,   nil, 23572,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   916,   908,   nil,
   nil, 21814,   nil,   nil, 21954,   nil, 22094,   nil,   nil,   nil,
   nil, 22234,  1489,   912,   894,   890,   nil,   nil,   861, 22514,
   862, 22654, 25048, 25194,   868,   857,   nil,  5294,   797,   nil,
  5434,  5574, 24756, 25851,   742,  1348,  5854,   909,   906,   940,
   nil,   nil,  5994,   nil,   nil,  5714,   nil,   804,   nil,   198,
   839,   nil, 23144,   nil,   799,   800,   nil,   806,   810,   813,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   801,   532,   nil,
   nil, 20274,   nil,   nil,   nil,   903,   nil,   nil,   nil,   907,
   nil,   nil,   908,  3886,   972,   nil,  2476,    24,   997,  1004,
   998,  1007,   nil,   nil, 22374, 25267, 25705,    32,   nil,   436,
   404,    11,   nil,   703,   nil,   937, 21674,   nil,   956,   nil,
   nil,   nil, 21534,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   164,   nil,   nil,   189,   nil,   nil,
   nil,   919,   nil,   nil,   933,   nil,   951,   nil, 23847,   nil,
   936, 21394, 21254, 21114, 25413, 25121, 20974, 20834,   391,   979,
 20694, 20554, 20414,  5154,   982,   nil,   nil,   nil, 20134, 19994,
   995,   nil,   nil,   241,   258,   264,     0,   996,   998,   nil,
   105,  1102,    65,   nil,  1035,   nil,  1144,   nil,   nil,  1028,
   nil,  1073, 19854,   nil,   nil,   nil,   nil,    54, 19714,  1037,
   nil,  1052,   127,   155,  1099,   304,  1102,  1107,  1070, 19014,
   nil,  1137,   -16,   288,   nil, 18874,   nil,   nil,  1089,   302,
   nil,   nil,    23,  1093,   165,   nil,   nil,   357, 22983,   nil,
 22884,   nil, 22756,   nil, 18594,   nil,   525,   nil,  1106,     6,
  1118,   nil,   nil,   nil,   nil,   603,   nil,  1232,   nil,   nil,
   nil,   nil,   nil,  1238,   nil, 18454,  1123,    25,    23,    24,
     8,  3745,   nil,   932,   nil, 25340, 25778, 18314,   nil,   nil,
   nil,   278,  4732,  5014, 23536, 25938, 24261,   -14,  1049,  1066,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1165, 17894,  1176,
   273,   279,   924,   132,   nil,  1630, 17474,   nil,  1191,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 17334,
 17194, 16634, 16494,   312, 16354,   nil,   nil, 25953,   nil,  3322,
   nil,   nil,  1223,   nil,   -51,   nil,   nil,   nil,  1208,   268,
   nil,   nil,   nil,   nil,   nil,   nil,  3463,   nil,  1212,  1257,
   nil,   nil,   nil,   nil,   nil,  4450,  4873,  -125,   -91,   -65,
   nil,   nil,   nil,   -43,    37,   nil,    52,    69,   nil,    84,
   nil,   nil,   116,   624,   150,   664,   nil,   321,   nil,   nil,
 16074,   nil,  1489,   341,   nil,   nil,    18,    31,   375,   461,
  1066,   nil,   308,  1771, 15794,   512,   479,   483,   370,   556,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   368,   383,   343,
   nil,   nil, 15654, 15374,  1771,   443,   461,   nil,   489,   495,
   499,   nil,   543,   527,   519, 14674,   nil,   nil,   nil,   nil,
  2053,  2335,   nil,   -11, 10894,   nil,   571,   677,  1334,   nil,
   nil, 26061,   nil, 26037,   nil, 26007,   nil,   591,   nil,   nil,
   nil,   nil,   197,   503,   583,   nil,    -7,   nil,   nil,  9214,
  2194,   nil,   nil,   715,   435,   nil,   nil,   nil,   nil,   nil,
   636,   nil,   318,   nil,   nil, 23566,   nil,   nil, 25475,   nil,
 25842,   nil,   nil,   647,  8234,   997,   703,   nil,   752,  4591,
   100,   499,   571,   707,   800,   nil,   nil,   nil,   318,   nil,
   nil,   nil,   641,   643,   646,   653,   654,   760,   656,   785,
  4309,   nil,   397,   nil,   nil,  4168,  4027,   665,   nil,   nil,
   666,   667,   674,   678,   nil,   681,   nil,   892, 24683,   nil,
   nil,   823,  6974, 24610, 24975,   -60,   nil,   801,   855,   nil,
   nil,   nil,   nil,   695,   721,   549,   nil,   nil,   nil,   864,
   872,   nil,   723,   nil, 23243,   nil, 23375,   nil, 25977,   nil,
   nil,   798,   800,   nil,   766,    -1,    33,    -9,  1207,   nil,
   778,   785,   nil,   nil,   nil,   944,   964,   965,  1178,    -8,
   nil, 25968,   nil,   nil,   nil,   nil,   402,   nil ]

racc_action_default = [
    -1,  -645,  -644,  -645,    -2,  -631,    -4,    -5,  -645,    -8,
    -9,  -645,  -645,  -645,   -35,  -645,  -645,   -39,  -645,  -645,
  -294,   -51,  -633,  -645,   -56,   -61,   -62,   -63,   -67,  -271,
  -271,  -271,  -308,  -341,  -342,   -79,  -644,   -83,   -91,   -93,
  -645,  -535,  -536,  -645,  -645,  -645,  -645,  -230,  -645,  -633,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -618,  -296,  -299,  -644,  -306,  -316,  -421,  -645,  -645,   -58,
   -58,  -631,  -645,  -326,  -333,  -645,  -343,  -344,  -346,  -347,
  -348,  -349,  -350,  -351,  -352,  -353,  -354,  -355,  -364,  -466,
  -467,  -468,  -469,  -470,  -471,  -644,  -474,  -644,  -644,  -644,
  -644,  -644,  -644,  -644,  -511,  -517,  -519,  -520,  -521,  -522,
  -616,  -524,  -525,  -617,  -527,  -528,  -529,  -530,  -531,  -532,
  -533,  -534,  -539,  -540,  1088,    -3,  -632,  -640,  -641,  -642,
    -7,  -645,  -645,  -645,  -645,  -645,  -645,   -23,  -645,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -134,  -135,
  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,
  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
   -28,  -131,  -644,  -645,  -645,  -645,  -645,  -645,  -644,  -645,
  -645,  -628,  -645,  -645,  -633,  -634,   -55,  -645,  -535,  -536,
  -645,  -294,  -645,  -645,  -236,  -645,  -644,  -645,  -645,  -645,
  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,
  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,
  -245,  -246,  -247,  -248,  -645,  -357,  -450,  -429,  -645,  -629,
  -630,   -68,  -645,  -315,  -356,  -645,  -443,  -445,   -74,  -644,
  -440,   -75,  -633,   -76,  -251,  -266,  -644,  -644,  -270,  -645,
  -276,  -645,  -611,  -645,  -645,   -77,   -78,  -631,   -16,   -17,
  -645,   -20,   -21,   -81,  -644,  -633,  -645,   -84,   -87,  -644,
   -99,  -100,  -645,  -645,  -107,  -308,  -311,  -633,  -433,  -341,
  -342,  -345,  -441,  -645,   -89,  -645,   -95,  -304,  -518,  -645,
  -224,  -225,  -645,  -237,  -645,  -644,  -298,  -645,  -645,  -252,
  -637,  -637,  -645,  -644,  -317,  -318,  -567,   -57,  -645,  -645,
  -645,  -644,  -644,  -631,  -645,  -632,  -535,  -536,  -645,  -645,
  -294,  -645,  -374,  -375,  -645,  -329,  -645,  -122,  -123,  -165,
  -166,  -167,  -183,  -188,  -195,  -198,  -336,  -645,  -535,  -536,
  -606,  -607,  -472,  -645,  -495,  -645,  -497,  -645,  -499,  -645,
  -645,  -479,  -645,  -645,  -485,  -645,  -645,  -491,  -645,  -645,
  -493,  -645,  -510,  -512,  -513,  -514,  -515,    -6,  -643,   -29,
   -30,   -31,   -32,   -33,   -10,  -644,  -645,   -25,   -26,   -27,
  -132,  -645,   -36,   -38,  -281,  -645,  -645,  -280,   -37,  -645,
   -40,  -645,  -294,   -48,   -50,  -206,  -256,  -276,   -52,   -53,
   -41,  -207,  -256,  -633,  -261,  -262,  -644,  -644,  -619,  -620,
  -271,  -438,  -621,  -622,  -620,  -619,  -271,  -437,  -439,  -621,
  -622,   -47,  -214,   -54,  -633,  -314,  -645,  -645,  -644,  -304,
  -645,  -645,  -645,  -215,  -216,  -217,  -218,  -219,  -220,  -221,
  -222,  -226,  -227,  -228,  -229,  -231,  -232,  -233,  -234,  -235,
  -238,  -239,  -240,  -241,  -633,  -249,  -645,  -451,  -271,  -619,
  -620,   -65,   -69,  -272,  -434,  -447,  -450,  -633,  -633,  -310,
  -267,  -645,  -275,  -268,  -645,  -273,  -645,  -277,  -614,  -615,
   -15,  -632,   -19,  -645,  -633,   -80,  -302,   -96,   -85,  -645,
  -633,  -644,  -645,  -645,  -106,  -645,  -518,  -645,   -92,   -97,
  -645,  -645,  -645,  -645,  -250,  -242,  -645,  -458,  -645,  -300,
  -635,  -253,  -639,  -638,  -255,  -639,  -305,  -645,  -609,  -637,
  -645,  -422,  -567,  -425,  -605,  -605,  -550,  -552,  -552,  -552,
  -566,  -568,  -569,  -570,  -571,  -572,  -573,  -574,  -645,  -576,
  -578,  -580,  -585,  -587,  -588,  -590,  -595,  -597,  -598,  -600,
  -601,  -602,  -645,  -644,  -365,  -366,  -644,  -645,  -645,  -645,
  -645,  -645,  -360,  -453,  -644,  -645,  -645,  -304,   -58,  -117,
  -118,  -645,  -120,  -645,  -294,  -644,  -645,  -334,  -545,  -338,
  -626,  -627,  -645,  -473,  -496,  -501,  -502,  -504,  -475,  -498,
  -476,  -500,  -477,  -478,  -645,  -481,  -483,  -645,  -484,  -487,
  -488,  -645,  -489,  -490,  -645,  -516,  -645,   -24,  -645,   -34,
  -284,  -645,  -645,  -644,  -645,  -645,  -645,  -645,  -442,  -645,
  -263,  -265,  -645,  -645,   -70,  -259,  -260,  -435,  -645,  -645,
   -72,  -436,  -313,  -619,  -620,  -619,  -620,  -633,  -645,  -428,
  -644,   -64,  -430,  -447,  -645,  -448,  -645,  -258,  -309,  -644,
  -274,  -278,  -645,  -612,  -613,   -18,   -22,   -82,  -645,   -88,
   -94,  -633,  -619,  -620,  -644,  -103,  -105,  -645,   -90,  -645,
  -213,  -223,  -633,  -644,  -358,  -644,  -297,  -363,  -633,  -637,
  -307,  -610,  -645,  -633,  -645,  -548,  -549,  -645,  -645,  -559,
  -645,  -562,  -645,  -564,  -645,  -376,  -645,  -378,  -380,  -387,
  -633,  -579,  -589,  -599,  -603,  -644,  -367,  -644,   -59,  -368,
  -369,  -321,  -322,  -645,  -324,  -645,  -633,  -619,  -620,  -623,
  -303,  -644,  -117,  -118,  -119,  -645,  -645,  -644,  -327,  -541,
  -543,  -330,  -644,  -644,  -567,  -567,  -645,  -633,  -645,  -644,
  -480,  -482,  -486,  -492,  -494,   -11,  -133,  -282,  -645,  -633,
  -619,  -620,  -620,  -619,   -49,  -257,  -645,  -636,  -644,   -43,
  -209,   -44,  -210,   -71,   -45,  -212,   -46,  -211,   -73,  -645,
  -645,  -645,  -645,  -442,  -645,  -410,  -411,  -633,  -413,  -644,
  -432,  -431,  -645,  -444,  -644,  -446,  -269,  -279,   -86,  -101,
   -98,  -312,   -12,   -14,  -359,  -361,  -644,  -465,  -459,  -644,
  -460,  -461,  -301,  -254,  -423,  -644,  -644,  -415,  -633,  -605,
  -586,  -604,  -551,  -552,  -552,  -577,  -552,  -552,  -596,  -552,
  -574,  -591,  -633,  -645,  -385,  -645,  -575,  -645,  -362,  -370,
  -645,  -372,  -644,  -645,   -60,  -323,  -645,  -442,  -645,  -117,
  -118,  -121,  -633,  -644,  -645,  -645,  -645,  -645,  -633,  -645,
  -339,  -608,  -503,  -506,  -507,  -508,  -509,  -645,  -283,  -442,
   -42,  -208,  -264,  -645,  -243,  -605,  -605,  -392,  -644,  -644,
  -644,  -409,  -645,  -633,  -574,  -582,  -583,  -593,  -452,   -66,
  -644,  -644,  -464,  -645,  -645,  -463,  -645,  -645,  -645,  -424,
  -547,  -645,  -555,  -645,  -557,  -645,  -560,  -645,  -563,  -565,
  -377,  -379,  -383,  -645,  -388,  -319,  -645,  -373,  -320,  -645,
  -644,  -325,  -442,  -645,  -645,  -331,  -335,  -337,  -544,  -546,
  -545,  -505,  -645,  -390,  -391,  -400,  -394,  -402,  -645,  -405,
  -645,  -407,  -412,  -645,  -645,  -581,  -645,  -449,  -644,  -644,
  -108,  -109,  -645,  -645,  -116,  -462,  -426,  -427,  -633,  -417,
  -419,  -420,  -552,  -552,  -552,  -552,  -381,  -645,  -386,  -645,
  -644,  -278,  -644,  -328,  -542,  -644,  -644,  -605,  -584,  -393,
  -644,  -644,  -644,  -644,  -594,  -644,  -414,  -592,  -645,  -304,
   -13,  -458,  -644,  -645,  -645,  -115,  -416,  -645,  -645,  -553,
  -556,  -558,  -561,  -645,  -384,  -644,  -454,  -455,  -456,  -645,
  -645,  -389,  -645,  -397,  -645,  -399,  -645,  -403,  -645,  -406,
  -408,  -303,  -623,  -457,  -633,  -619,  -620,  -623,  -114,  -418,
  -552,  -382,  -371,  -332,  -340,  -644,  -644,  -644,  -644,  -442,
  -554,  -645,  -395,  -398,  -401,  -404,  -644,  -396 ]

clist = [
'6,453,233,229,386,295,295,295,358,359,611,279,363,317,290,346,277,354',
'580,137,221,723,142,142,424,296,296,296,573,344,460,466,413,145,145',
'783,129,865,147,147,9,357,357,331,331,357,9,603,606,437,438,4,668,361',
'362,877,350,338,450,125,558,349,517,471,126,523,315,334,548,506,843',
'883,419,420,421,422,703,313,331,508,444,700,868,444,700,694,142,512',
'444,858,281,288,291,394,750,396,398,401,404,407,410,396,129,316,774',
'357,357,357,357,297,297,297,919,951,142,451,999,703,130,1024,472,376',
'829,561,564,364,2,236,293,305,306,395,954,1001,625,644,627,411,647,634',
'351,735,736,641,136,842,645,931,705,645,533,220,373,739,741,743,433',
'426,758,864,884,866,278,693,9,658,342,352,692,390,567,355,371,423,778',
'387,629,345,347,728,353,374,893,922,626,895,1015,475,29,1,782,628,786',
'1024,29,970,921,923,998,448,449,295,571,854,356,732,515,473,474,29,1008',
'516,834,461,690,1069,436,436,29,29,29,476,29,703,1046,523,454,765,849',
'933,700,700,1001,392,580,393,417,397,400,403,406,470,409,902,733,519',
'865,788,920,951,789,687,872,29,29,295,763,29,891,412,1020,894,295,832',
'1044,295,930,863,535,514,860,1018,709,632,865,296,,460,466,983,718,',
',868,,296,823,454,,431,,,,,522,522,,,,,1071,607,,,,,542,545,,696,839',
'549,29,316,711,,290,29,29,29,29,29,,552,331,,1047,432,443,,,443,,,357',
'1030,443,,129,,,331,731,714,534,1072,546,538,532,540,,568,615,714,,313',
',865,,297,313,530,1002,,,887,531,,472,297,451,,,,,,,1016,513,,331,316',
'331,,,559,316,766,518,,791,,,791,129,,1021,,909,1022,,,,,,,,,29,29,29',
'29,29,29,29,,714,610,29,29,29,706,,6,,664,940,682,608,609,569,,29,669',
'657,,799,142,720,942,944,838,946,948,676,949,580,580,145,,681,295,,147',
'522,522,898,899,675,,461,,,9,703,460,466,836,29,,697,698,700,1075,656',
'29,454,,29,,813,,973,974,688,,818,707,470,,,962,676,710,,1063,29,896',
'897,,29,,853,809,811,29,675,,,814,816,,,,295,549,,,444,,,674,,549,,',
'461,680,444,444,722,29,,29,444,444,461,,,454,,,,,,331,29,29,29,,892',
'850,,331,470,,,,,,810,812,,,470,,815,817,726,691,,937,,,,960,836,714',
'1039,1040,1041,1042,,,1051,,,295,,,,,,,,,,,699,461,781,,771,,,,787,',
'963,,,29,454,,,,,,761,762,,764,989,780,,,,470,,,,,,,,,295,910,759,729',
'861,,,861,831,1010,1080,,461,,,,,,,,,,1048,,,454,444,1079,29,,796,669',
',142,755,,,757,,841,470,,,,145,852,830,,549,147,,,825,,,669,,,911,840',
',522,676,,,681,,876,804,,,810,812,817,815,,675,857,331,900,,29,436,',
',847,,851,,331,,29,,,1049,1050,,917,,,,,,,901,,29,,,,669,808,,,295,',
',881,,881,,,886,,461,,,,,,443,,,,,,,885,,454,443,443,,669,,,443,443',
',,470,859,,29,,,29,,,,,142,,,29,911,,,,1064,522,857,867,,869,939,29',
',,,,,29,,,956,,,,950,,,,,,,825,,714,964,,,888,,,,,,,,,935,29,29,,968',
'29,,357,,907,,29,29,,,,,29,29,,,357,,32,,669,,,,32,,861,,916,917,,,917',
',917,955,,,,32,,958,,918,928,,961,,32,32,32,857,32,,966,967,,,443,,',
'932,,,976,976,976,,,,936,,,,965,,,,969,331,,,,32,32,,,32,331,,,,,,,',
',957,,,,,,,,29,917,,917,,917,29,917,,,,29,29,,,,1013,,29,1033,,1036',
',925,,,,,,847,917,,,331,,29,,32,1014,,987,988,32,32,32,32,32,,295,,',
',1003,881,1004,,1005,,29,,461,976,976,976,976,,976,,1017,,1012,916,',
'454,916,29,916,,,,,,470,,29,29,881,669,470,1023,,1025,,587,,,,,,1031',
',,1073,1074,,,977,979,981,29,,29,,,,,976,976,976,976,1045,,29,29,,,',
'976,,,,,,32,32,32,32,32,32,32,,,,32,32,32,,,916,1070,916,,916,,916,434',
'447,32,,29,29,,,1076,,1077,,1078,925,,,925,,,925,,925,916,,,,,,,,,,',
',29,,,1086,32,,,,,,,32,,,32,,,,,1053,1055,1057,1059,,1060,,,,,29,,,32',
',,,32,,,,,32,525,,527,,528,529,,,29,,,,,29,29,,,925,,925,,925,,925,',
'32,,32,,,29,,1082,1083,1084,1085,,,,,32,32,32,1087,,,925,,,19,,,,,570',
'19,,,,,,,,,,,,,,,237,,,,,,,,587,237,237,237,,19,322,322,,,,,,,,,745',
',,,,,,,,,,32,,,,,,,,,237,237,,,237,368,,,,,,,,,,,,,,,,,660,,,,,,,,,',
',,,,,,,,,,,,32,,,,,,,,,,,,,,,19,,,,,237,237,237,237,19,,,,,,,,,,,,,42',
',,,,,42,,,,,,,,,,32,,,,,,,,,,32,701,,,570,,704,,42,321,321,,,,,32,,',
',,,,,587,,587,,,,,,745,,,874,,,,,,,,701,,367,570,,389,19,237,441,237',
'237,441,237,,,,441,237,237,,32,,,32,,,,587,587,751,19,32,,,,,,,,,,,',
'32,,,,,,32,,,,,,,42,,,,,,,,,42,237,,,,924,,,237,,,237,,,32,32,,,32,',
',,,,32,32,,,,19,32,32,,19,797,,,322,19,,,,,701,570,,,,,,,745,,745,322',
',,,,,,,,,19,,19,,,,,,,,,837,,,,237,19,19,,,,,,42,,,,,,623,,623,,,848',
',,,,,,,,,,,,42,,,,,,871,,587,,,,32,,,,,,32,1006,745,,,32,32,,,447,,',
'32,,,19,,,,,,,,,924,,,924,,32,,,,,,,,,,,,,908,,,,42,,,,42,,32,,321,42',
'745,,745,,,,,,,,,,237,32,,321,,,,,,,32,32,,42,,42,,,,,,,,,745,,,,,42',
'42,,,924,,32,,32,,,20,,389,,389,,20,,32,32,,,,19,,,,,,,,322,,237,,,',
',,322,,,,,20,324,324,,237,,,,,,,32,32,,570,,,,,42,,,,,,,,,,,,,,,,,370',
',,,,32,,,,,,,,,,19,,,19,,,,,,,1011,237,,,,,,,,32,,,,237,,,,,,237,,,',
',,,,,,20,32,,,,,32,32,,20,,,,,,,,,,,441,237,41,32,19,,,,41,,441,441',
',,,42,441,441,,,,,,321,,,,,,,,321,,,,,41,320,320,,,,,,,,322,,,,,,,,',
',,322,,,,,,,,,,18,,,,,366,18,,388,20,,442,,,442,,,,,442,42,,,42,,,,',
',,,,,20,18,,,,,,,,19,,,,,,237,,,,,19,19,,,,,41,19,,,,,,,,41,,,,,,,,',
'441,,,,,,42,,,,,,,,,,,,,,20,,,19,20,,,,324,20,,,,,,,,,,,19,,,,,324,',
'18,321,19,19,,,,,20,18,20,,321,,,,,,,,,,,,20,20,,237,,19,,41,,,,,,624',
',624,19,237,,,,,,,,,,,,,,41,,,,,,,,,42,,,,,,,,985,,,42,42,19,19,,,992',
'42,,,,,,20,,,,,,,,18,,18,,,18,,,,,18,19,,,,,,,,,,,,41,18,,42,41,,,,320',
'41,,,1027,,,,,19,,,42,,,,,320,,,,42,42,,,,,41,,41,19,,,,,19,19,,,,,',
',41,41,,,,42,,,,237,,,,388,18,388,42,,18,,,,,18,20,,,,16,,,,324,,16',
',,,,,324,,,,,,,,389,18,,18,,42,42,,,991,,,,,16,,41,18,18,,,,,,,,,,,',
',,,,,42,,,,,,,,,,,,,20,,372,20,,,,,,,,389,,,,,42,,,,,,,,,,,,,,,,,18',
',,,42,,,,,42,42,,,,,,,,,,,,,16,,,442,,,,20,,16,,,,442,442,,,,41,442',
'442,,,,,,320,,,,,,,,320,,,,,,,,,,,,,,,324,,,,,,,,,,,324,,,,,,,,,,,,',
',,,,,,,,,,18,,,,,,,41,,,41,,,16,,439,,,439,,,,,439,,,,,,20,,,,,,,,16',
',,20,20,,,,,906,20,,,,,,,,,,,,,,,,,442,,,,,,41,,18,,,18,,,,,,,,,,,,20',
',,,,,,,,,,,,,16,,,20,16,,,,,16,,320,20,20,,,,,,,,,320,,,,,,,,18,,,,18',
'16,,16,,20,18,18,,,,,18,18,,,20,16,16,,,,,,,,,,,,,,,,,,,,,,41,,,,,,',
',624,,,41,41,20,20,,,994,41,,,,,,,,,,,,,,,,,,,,,,,16,,20,,,,,,,,,,,',
',,,41,,,,,,,18,,624,,,,,20,,,41,18,18,,,,,,18,41,41,,,,,,,,20,,,244',
',20,20,18,,,,,294,294,294,,,,41,,,,,,,340,341,,343,41,18,,,,,,,,,,,',
',294,,,,18,,,,,,,16,,18,18,,,,388,,,,,41,41,,,990,,,,,,,,,,,,,18,,,',
',,,,,,,18,,41,,,,,,,,,,,,,,,,,,,,,,,,388,,,,,41,16,,,16,,18,18,,,,,',
',,,,,,,,41,,,,,41,41,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,,439,,,,16,18',
',,,,439,439,,,,,439,439,294,446,,,452,294,,,18,452,,,,18,18,,,,,,,,244',
',,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499',
'500,501,502,503,504,,,,,505,,,,,,,,294,,,,,,,294,,,294,,,,,,,294,,294',
',294,294,,,,,,,,,,16,,,,,,,,,,,16,16,,,,,,16,,,,,,,,,,554,,555,,,,,439',
',,,294,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,,,,,,,16,,,,,,,,,16,16,,,,,,,',
',,,,,,,,,,,,,,,,,,16,,,,,,,,,,294,16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,16,16,,,995,294,,452,452,452,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,',
',,,,,,294,,,294,,294,,,,,,16,,,,,,,,,294,,,,,,,,,452,721,,16,,,,,16',
'16,,,294,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,294',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,452,294,,,,805,,,294',
'294,452,452,,,,,452,452,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,',
',,,,294,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,294',
',,,,,,,,,,,,,,,,,,,,294,,,,,,,,452,,,,,,,,,,,,,452,452,452,452,,914',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,294,452,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,294' ]
        racc_goto_table = arr = ::Array.new(3774, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,35,39,37,69,45,45,45,23,23,114,37,23,62,86,60,170,103,201,21,21,14',
'70,70,10,83,83,83,169,39,49,49,69,73,73,122,119,206,74,74,9,30,30,79',
'79,30,9,107,107,28,28,2,36,41,41,108,83,77,32,5,12,6,35,32,8,88,59,63',
'64,171,16,110,23,23,23,23,216,58,79,49,24,89,211,24,89,52,70,51,24,161',
'50,50,50,6,147,6,6,6,6,6,6,6,119,13,67,30,30,30,30,85,85,85,157,145',
'70,76,163,216,7,212,76,134,159,84,84,5,3,26,57,57,57,188,148,164,68',
'191,68,188,191,192,85,152,152,192,11,15,192,17,19,192,20,22,25,204,204',
'204,29,31,42,158,44,158,48,54,9,75,80,82,87,99,102,105,116,9,118,123',
'124,125,126,127,128,129,130,161,131,132,133,60,53,1,135,136,137,212',
'53,138,149,155,162,30,30,45,165,166,167,168,174,30,30,53,148,175,177',
'86,179,163,83,83,53,53,53,37,53,216,180,88,6,181,182,183,89,89,164,186',
'201,187,7,189,190,193,194,70,195,196,169,60,206,197,158,145,198,35,147',
'53,53,45,114,53,67,199,157,200,45,52,148,45,159,205,60,86,208,209,64',
'215,206,83,,49,49,161,64,,,211,,83,36,6,,13,,,,,6,6,,,,,148,23,,,,,37',
'39,,171,36,62,53,13,35,,86,53,53,53,53,53,,37,79,,110,26,26,,,26,,,30',
'16,26,,119,,,79,84,49,59,108,77,63,9,59,,6,37,49,,58,,206,,85,58,5,158',
',,36,8,,76,85,76,,,,,,,122,57,,79,13,79,,,9,13,35,57,,192,,,192,119',
',158,,36,158,,,,,,,,,53,53,53,53,53,53,53,,49,5,53,53,53,10,,6,,37,152',
'60,13,13,85,,53,39,21,,35,70,76,204,204,64,204,204,86,204,201,201,73',
',86,45,,74,6,6,169,169,6,,86,,,9,216,49,49,88,53,,60,60,89,158,2,53',
'6,,53,,51,,152,152,39,,51,60,70,,,36,86,60,,14,53,12,12,,53,,84,32,32',
'53,6,,,32,32,,,,45,62,,,24,,,50,,62,,,86,50,24,24,30,53,,53,24,24,86',
',,6,,,,,,79,53,53,53,,35,28,,79,70,,,,,,76,76,,,70,,76,76,101,50,,12',
',,,107,88,49,204,204,204,204,,,152,,,45,,,,,,,,,,,85,86,30,,41,,,,30',
',12,,,53,6,,,,,,101,101,,101,107,6,,,,70,,,,,,,,,45,32,119,85,153,,',
'153,103,107,204,,86,,,,,,,,,,114,,,6,24,36,53,,21,39,,70,13,,,13,,60',
'70,,,,73,60,170,,62,74,,,6,,,39,,,76,62,,6,86,,,86,,60,9,,,76,76,76',
'76,,6,39,79,69,,53,83,,,6,,6,,79,,53,,,12,12,,153,,,,,,,60,,53,,,,39',
'85,,,45,,,6,,6,,,83,,86,,,,,,26,,,,,,,101,,6,26,26,,39,,,26,26,,,70',
'151,,53,,,53,,,,,70,,,53,76,,,,35,6,39,156,,156,60,53,,,,,,53,,,23,',
',,60,,,,,,,6,,49,23,,,13,,,,,,,,,6,53,53,,60,53,,30,,13,,53,53,,,,,53',
'53,,,30,,56,,39,,,,56,,153,,151,153,,,153,,153,101,,,,56,,101,,156,13',
',101,,56,56,56,39,56,,101,101,,,26,,,13,,,6,6,6,,,,13,,,,119,,,,119',
'79,,,,56,56,,,56,79,,,,,,,,,13,,,,,,,,53,153,,153,,153,53,153,,,,53',
'53,,,,101,,53,37,,39,,207,,,,,,6,153,,,79,,53,,56,119,,13,13,56,56,56',
'56,56,,45,,,,156,6,156,,156,,53,,86,6,6,6,6,,6,,151,,13,151,,6,151,53',
'151,,,,,,70,,53,53,6,39,70,156,,156,,146,,,,,,13,,,101,101,,,154,154',
'154,53,,53,,,,,6,6,6,6,13,,53,53,,,,6,,,,,,56,56,56,56,56,56,56,,,,56',
'56,56,,,151,156,151,,151,,151,81,81,56,,53,53,,,156,,156,,156,207,,',
'207,,,207,,207,151,,,,,,,,,,,,53,,,156,56,,,,,,,56,,,56,,,,,154,154',
'154,154,,154,,,,,53,,,56,,,,56,,,,,56,81,,81,,81,81,,,53,,,,,53,53,',
',207,,207,,207,,207,,56,,56,,,53,,154,154,154,154,,,,,56,56,56,154,',
',207,,,34,,,,,81,34,,,,,,,,,,,,,,,34,,,,,,,,146,34,34,34,,34,34,34,',
',,,,,,,146,,,,,,,,,,,56,,,,,,,,,34,34,,,34,34,,,,,,,,,,,,,,,,,81,,,',
',,,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,34,,,,,34,34,34,34,34,,,,,,,,,,,',
',66,,,,,,66,,,,,,,,,,56,,,,,,,,,,56,81,,,81,,81,,66,66,66,,,,,56,,,',
',,,,146,,146,,,,,,146,,,146,,,,,,,,81,,66,81,,66,34,34,34,34,34,34,34',
',,,34,34,34,,56,,,56,,,,146,146,81,34,56,,,,,,,,,,,,56,,,,,,56,,,,,',
',66,,,,,,,,,66,34,,,,146,,,34,,,34,,,56,56,,,56,,,,,,56,56,,,,34,56',
'56,,34,81,,,34,34,,,,,81,81,,,,,,,146,,146,34,,,,,,,,,,34,,34,,,,,,',
',,81,,,,34,34,34,,,,,,66,,,,,,34,,34,,,81,,,,,,,,,,,,,66,,,,,,81,,146',
',,,56,,,,,,56,146,146,,,56,56,,,81,,,56,,,34,,,,,,,,,146,,,146,,56,',
',,,,,,,,,,,81,,,,66,,,,66,,56,,66,66,146,,146,,,,,,,,,,34,56,,66,,,',
',,,56,56,,66,,66,,,,,,,,,146,,,,,66,66,,,146,,56,,56,,,38,,66,,66,,38',
',56,56,,,,34,,,,,,,,34,,34,,,,,,34,,,,,38,38,38,,34,,,,,,,56,56,,81',
',,,,66,,,,,,,,,,,,,,,,,38,,,,,56,,,,,,,,,,34,,,34,,,,,,,81,34,,,,,,',
',56,,,,34,,,,,,34,,,,,,,,,,38,56,,,,,56,56,,38,,,,,,,,,,,34,34,65,56',
'34,,,,65,,34,34,,,,66,34,34,,,,,,66,,,,,,,,66,,,,,65,65,65,,,,,,,,34',
',,,,,,,,,,34,,,,,,,,,,33,,,,,65,33,,65,38,,38,,,38,,,,,38,66,,,66,,',
',,,,,,,38,33,,,,,,,,34,,,,,,34,,,,,34,34,,,,,65,34,,,,,,,,65,,,,,,,',
',34,,,,,,66,,,,,,,,,,,,,,38,,,34,38,,,,38,38,,,,,,,,,,,34,,,,,38,,33',
'66,34,34,,,,,38,33,38,,66,,,,,,,,,,,,38,38,,34,,34,,65,,,,,,38,,38,34',
'34,,,,,,,,,,,,,,65,,,,,,,,,66,,,,,,,,34,,,66,66,34,34,,,34,66,,,,,,38',
',,,,,,,33,,33,,,33,,,,,33,34,,,,,,,,,,,,65,33,,66,65,,,,65,65,,,34,',
',,,34,,,66,,,,,65,,,,66,66,,,,,65,,65,34,,,,,34,34,,,,,,,65,65,,,,66',
',,,34,,,,65,33,65,66,,33,,,,,33,38,,,,27,,,,38,,27,,,,,,38,,,,,,,,66',
'33,,33,,66,66,,,66,,,,,27,,65,33,33,,,,,,,,,,,,,,,,,66,,,,,,,,,,,,,38',
',27,38,,,,,,,,66,,,,,66,,,,,,,,,,,,,,,,,33,,,,66,,,,,66,66,,,,,,,,,',
',,,27,,,38,,,,38,,27,,,,38,38,,,,65,38,38,,,,,,65,,,,,,,,65,,,,,,,,',
',,,,,,38,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,65,,,65,,,27,,27',
',,27,,,,,27,,,,,,38,,,,,,,,27,,,38,38,,,,,38,38,,,,,,,,,,,,,,,,,38,',
',,,,65,,33,,,33,,,,,,,,,,,,38,,,,,,,,,,,,,,27,,,38,27,,,,,27,,65,38',
'38,,,,,,,,,65,,,,,,,,33,,,,33,27,,27,,38,33,33,,,,,33,33,,,38,27,27',
',,,,,,,,,,,,,,,,,,,,,65,,,,,,,,38,,,65,65,38,38,,,38,65,,,,,,,,,,,,',
',,,,,,,,,,27,,38,,,,,,,,,,,,,,,65,,,,,,,33,,38,,,,,38,,,65,33,33,,,',
',,33,65,65,,,,,,,,38,,,40,,38,38,33,,,,,40,40,40,,,,65,,,,,,,40,40,',
'40,65,33,,,,,,,,,,,,,40,,,,33,,,,,,,27,,33,33,,,,65,,,,,65,65,,,65,',
',,,,,,,,,,,33,,,,,,,,,,,33,,65,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,65,27,',
',27,,33,33,,,,,,,,,,,,,,65,,,,,65,65,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,',
',,,27,,,,27,33,,,,,27,27,,,,,27,27,40,40,,,40,40,,,33,40,,,,33,33,,',
',,,,,40,,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,,,,,40,,,,,,,,40,,,,,,,40,,,40,,,,,,,40,,40,,40,40,,,,,,,,,,27',
',,,,,,,,,,27,27,,,,,,27,,,,,,,,,,40,,40,,,,,27,,,,40,,,,,,,,,,,,,,,',
',,,27,,,,,,,,,,,,,,,,,27,,,,,,,,,27,27,,,,,,,,,,,,,,,,,,,,,,,,,,27,',
',,,,,,,,40,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,27,,,27,40,,40',
'40,40,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,27,,',
',,,,,,40,,,,,,,,,40,40,,27,,,,,27,27,,,40,,,40,,,,,,,,,,,,,,,,,,,,,',
',,,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,40,40,40,,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,',
',,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,',
',,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,40,,,,,,,,,,,,,40',
'40,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3774, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   189,    49,   126,   nil,    54,    -2,   110,    59,    38,
  -112,   134,  -285,    67,  -536,  -578,  -653,  -695,   nil,  -383,
  -162,     8,   139,   -59,  -144,    80,   104,  2284,  -174,   -67,
   -26,    20,  -169,  1962,  1235,  -227,  -401,   -16,  1751,   -20,
  2741,   -16,  -449,   nil,  -598,   -27,   nil,   nil,   135,  -199,
    61,  -194,  -430,   186,  -348,   nil,   868,    96,    41,    30,
   -47,   nil,   -24,    29,  -267,  1897,  1381,  -517,  -240,   -71,
    11,   nil,   nil,    22,    27,  -265,  -112,    13,   nil,     6,
   119,   889,   104,    -7,  -227,    77,   -16,  -340,  -232,  -440,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,
   nil,    10,  -183,   -48,   nil,   105,   nil,  -311,  -700,   nil,
  -686,   nil,   nil,   nil,  -354,   nil,   100,   nil,  -451,    31,
   nil,   nil,  -593,   100,  -211,   116,   116,  -380,   116,   108,
  -596,  -191,  -596,  -779,    47,  -437,  -195,  -437,  -705,   nil,
   nil,   nil,   nil,   nil,   nil,  -760,   694,  -494,  -743,  -631,
   nil,    53,  -433,   -94,   145,  -630,    68,  -715,  -579,  -568,
   nil,  -644,  -740,  -822,  -805,  -154,  -529,   138,  -366,  -328,
    -9,  -207,   nil,   nil,   -80,   -76,   nil,  -483,   nil,  -293,
  -788,  -386,  -497,  -620,   nil,   nil,   141,   140,    34,   139,
   139,  -265,  -254,   139,   139,   140,  -545,  -389,  -387,   156,
  -518,  -338,   nil,   nil,  -424,  -471,  -701,   153,  -464,  -701,
   nil,  -658,  -859,   nil,   nil,  -118,  -448 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   308,     7,   365,   311,
   nil,   nil,   nil,   557,   nil,   nil,   nil,   nil,   307,   309,
   nil,   nil,   nil,   nil,    14,    15,    21,   242,   nil,   nil,
    17,   nil,   440,   243,   339,   nil,   nil,   776,   241,   348,
    24,   nil,   nil,   360,   nil,    25,    26,    27,   nil,   717,
   nil,   nil,   nil,   328,   nil,    28,   325,   455,    35,   nil,
   nil,    37,    40,    39,   nil,   238,   239,   622,   nil,   144,
   463,   143,   146,    90,    91,   nil,   445,   105,    47,    50,
   274,   300,   nil,   456,   nil,   457,   468,   677,   520,   298,
   282,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    61,   nil,   nil,   283,    65,   nil,    67,   nil,   nil,    68,
   879,    69,    70,    71,   nil,    72,   nil,    73,   nil,   604,
    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,
   276,   725,   846,   613,   880,   747,   870,   nil,   748,  1019,
   915,   575,   nil,   576,   nil,   nil,   577,   nil,   579,   nil,
   826,   nil,   nil,   nil,   585,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   467,   285,   nil,   nil,   695,   nil,   507,   nil,
   nil,   nil,   nil,   nil,    89,    92,    94,   nil,   nil,   nil,
   nil,   nil,   639,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   862,   785,   574,   nil,   578,   589,   591,   592,   926,
   595,   596,   927,   599,   602,   nil,   302 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_8,
  0, 155, :_reduce_9,
  3, 151, :_reduce_10,
  3, 154, :_reduce_11,
  0, 161, :_reduce_12,
  6, 156, :_reduce_13,
  3, 156, :_reduce_14,
  2, 157, :_reduce_15,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_18,
  2, 162, :_reduce_19,
  1, 163, :_reduce_none,
  0, 164, :_reduce_21,
  3, 163, :_reduce_22,
  0, 175, :_reduce_23,
  4, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  2, 153, :_reduce_28,
  3, 153, :_reduce_29,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  3, 153, :_reduce_32,
  3, 153, :_reduce_33,
  4, 153, :_reduce_34,
  1, 153, :_reduce_none,
  3, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  1, 153, :_reduce_none,
  3, 168, :_reduce_40,
  3, 168, :_reduce_41,
  6, 168, :_reduce_42,
  5, 168, :_reduce_43,
  5, 168, :_reduce_44,
  5, 168, :_reduce_45,
  5, 168, :_reduce_46,
  3, 168, :_reduce_47,
  1, 176, :_reduce_48,
  3, 176, :_reduce_49,
  1, 176, :_reduce_none,
  1, 174, :_reduce_none,
  3, 174, :_reduce_52,
  3, 174, :_reduce_53,
  3, 174, :_reduce_54,
  2, 174, :_reduce_55,
  1, 174, :_reduce_none,
  1, 167, :_reduce_57,
  0, 187, :_reduce_58,
  0, 188, :_reduce_59,
  4, 185, :_reduce_60,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 190, :_reduce_none,
  4, 190, :_reduce_64,
  0, 198, :_reduce_65,
  4, 195, :_reduce_66,
  1, 197, :_reduce_67,
  2, 189, :_reduce_68,
  3, 189, :_reduce_69,
  4, 189, :_reduce_70,
  5, 189, :_reduce_71,
  4, 189, :_reduce_72,
  5, 189, :_reduce_73,
  2, 189, :_reduce_74,
  2, 189, :_reduce_75,
  2, 189, :_reduce_76,
  2, 189, :_reduce_77,
  2, 189, :_reduce_78,
  1, 169, :_reduce_none,
  3, 169, :_reduce_80,
  1, 203, :_reduce_none,
  3, 203, :_reduce_82,
  1, 202, :_reduce_83,
  2, 202, :_reduce_84,
  3, 202, :_reduce_85,
  5, 202, :_reduce_86,
  2, 202, :_reduce_87,
  4, 202, :_reduce_88,
  2, 202, :_reduce_89,
  4, 202, :_reduce_90,
  1, 202, :_reduce_91,
  3, 202, :_reduce_92,
  1, 206, :_reduce_none,
  3, 206, :_reduce_94,
  2, 205, :_reduce_95,
  3, 205, :_reduce_96,
  1, 208, :_reduce_97,
  3, 208, :_reduce_98,
  1, 207, :_reduce_99,
  1, 207, :_reduce_100,
  4, 207, :_reduce_101,
  3, 207, :_reduce_102,
  3, 207, :_reduce_103,
  3, 207, :_reduce_104,
  3, 207, :_reduce_105,
  2, 207, :_reduce_106,
  1, 207, :_reduce_107,
  1, 171, :_reduce_108,
  1, 171, :_reduce_109,
  4, 171, :_reduce_110,
  3, 171, :_reduce_111,
  3, 171, :_reduce_112,
  3, 171, :_reduce_113,
  3, 171, :_reduce_114,
  2, 171, :_reduce_115,
  1, 171, :_reduce_116,
  1, 211, :_reduce_117,
  1, 211, :_reduce_none,
  2, 212, :_reduce_119,
  1, 212, :_reduce_120,
  3, 212, :_reduce_121,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_125,
  1, 213, :_reduce_126,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 165, :_reduce_129,
  1, 165, :_reduce_none,
  1, 166, :_reduce_131,
  0, 219, :_reduce_132,
  4, 166, :_reduce_133,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  3, 184, :_reduce_206,
  3, 184, :_reduce_207,
  6, 184, :_reduce_208,
  5, 184, :_reduce_209,
  5, 184, :_reduce_210,
  5, 184, :_reduce_211,
  5, 184, :_reduce_212,
  4, 184, :_reduce_213,
  3, 184, :_reduce_214,
  3, 184, :_reduce_215,
  3, 184, :_reduce_216,
  3, 184, :_reduce_217,
  3, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 184, :_reduce_221,
  3, 184, :_reduce_222,
  4, 184, :_reduce_223,
  2, 184, :_reduce_224,
  2, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  1, 184, :_reduce_none,
  3, 184, :_reduce_231,
  3, 184, :_reduce_232,
  3, 184, :_reduce_233,
  3, 184, :_reduce_234,
  3, 184, :_reduce_235,
  2, 184, :_reduce_236,
  2, 184, :_reduce_237,
  3, 184, :_reduce_238,
  3, 184, :_reduce_239,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  6, 184, :_reduce_243,
  1, 184, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  3, 222, :_reduce_249,
  3, 222, :_reduce_250,
  1, 225, :_reduce_251,
  1, 226, :_reduce_none,
  2, 226, :_reduce_253,
  4, 226, :_reduce_254,
  2, 226, :_reduce_255,
  1, 220, :_reduce_none,
  3, 220, :_reduce_257,
  3, 230, :_reduce_258,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 179, :_reduce_261,
  1, 179, :_reduce_262,
  2, 179, :_reduce_263,
  4, 179, :_reduce_264,
  2, 179, :_reduce_265,
  1, 201, :_reduce_266,
  2, 201, :_reduce_267,
  2, 201, :_reduce_268,
  4, 201, :_reduce_269,
  1, 201, :_reduce_270,
  0, 234, :_reduce_271,
  2, 194, :_reduce_272,
  2, 233, :_reduce_273,
  2, 232, :_reduce_274,
  1, 232, :_reduce_none,
  1, 227, :_reduce_276,
  2, 227, :_reduce_277,
  3, 227, :_reduce_278,
  4, 227, :_reduce_279,
  1, 173, :_reduce_280,
  1, 173, :_reduce_281,
  3, 172, :_reduce_282,
  4, 172, :_reduce_283,
  2, 172, :_reduce_284,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_295,
  0, 269, :_reduce_296,
  4, 223, :_reduce_297,
  2, 223, :_reduce_298,
  0, 270, :_reduce_299,
  0, 271, :_reduce_300,
  5, 223, :_reduce_301,
  3, 223, :_reduce_302,
  3, 223, :_reduce_303,
  2, 223, :_reduce_304,
  3, 223, :_reduce_305,
  0, 272, :_reduce_306,
  4, 223, :_reduce_307,
  1, 223, :_reduce_308,
  4, 223, :_reduce_309,
  3, 223, :_reduce_310,
  1, 223, :_reduce_311,
  5, 223, :_reduce_312,
  4, 223, :_reduce_313,
  3, 223, :_reduce_314,
  2, 223, :_reduce_315,
  1, 223, :_reduce_none,
  2, 223, :_reduce_317,
  2, 223, :_reduce_318,
  6, 223, :_reduce_319,
  6, 223, :_reduce_320,
  4, 223, :_reduce_321,
  4, 223, :_reduce_322,
  5, 223, :_reduce_323,
  4, 223, :_reduce_324,
  6, 223, :_reduce_325,
  0, 273, :_reduce_326,
  0, 274, :_reduce_327,
  7, 223, :_reduce_328,
  0, 275, :_reduce_329,
  0, 276, :_reduce_330,
  0, 277, :_reduce_331,
  9, 223, :_reduce_332,
  0, 278, :_reduce_333,
  0, 279, :_reduce_334,
  6, 223, :_reduce_335,
  0, 280, :_reduce_336,
  6, 223, :_reduce_337,
  0, 281, :_reduce_338,
  0, 282, :_reduce_339,
  9, 223, :_reduce_340,
  1, 223, :_reduce_341,
  1, 223, :_reduce_342,
  1, 223, :_reduce_343,
  1, 223, :_reduce_344,
  1, 178, :_reduce_345,
  1, 244, :_reduce_none,
  1, 250, :_reduce_none,
  1, 253, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 259, :_reduce_none,
  1, 261, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 283, :_reduce_none,
  1, 284, :_reduce_none,
  1, 285, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 159, :_reduce_none,
  1, 288, :_reduce_none,
  1, 245, :_reduce_none,
  1, 200, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  2, 251, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 252, :_reduce_none,
  5, 252, :_reduce_371,
  1, 254, :_reduce_none,
  2, 254, :_reduce_373,
  1, 260, :_reduce_none,
  1, 260, :_reduce_375,
  1, 289, :_reduce_none,
  3, 289, :_reduce_377,
  1, 292, :_reduce_378,
  3, 292, :_reduce_379,
  1, 291, :_reduce_380,
  4, 291, :_reduce_381,
  6, 291, :_reduce_382,
  3, 291, :_reduce_383,
  5, 291, :_reduce_384,
  2, 291, :_reduce_385,
  4, 291, :_reduce_386,
  1, 291, :_reduce_387,
  3, 291, :_reduce_388,
  4, 293, :_reduce_389,
  2, 293, :_reduce_390,
  2, 293, :_reduce_391,
  1, 293, :_reduce_392,
  2, 298, :_reduce_393,
  1, 298, :_reduce_none,
  6, 299, :_reduce_395,
  8, 299, :_reduce_396,
  4, 299, :_reduce_397,
  6, 299, :_reduce_398,
  4, 299, :_reduce_399,
  2, 299, :_reduce_400,
  6, 299, :_reduce_401,
  2, 299, :_reduce_402,
  4, 299, :_reduce_403,
  6, 299, :_reduce_404,
  2, 299, :_reduce_405,
  4, 299, :_reduce_406,
  2, 299, :_reduce_407,
  4, 299, :_reduce_408,
  1, 299, :_reduce_409,
  1, 303, :_reduce_410,
  1, 303, :_reduce_411,
  3, 304, :_reduce_412,
  1, 304, :_reduce_413,
  4, 304, :_reduce_414,
  1, 305, :_reduce_none,
  4, 305, :_reduce_416,
  1, 306, :_reduce_417,
  3, 306, :_reduce_418,
  1, 307, :_reduce_419,
  1, 307, :_reduce_none,
  0, 311, :_reduce_421,
  0, 312, :_reduce_422,
  4, 249, :_reduce_423,
  4, 309, :_reduce_424,
  1, 309, :_reduce_425,
  3, 310, :_reduce_426,
  3, 310, :_reduce_427,
  3, 314, :_reduce_428,
  2, 191, :_reduce_429,
  4, 191, :_reduce_430,
  5, 191, :_reduce_431,
  5, 191, :_reduce_432,
  0, 317, :_reduce_433,
  3, 248, :_reduce_434,
  4, 248, :_reduce_435,
  4, 248, :_reduce_436,
  3, 248, :_reduce_437,
  3, 248, :_reduce_438,
  3, 248, :_reduce_439,
  2, 248, :_reduce_440,
  1, 248, :_reduce_441,
  4, 248, :_reduce_442,
  0, 318, :_reduce_443,
  4, 247, :_reduce_444,
  0, 319, :_reduce_445,
  4, 247, :_reduce_446,
  0, 320, :_reduce_447,
  0, 321, :_reduce_448,
  4, 196, :_reduce_449,
  0, 322, :_reduce_450,
  0, 323, :_reduce_451,
  4, 315, :_reduce_452,
  0, 325, :_reduce_453,
  6, 258, :_reduce_454,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  6, 158, :_reduce_457,
  0, 158, :_reduce_458,
  1, 326, :_reduce_459,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  2, 327, :_reduce_462,
  1, 327, :_reduce_none,
  2, 160, :_reduce_464,
  1, 160, :_reduce_none,
  1, 235, :_reduce_466,
  1, 235, :_reduce_467,
  1, 235, :_reduce_none,
  1, 236, :_reduce_469,
  1, 329, :_reduce_470,
  1, 329, :_reduce_none,
  2, 329, :_reduce_472,
  3, 330, :_reduce_473,
  1, 330, :_reduce_474,
  3, 237, :_reduce_475,
  3, 238, :_reduce_476,
  3, 239, :_reduce_477,
  3, 239, :_reduce_478,
  1, 334, :_reduce_479,
  3, 334, :_reduce_480,
  1, 335, :_reduce_none,
  2, 335, :_reduce_482,
  3, 241, :_reduce_483,
  3, 241, :_reduce_484,
  1, 337, :_reduce_485,
  3, 337, :_reduce_486,
  3, 240, :_reduce_487,
  3, 240, :_reduce_488,
  3, 242, :_reduce_489,
  3, 242, :_reduce_490,
  1, 338, :_reduce_491,
  3, 338, :_reduce_492,
  1, 339, :_reduce_493,
  3, 339, :_reduce_494,
  1, 331, :_reduce_495,
  2, 331, :_reduce_496,
  1, 332, :_reduce_497,
  2, 332, :_reduce_498,
  1, 333, :_reduce_499,
  2, 333, :_reduce_500,
  1, 336, :_reduce_501,
  0, 341, :_reduce_502,
  3, 336, :_reduce_503,
  0, 342, :_reduce_504,
  4, 336, :_reduce_505,
  1, 340, :_reduce_506,
  1, 340, :_reduce_507,
  1, 340, :_reduce_508,
  1, 340, :_reduce_none,
  2, 217, :_reduce_510,
  1, 217, :_reduce_511,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  3, 218, :_reduce_516,
  1, 328, :_reduce_none,
  2, 328, :_reduce_518,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_528,
  1, 210, :_reduce_529,
  1, 210, :_reduce_530,
  1, 210, :_reduce_531,
  1, 210, :_reduce_532,
  1, 210, :_reduce_533,
  1, 210, :_reduce_534,
  1, 243, :_reduce_535,
  1, 243, :_reduce_536,
  1, 177, :_reduce_537,
  1, 177, :_reduce_538,
  1, 182, :_reduce_539,
  1, 182, :_reduce_540,
  0, 344, :_reduce_541,
  4, 262, :_reduce_542,
  1, 262, :_reduce_543,
  3, 266, :_reduce_544,
  0, 346, :_reduce_545,
  3, 266, :_reduce_546,
  4, 345, :_reduce_547,
  2, 345, :_reduce_548,
  2, 345, :_reduce_549,
  1, 345, :_reduce_none,
  2, 348, :_reduce_551,
  0, 348, :_reduce_552,
  6, 313, :_reduce_553,
  8, 313, :_reduce_554,
  4, 313, :_reduce_555,
  6, 313, :_reduce_556,
  4, 313, :_reduce_557,
  6, 313, :_reduce_558,
  2, 313, :_reduce_559,
  4, 313, :_reduce_560,
  6, 313, :_reduce_561,
  2, 313, :_reduce_562,
  4, 313, :_reduce_563,
  2, 313, :_reduce_564,
  4, 313, :_reduce_565,
  1, 313, :_reduce_566,
  0, 313, :_reduce_567,
  1, 308, :_reduce_568,
  1, 308, :_reduce_569,
  1, 308, :_reduce_570,
  1, 308, :_reduce_571,
  1, 290, :_reduce_none,
  1, 290, :_reduce_573,
  1, 350, :_reduce_none,
  3, 350, :_reduce_575,
  1, 300, :_reduce_576,
  3, 300, :_reduce_577,
  1, 351, :_reduce_none,
  2, 352, :_reduce_579,
  1, 352, :_reduce_580,
  2, 353, :_reduce_581,
  1, 353, :_reduce_582,
  1, 294, :_reduce_none,
  3, 294, :_reduce_584,
  1, 347, :_reduce_none,
  3, 347, :_reduce_586,
  1, 354, :_reduce_none,
  1, 354, :_reduce_none,
  2, 295, :_reduce_589,
  1, 295, :_reduce_590,
  3, 355, :_reduce_591,
  3, 356, :_reduce_592,
  1, 301, :_reduce_593,
  3, 301, :_reduce_594,
  1, 349, :_reduce_595,
  3, 349, :_reduce_596,
  1, 357, :_reduce_none,
  1, 357, :_reduce_none,
  2, 302, :_reduce_599,
  1, 302, :_reduce_600,
  1, 358, :_reduce_none,
  1, 358, :_reduce_none,
  2, 297, :_reduce_603,
  2, 296, :_reduce_604,
  0, 296, :_reduce_605,
  1, 267, :_reduce_none,
  0, 359, :_reduce_607,
  4, 267, :_reduce_608,
  1, 246, :_reduce_609,
  2, 246, :_reduce_610,
  1, 229, :_reduce_none,
  3, 229, :_reduce_612,
  3, 360, :_reduce_613,
  2, 360, :_reduce_614,
  2, 360, :_reduce_615,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 316, :_reduce_none,
  1, 316, :_reduce_none,
  1, 316, :_reduce_none,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 181, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 204, :_reduce_none,
  2, 180, :_reduce_none,
  0, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 263, :_reduce_640,
  1, 263, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_643,
  0, 150, :_reduce_644 ]

racc_reduce_n = 645

racc_shift_n = 1088

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@3",
  "stmts",
  "stmt_or_begin",
  "@4",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@10",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@25",
  "@26",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@27",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "@38",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      _, _, block = val
                      result = block
                    
    result
end

def _reduce_11(val, _values, result)
                      _, stmt, _ = val
                      result = new_iter s(:preexe), 0, stmt
                    
    result
end

def _reduce_12(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res
                    
    result
end

def _reduce_13(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]
                    
    result
end

def _reduce_14(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_22(val, _values, result)
                      _, _, stmt = val
                      result = stmt
                    
    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_24(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_28(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_29(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_30(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val
                      result = new_rescue body, new_resbody(s(:array), resbody)
                    
    result
end

def _reduce_34(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_37(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr
                    
    result
end

def _reduce_49(val, _values, result)
                      expr, _, resbody = val
                      expr = value_expr expr
                      result = new_rescue(expr, new_resbody(s(:array), resbody))
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_53(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_55(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend
                    
    result
end

def _reduce_67(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_70(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_88(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_89(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_90(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_91(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_97(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_109(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_110(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_111(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_114(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_115(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_121(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = :expr_end
                      result = sym
                    
    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_208(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_211(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_212(val, _values, result)
                      # TODO: assignment
                      raise "not yet: %p" % [val]
                    
    result
end

def _reduce_213(val, _values, result)
                      # TODO: assignment
                      raise "not yet: %p" % [val]
                    
    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn
                    
    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, _, resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody
                      result  = new_rescue(body, new_resbody(s(:array), resbody))
                    
    result
end

def _reduce_258(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_267(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_271(val, _values, result)
                      result = lexer.cmdarg.store true
                    
    result
end

def _reduce_272(val, _values, result)
                      lexer.cmdarg.restore val[0]
                      result = val[1]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_278(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_296(val, _values, result)
                      result = self.lexer.lineno
                      # TODO:
                      # $<val>1 = cmdarg_stack;
                      # CMDARG_SET(0);
                    
    result
end

def _reduce_297(val, _values, result)
                      # TODO: CMDARG_SET($<val>1);
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_298(val, _values, result)
                      # TODO: lex_state = :expr_endarg in between
                      debug20 13, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      result = lexer.cmdarg.store false
                      # result = self.lexer.cmdarg.stack.dup
                      # lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_301(val, _values, result)
                      _, cmdarg, stmt, _, _, = val
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.restore cmdarg
                      result = stmt
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_303(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_304(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_306(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_308(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_312(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_314(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_315(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 316 omitted

def _reduce_317(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_318(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f
                    
    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t
                    
    result
end

def _reduce_321(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true
                    
    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true
                    
    result
end

def _reduce_323(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_324(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_325(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_331(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_334(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_337(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_338(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_339(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_340(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_343(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_345(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_380(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_381(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_382(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_383(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_384(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_385(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_386(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_387(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_388(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_389(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_410(val, _values, result)
 result = 0 
    result
end

def _reduce_411(val, _values, result)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:args)
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_417(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_418(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.cmdarg.store(false), self.lexer.lineno]
                    
    result
end

def _reduce_423(val, _values, result)
                      lpar, args, (cmdarg, lineno), body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.lexpop

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      result.line = lineno
                      self.env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_425(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      # TODO: maybe fix lineno to kDO's lineno?
                      result = val[1]
                    
    result
end

def _reduce_429(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_431(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_432(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_443(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_444(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_447(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_448(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_449(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?
                    
    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                    
    result
end

def _reduce_453(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 455 omitted

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_470(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_487(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_494(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_496(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_502(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_503(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_505(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_506(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_507(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_508(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_529(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_530(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_531(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_532(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_533(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_534(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_535(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_537(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_539(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_540(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_541(val, _values, result)
                      lexer.lex_state = :expr_beg
                      lexer.command_start = true
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_545(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      # TODO: self.lexer.lex_state |= :expr_label
                    
    result
end

def _reduce_546(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = :expr_beg
                      lexer.command_start = true
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      result = args val
                    
    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_553(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_554(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_555(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_556(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_557(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_558(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_559(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_560(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_562(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_564(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 574 omitted

def _reduce_575(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_576(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_577(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_580(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_581(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_582(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      result = args val
                    
    result
end

# reduce 587 omitted

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"
                    
    result
end

def _reduce_590(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_591(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_592(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 597 omitted

# reduce 598 omitted

def _reduce_599(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_600(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_604(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_605(val, _values, result)
                      result = nil
                    
    result
end

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_608(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_609(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_610(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 611 omitted

def _reduce_612(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_613(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_614(val, _values, result)
                      (label, _), arg = val
                      result = s(:array, s(:lit, label.to_sym), arg)
                    
    result
end

def _reduce_615(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

def _reduce_640(val, _values, result)
 yyerrok 
    result
end

# reduce 641 omitted

# reduce 642 omitted

def _reduce_643(val, _values, result)
 yyerrok 
    result
end

def _reduce_644(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
