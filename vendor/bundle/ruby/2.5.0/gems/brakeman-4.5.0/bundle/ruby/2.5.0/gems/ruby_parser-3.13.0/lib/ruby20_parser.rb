#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby20Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-618,603,-111,603,-112,603,806,-618,-618,-618,670,-113,671,-618,-618',
'281,-618,835,95,649,603,231,828,281,828,-618,96,-113,-116,-114,125,-628',
'603,-95,772,124,-618,-618,773,-618,-618,-618,-618,-618,-81,760,121,-117',
'-102,-110,-109,856,-111,-114,-112,228,827,232,827,-111,219,912,277,-112',
'220,-114,232,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618',
'-618,-618,-618,-115,648,-618,-618,-618,281,677,-433,-614,281,-618,221',
'-614,-618,222,223,222,223,-618,652,-618,283,-618,-618,-618,-618,-618',
'-618,-618,283,-618,-618,-618,-111,125,-111,125,-112,125,124,-111,124',
'-112,124,-113,-618,-618,-618,-618,-113,-618,-104,-107,125,-618,-618',
'-618,-618,124,-113,-618,-618,-114,-618,125,125,-615,-114,958,124,124',
'-108,-618,-101,-100,855,-102,-105,-103,222,223,224,651,-618,-618,272',
'-618,-618,-618,-618,-618,-534,283,844,-103,228,283,333,-534,845,269',
'270,474,-105,232,-106,232,-534,125,232,633,475,1036,124,-618,-618,-618',
'-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,806,334,-618',
'-618,-618,-618,677,268,267,232,-618,633,-526,-618,638,881,-611,610,-618',
'-526,-618,373,-618,-618,-618,-618,-618,-618,-618,397,-618,-618,-618',
'-103,749,400,582,581,580,633,583,232,-105,635,634,-618,-618,-303,-104',
'403,-618,589,792,-111,-303,-303,-303,-618,-618,-113,-303,-303,591,-303',
'562,-618,406,564,-103,-521,-614,-103,635,634,-618,-442,-521,-105,599',
'598,-105,-611,-103,-303,-303,-521,-303,-303,-303,-303,-303,-105,-618',
'425,-535,599,598,423,427,426,635,634,749,-611,582,581,580,562,583,790',
'561,428,1006,476,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-442,592,-303,-303,-303,229,676,-442,-100,125,-303,543',
'544,-303,124,548,-442,-612,-303,-109,-303,-536,-303,-303,-303,-303,-303',
'-303,-303,478,-303,924,-303,479,-442,749,633,582,581,580,924,583,591',
'335,336,-303,-303,-618,-303,548,-303,591,874,-303,231,-535,508,-303',
'-117,-115,-303,-303,-303,-101,229,-303,-303,-303,-116,-303,-524,-304',
'286,587,-110,599,598,-524,-304,-303,-303,-303,-612,125,599,598,-524',
'-304,124,-303,-303,-107,-303,-303,-303,-303,-303,635,634,631,-618,518',
'-116,521,-612,523,-108,-618,-109,592,-536,-80,-614,232,125,633,-618',
'-117,592,124,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-618,228,-303,-303,-303,477,822,-303,227,633,-303,819',
'628,-303,-303,820,-303,225,-303,629,-303,670,-303,-303,-303,-303,-303',
'-303,-303,-110,-303,562,-303,671,564,923,633,582,581,580,924,583,635',
'634,636,-303,-303,-303,-303,-529,-303,591,-303,-521,633,533,-529,-303',
'-117,-115,-521,-521,-521,-103,-112,-521,-521,-521,-114,-521,635,634',
'641,587,-112,-105,252,-521,534,-521,-521,-521,596,595,599,598,-114,541',
'562,-521,-521,564,-521,-521,-521,-521,-521,635,634,646,289,749,-521',
'582,581,580,125,583,249,-521,232,124,251,250,232,635,634,653,592,286',
'-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'545,228,-521,-521,-521,745,-521,-521,663,549,-521,222,223,-521,-521',
'550,-521,661,-521,252,-521,252,-521,-521,-521,-521,-521,-521,-521,559',
'-521,565,-521,585,-528,582,581,580,589,583,610,-528,877,881,416,-521',
'-521,-521,-521,591,-521,249,-521,-303,615,251,250,-521,-524,-521,-303',
'-303,-303,222,223,-524,-303,-303,228,-303,749,587,582,581,580,775,583',
'616,-531,-532,596,595,599,598,777,-531,-532,877,881,-303,-303,-530,-303',
'-303,-303,-303,-303,640,-530,-303,644,749,-304,582,581,580,-303,583',
'745,-304,647,-615,-527,222,223,-303,592,951,-304,-527,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,228,228,-303',
'-303,-303,745,676,614,1027,650,-303,657,-278,-303,748,659,612,777,-303',
'660,-303,664,-303,-303,-303,-303,-303,-303,-303,232,-303,668,-303,669',
'286,923,-294,582,581,580,924,583,228,-294,252,-303,-303,-533,-106,1033',
'-303,591,-294,-524,-533,252,252,-303,1031,-115,-524,-524,-524,-533,252',
'-524,-524,-524,749,-524,582,581,580,587,583,252,687,-524,232,-524,-524',
'-524,596,595,599,598,232,423,232,-524,-524,-95,-524,-524,-524,-524,-524',
'749,706,582,581,580,232,583,902,903,745,249,904,119,120,251,250,247',
'248,748,555,717,592,723,-524,-524,-524,-524,-524,-524,-524,-524,-524',
'-524,-524,-524,-524,-524,726,745,-524,-524,-524,-345,-524,-524,729,523',
'-524,733,-345,-524,-524,736,-524,737,-524,739,-524,-345,-524,-524,-524',
'-524,-524,-524,-524,741,-524,743,-524,752,753,585,754,582,581,580,589',
'583,228,756,726,-524,-524,-524,-524,1027,-524,591,-524,-618,726,610',
'228,-524,777,-524,-618,-618,-618,552,726,-618,-618,-618,779,-618,252',
'784,475,587,793,794,795,-279,-618,-618,-618,-618,596,595,599,598,262',
'263,807,-618,-618,508,-618,-618,-618,-618,-618,749,508,582,581,580,249',
'583,255,232,251,250,247,248,824,272,253,749,254,582,581,580,592,583',
'-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618',
'833,745,-618,-618,-618,-294,821,-618,3,521,-618,523,-294,-618,-618,717',
'-618,745,-618,232,-618,-294,-618,-618,-618,-618,-618,-618,-618,286,-618',
'-618,-618,286,717,585,252,582,581,580,589,583,-303,252,232,-618,-618',
'-618,-618,-303,-618,591,-618,-639,-615,232,-303,-618,-303,-113,-639',
'-639,-639,-303,872,-639,-639,-639,-615,-639,252,232,-303,587,881,726',
'232,-280,-639,-639,-639,228,596,595,599,598,262,263,540,-639,-639,232',
'-639,-639,-639,-639,-639,538,911,928,717,-278,249,933,255,937,251,250',
'247,248,232,736,253,749,254,582,581,580,592,583,-639,-639,-639,-639',
'-639,-639,-639,-639,-639,-639,-639,-639,-639,-639,940,252,-639,-639',
'-639,-534,942,-639,944,286,-639,946,-534,-639,-639,946,-639,745,-639',
'232,-639,-534,-639,-639,-639,-639,-639,-639,-639,952,-639,-639,-639',
'249,726,-533,-304,251,250,247,248,726,-533,-304,726,-639,-639,-311,-639',
'232,-639,-533,-304,726,-311,-311,-311,-639,726,-311,-311,-311,749,-311',
'582,581,580,589,583,232,970,-281,971,-311,-311,736,974,977,591,979,981',
'232,983,-311,-311,995,-311,-311,-311,-311,-311,999,996,582,581,580,1008',
'583,726,999,587,582,581,580,784,583,128,129,130,131,132,599,598,1025',
'-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311',
'1028,844,-311,-311,-311,1034,1037,-311,946,289,-311,946,946,-311,-311',
'1042,-311,592,-311,1008,-311,736,-311,-311,-311,-311,-311,-311,-311',
'1051,-311,1053,-311,128,129,130,131,132,128,129,130,131,132,1055,1057',
'-311,-311,-620,-311,1057,-311,723,1008,726,-620,-620,-620,-311,726,-620',
'-620,-620,749,-620,582,581,580,924,583,-615,-614,232,-620,-620,-620',
'-620,946,1008,591,1080,1057,1057,1057,-620,-620,1057,-620,-620,-620',
'-620,-620,128,129,130,131,132,,,,,587,,,,,,,,,,,599,598,,-620,-620,-620',
'-620,-620,-620,-620,-620,-620,-620,-620,-620,-620,-620,,,-620,-620,-620',
',,-620,,,-620,,,-620,-620,,-620,592,-620,,-620,,-620,-620,-620,-620',
'-620,-620,-620,,-620,-620,-620,749,,582,581,580,924,583,,,,,,-620,-620',
'-620,-620,591,-620,-639,-620,,,,,-620,-639,-639,-639,,,-639,-639,-639',
',-639,252,,,587,,,,,-639,-639,,,,252,599,598,262,263,,-639,-639,,-639',
'-639,-639,-639,-639,,,262,263,,249,,,,251,250,247,248,,,,,,249,,255',
'592,251,250,247,248,,,,,,,,,-639,,-441,,,,,-639,,-441,-441,-441,286',
'-639,-441,-441,-441,749,-441,582,581,580,924,583,,,,-441,-441,-441,',
',,591,-639,-639,,,-441,-441,,-441,-441,-441,-441,-441,,,-639,,,,,-639',
',587,,,,,-639,,,,,,599,598,,-441,-441,-441,-441,-441,-441,-441,-441',
'-441,-441,-441,-441,-441,-441,,,-441,-441,-441,,,-441,,286,-441,,,-441',
'-441,,-441,592,-441,,-441,,-441,-441,-441,-441,-441,-441,-441,,-441',
'-441,-441,,,,,,,,,,,,,-441,-441,-619,-441,,-441,,,,-619,-619,-619,-441',
',-619,-619,-619,585,-619,582,581,580,589,583,,,,-619,-619,-619,-619',
',,591,,,,,-619,-619,,-619,-619,-619,-619,-619,,,,,,,,,,587,,,,,,,,,596',
'595,599,598,,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619',
'-619,-619,-619,,,-619,-619,-619,,,-619,,,-619,,,-619,-619,,-619,592',
'-619,,-619,,-619,-619,-619,-619,-619,-619,-619,,-619,-619,-619,749,',
'582,581,580,589,583,,,,,,-619,-619,-619,-619,591,-619,-295,-619,,,,',
'-619,-295,-295,-295,,,-295,-295,-295,,-295,252,,,587,,,,,,-295,-295',
'-295,,,599,598,262,263,,-295,-295,,-295,-295,-295,-295,-295,,,,,,249',
',255,,251,250,247,248,,,,,,,,,592,,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295,,,-295,,,-295,,',
'-295,-295,,-295,,-295,,-295,,-295,-295,-295,-295,-295,-295,-295,,-295',
',-295,,,,,,,,,,,,,-295,-295,-295,-295,,-295,,-295,,,,,-295,186,197,187',
'210,183,203,193,192,213,214,208,191,190,185,211,215,216,195,184,198',
'202,204,196,189,,,,205,212,207,206,199,209,194,182,201,200,,,,,,181',
'188,179,180,176,177,178,136,138,135,,137,,,,,,,,,170,171,,166,148,149',
'150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,103,,,,,,,,,,104,,,,,',
',,,167,,,,,175,186,197,187,210,183,203,193,192,213,214,208,191,190,185',
'211,215,216,195,184,198,202,204,196,189,,,,205,212,207,206,199,209,194',
'182,201,200,,,,,,181,188,179,180,176,177,178,136,138,,,137,,,,,,,,,170',
'171,,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,',
',,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,',
',,,,,,,,,,,,,,,,,167,,,,,175,186,197,187,210,183,203,193,192,213,214',
'208,191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205,212,207',
'206,199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178,136,138',
',,137,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145',
'168,146,,,174,103,,,,,,,,,,104,,,,,,,,,167,,,,,175,186,197,187,210,183',
'203,193,192,213,214,208,191,190,185,211,215,216,195,184,198,202,204',
'196,189,,,,205,212,207,206,199,209,194,182,201,200,,,,,,181,188,179',
'180,176,177,178,136,138,413,412,137,,414,,,,,,,170,171,,166,148,149',
'150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,,,,,,,,,,,167',
',,,,175,186,197,187,210,183,203,193,192,213,214,208,191,190,185,211',
'215,216,195,184,198,202,204,196,189,,,,205,212,207,206,199,209,194,182',
'201,200,,,,,,181,188,179,180,176,177,178,136,138,,,137,,,,,,,,,170,171',
',166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,',
',,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,103,,',
',,,,,,,104,,,,,,,,,167,,,,,175,186,197,187,210,183,203,193,192,213,214',
'208,191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205,212,207',
'206,199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178,136,138',
',,137,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145',
'168,146,,,174,103,,,,,,,,,,104,,,,,,,,,167,,,,,175,186,197,187,210,183',
'203,193,192,213,214,208,191,190,185,211,215,216,195,184,198,202,204',
'196,189,,,,205,212,207,382,381,383,380,182,201,200,,,,,,181,188,179',
'180,377,378,379,375,138,109,108,376,,111,,,,,,,170,171,,166,148,149',
'150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,389,,,,,,,,163,162',
',147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,,,307,85',
'86,87,12,78,,,167,79,80,,,175,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,665,11,49,309,13,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,264',
'265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48',
'251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104',
',266,,-253,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,665,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252',
'256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263,,43,,,36',
',,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261,,245,246,',
',262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267',
'253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265',
'260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251',
'250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,232',
'266,,,,,66,,,93,100,102,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,10,13,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258',
'259,269,270,264,265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64',
',38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99',
'101,,,,96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11',
'49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,252,256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263,,43',
',,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254',
',,,103,95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102,307,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261,',
'245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247',
'248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66',
',,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259,269',
'270,264,265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249',
',255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,',
',96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252',
'256,257,258,259,269,270,264,265,260,261,,-640,-640,,,262,263,,43,,,36',
',,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,256,257,258,259,269,270,264,,260,261,,,,,,262,263',
',43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23',
'254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,-640,-640,-640,-640,269,270,,,-640,-640,',
',,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,-640,-640,-640,-640,269,270,,,-640',
'-640,,,,,,262,263,,43,,,311,,,62,63,,,64,,38,249,,255,48,251,250,247',
'248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,252,-640,-640,-640,-640',
'269,270,,,-640,-640,,,,,,262,263,,43,,,311,,,62,63,,,64,,38,249,,255',
'48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258',
'259,269,270,264,265,260,261,,-640,-640,,,262,263,,43,,,36,,,62,63,,',
'64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11',
'49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,252,-640,-640,-640,-640,269,270,,,-640,-640,,,,,,262,263,,43,,,36',
',,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,256,257,258,259,269,270,,,260,261,,,,,,262,263,,43',
',,311,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,252,-640,-640,-640,-640,269,270,,,-640,-640,,,,,',
'262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267',
'253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,252,-640,-640,-640,-640,269,270,,,-640,-640',
',,,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11',
'49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,113,112,114,115,,,22,,,,,,11,49,10,13,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,749,64,582,581,580,924',
'583,,,,,,,,,,591,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,587,,93,100',
'102,85,86,87,,78,,599,598,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,592,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,749,64,582,581,580,589,583,48,,,,,,,,242,591,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,587,,93,100,102,85,86,87,,78,,599,598,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,592',
',,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,433,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,749,64,582,581,580,589',
'583,,,,,,,,,,591,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,587,,93,100',
'102,85,86,87,,78,,599,598,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,592,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,749,64,582,581,580,589,583,48,,,,,,,,23,591,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,587,,93,100,102,85,86,87,,78,,599,598,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,592',
',,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77',
',,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,',
'117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,',
',,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,',
'49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,433,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,11,49,,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,315,,,,,,,,,,,,,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,332,,,66,,,93,100,102,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,',
'330,,,,,,,,,,,,,,,,,,,,320,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,536,,,66,,,93,100,102,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,296,,48,',
',,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,',
',88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,',
',316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,',
'243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,',
',,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,985,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,',
'330,,,,,,,,,,,,,,,,,,,,992,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,555,,62,63,,,64,,,,,,48,,,,,',
',,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
',,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,700,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,113,112,114,115,,,22,,,,,,11,49,,13,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,985,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,',
',,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
',,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
'300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,',
',237,,,243,,,62,63,,,64,,700,,296,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,',
',,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,',
'45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,',
',,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,298,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,',
'243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,617,60,109,108,618,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,619,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,617,60,109,108,618,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,619,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,798,,,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,',
',,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,125,,,,,124,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,,,330,,,,,,,,,,,,,,,,,,,,367,,,36,,,62,63,,,64,,38,,,,,,,',
',,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,11,49,10,13,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
',,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
'300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,232',
',,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,298,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,',
'96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,',
',,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,',
'49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,11,49,10,13,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,416,66,,,93',
'100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,',
',88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,232',
',,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,',
',,,,,,,,,237,,,243,,,62,63,,,64,,700,,296,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,',
'45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,296,,48,,,,,,',
',242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,416,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,',
',237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117',
'116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,',
',,,,,,,,,,,,,237,,,243,,,62,63,,,64,,700,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,',
'330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,433,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,',
'45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,',
',,,,242,,,,,103,95,97,98,99,101,,,,96,104,462,466,,,461,,66,,301,93',
'100,102,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172,173,158',
'159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168',
'146,,,174,,,,,,,,,,455,459,,,456,,,,,,167,,,170,171,175,166,148,149',
'150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162',
',147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,710,459',
',,711,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,',
',,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155',
'153,145,168,146,,,174,,,,,,,,,,769,466,,,770,,,,,,167,,,170,171,175',
'166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,',
',,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,',
',,,,,767,459,,,768,,,,,,167,,,170,171,175,166,148,149,150,157,154,156',
',,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,683,466,,,684,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,888,466,,,889,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,681,459,,,682',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,585,174,582,581,580,589,583,,,,,506,459,,,507,591,,,,,167',
',,170,171,175,166,148,149,150,157,154,156,,,151,152,587,,,172,173,158',
'159,,,596,595,599,598,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,592,713,466,,,714,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',1061,466,,,1060,,,,,,167,,,170,171,175,166,148,149,150,157,154,156',
',,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,1064,459,,,1065,,,,,,167',
',,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,1066,466,,,1067,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,803,466,,,802',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,800,459,,,801,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',506,459,,,507,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,681,459,,,682,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,683,466,,,684,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,585,174,582,581,580,589,583',
'585,,582,581,580,589,583,,,591,,,,,167,,591,,923,175,582,581,580,924',
'583,,,,,,,587,571,,591,,,,587,,596,595,599,598,,,,596,595,599,598,,',
',,923,587,582,581,580,924,583,,,,596,595,599,598,,,591,,,,,592,,,,,',
',592,,,,,,,,,,587,,,,,,,,592,596,595,599,598,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,592' ]
        racc_action_table = arr = ::Array.new(25561, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'803,357,1078,932,1064,955,666,803,803,803,800,1066,801,803,803,325,803',
'694,92,404,356,22,834,29,688,803,92,769,615,1065,894,62,885,705,619',
'894,803,803,619,803,803,803,803,803,705,605,3,368,666,365,364,731,886',
'768,767,27,834,22,688,666,13,823,27,800,15,801,62,803,803,803,803,803',
'803,803,803,803,803,803,803,803,803,770,404,803,803,803,65,803,29,1066',
'690,803,16,769,803,787,787,471,471,803,407,803,325,803,803,803,803,803',
'803,803,29,803,803,803,823,357,1078,932,1064,955,357,1078,932,1064,955',
'1066,803,803,462,803,1066,803,769,615,356,462,462,462,803,356,803,462',
'462,1065,462,605,885,770,1065,885,605,885,368,462,365,364,731,886,768',
'767,721,721,18,407,462,462,25,462,462,462,462,462,990,65,722,710,234',
'690,40,990,722,47,47,234,711,787,770,471,990,898,997,645,234,997,898',
'462,462,462,462,462,462,462,462,462,462,462,462,462,462,908,43,462,462',
'462,888,462,47,47,49,462,395,381,462,395,1011,617,1011,462,381,462,73',
'462,462,462,462,462,462,462,99,462,462,462,710,951,100,951,951,951,642',
'951,721,711,645,645,462,462,802,462,101,462,733,645,908,802,802,802',
'462,888,462,802,802,733,802,728,888,102,728,710,617,888,710,395,395',
'888,839,617,711,736,736,711,617,710,802,802,617,802,802,802,802,802',
'711,888,135,41,733,733,133,135,135,642,642,748,617,748,748,748,348,748',
'642,348,217,951,237,802,802,802,802,802,802,802,802,802,802,802,802',
'802,802,839,733,802,802,802,439,802,839,41,361,802,330,330,802,361,476',
'839,618,802,41,802,42,802,802,802,802,802,802,802,239,802,971,802,240',
'839,1053,391,1053,1053,1053,1053,1053,971,44,44,802,802,713,802,334',
'802,1053,748,684,244,235,278,802,439,802,684,684,684,42,20,684,684,684',
'476,684,618,773,282,1053,42,971,971,618,773,684,684,684,618,963,1053',
'1053,618,773,963,684,684,334,684,684,684,684,684,391,391,391,713,293',
'334,294,618,297,20,713,235,971,236,310,713,312,5,393,713,20,1053,5,684',
'684,684,684,684,684,684,684,684,684,684,684,684,684,713,19,684,684,684',
'238,684,684,19,398,684,681,385,684,684,682,684,19,684,385,684,455,684',
'684,684,684,684,684,684,236,684,349,684,456,349,827,401,827,827,827',
'827,827,393,393,393,684,684,684,684,380,684,827,684,107,409,313,380',
'684,238,684,107,107,107,455,681,107,107,107,682,107,398,398,398,827',
'455,456,483,107,314,107,107,107,827,827,827,827,456,320,568,107,107',
'568,107,107,107,107,107,401,401,401,323,952,375,952,952,952,304,952',
'483,375,827,304,483,483,324,409,409,409,827,329,107,107,107,107,107',
'107,107,107,107,107,107,107,107,107,331,438,107,107,107,952,107,107',
'438,335,107,781,781,107,107,336,107,438,107,482,107,339,107,107,107',
'107,107,107,107,346,107,350,107,571,383,571,571,571,571,571,362,383',
'1044,1044,363,107,107,107,107,571,107,482,107,461,367,482,482,107,376',
'107,461,461,461,355,355,376,461,461,621,461,872,571,872,872,872,621',
'872,369,377,379,571,571,571,571,621,377,379,755,755,461,461,378,461',
'461,461,461,461,397,378,1067,400,745,1034,745,745,745,1067,745,872,1034',
'403,1067,382,17,17,1067,571,872,1034,382,461,461,461,461,461,461,461',
'461,461,461,461,461,461,461,366,1026,461,461,461,745,461,366,1026,406',
'461,429,431,461,745,434,366,1026,461,436,461,440,461,461,461,461,461',
'461,461,450,461,453,461,454,463,1051,993,1051,1051,1051,1051,1051,991',
'993,484,461,461,989,461,991,461,1051,993,110,989,485,486,461,991,461',
'110,110,110,989,487,110,110,110,587,110,587,587,587,1051,587,498,503',
'110,514,110,110,110,1051,1051,1051,1051,515,530,531,110,110,532,110',
'110,110,110,110,1006,535,1006,1006,1006,537,1006,788,788,587,498,788',
'788,788,498,498,498,498,587,542,546,1051,556,110,110,110,110,110,110',
'110,110,110,110,110,110,110,110,557,1006,110,110,110,50,110,110,566',
'569,110,573,50,110,110,574,110,576,110,577,110,50,110,110,110,110,110',
'110,110,578,110,585,110,593,597,739,600,739,739,739,739,739,984,602',
'606,110,110,110,110,984,110,739,110,683,607,608,337,110,984,110,683',
'683,683,337,609,683,683,683,623,683,553,626,337,739,649,652,654,658',
'683,683,683,683,739,739,739,739,553,553,667,683,683,672,683,683,683',
'683,683,1008,678,1008,1008,1008,553,1008,553,685,553,553,553,553,686',
'689,553,1042,553,1042,1042,1042,739,1042,683,683,683,683,683,683,683',
'683,683,683,683,683,683,683,692,1008,683,683,683,321,683,683,1,697,683',
'699,321,683,683,707,683,1042,683,709,683,321,683,683,683,683,683,683',
'683,712,683,683,683,715,716,737,719,737,737,737,737,737,889,720,727',
'683,683,683,683,889,683,737,683,457,889,732,714,683,889,683,457,457',
'457,714,747,457,457,457,714,457,502,750,714,737,757,763,766,797,457',
'457,457,319,737,737,737,737,502,502,319,457,457,799,457,457,457,457',
'457,319,808,832,838,848,502,849,502,857,502,502,502,502,858,859,502',
'874,502,874,874,874,737,874,457,457,457,457,457,457,457,457,457,457',
'457,457,457,457,863,497,457,457,457,318,864,457,866,457,457,867,318',
'457,457,869,457,874,457,871,457,318,457,457,457,457,457,457,457,873',
'457,457,457,497,876,317,541,497,497,497,497,882,317,541,887,457,457',
'31,457,891,457,317,541,895,31,31,31,457,896,31,31,31,741,31,741,741',
'741,741,741,897,906,907,914,31,31,915,917,918,741,919,921,922,923,31',
'31,935,31,31,31,31,31,937,936,937,937,937,953,937,962,1036,741,1036',
'1036,1036,969,1036,308,308,308,308,308,741,741,982,31,31,31,31,31,31',
'31,31,31,31,31,31,31,31,985,987,31,31,31,992,1001,31,1002,31,31,1003',
'1004,31,31,1005,31,741,31,1007,31,1016,31,31,31,31,31,31,31,1019,31',
'1020,31,529,529,529,529,529,558,558,558,558,558,1021,1022,31,31,467',
'31,1024,31,1030,1043,1048,467,467,467,31,1049,467,467,467,1055,467,1055',
'1055,1055,1055,1055,1060,1061,1063,467,467,467,467,1069,1070,1055,1074',
'1075,1076,1077,467,467,1085,467,467,467,467,467,9,9,9,9,9,,,,,1055,',
',,,,,,,,,1055,1055,,467,467,467,467,467,467,467,467,467,467,467,467',
'467,467,,,467,467,467,,,467,,,467,,,467,467,,467,1055,467,,467,,467',
'467,467,467,467,467,467,,467,467,467,1080,,1080,1080,1080,1080,1080',
',,,,,467,467,467,467,1080,467,505,467,,,,,467,505,505,505,,,505,505',
'505,,505,490,,,1080,,,,,505,505,,,,488,1080,1080,490,490,,505,505,,505',
'505,505,505,505,,,488,488,,490,,,,490,490,490,490,,,,,,488,,488,1080',
'488,488,488,488,,,,,,,,,505,,30,,,,,505,,30,30,30,505,505,30,30,30,1057',
'30,1057,1057,1057,1057,1057,,,,30,30,30,,,,1057,505,505,,,30,30,,30',
'30,30,30,30,,,505,,,,,505,,1057,,,,,505,,,,,,1057,1057,,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,1057',
'30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,466,30,,30',
',,,466,466,466,30,,466,466,466,785,466,785,785,785,785,785,,,,466,466',
'466,466,,,785,,,,,466,466,,466,466,466,466,466,,,,,,,,,,785,,,,,,,,',
'785,785,785,785,,466,466,466,466,466,466,466,466,466,466,466,466,466',
'466,,,466,466,466,,,466,,,466,,,466,466,,466,785,466,,466,,466,466,466',
'466,466,466,466,,466,466,466,1037,,1037,1037,1037,1037,1037,,,,,,466',
'466,466,466,1037,466,60,466,,,,,466,60,60,60,,,60,60,60,,60,489,,,1037',
',,,,,60,60,60,,,1037,1037,489,489,,60,60,,60,60,60,60,60,,,,,,489,,489',
',489,489,489,489,,,,,,,,,1037,,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,,,60,60,60,,,60,,,60,,,60,60,,60,,60,,60,,60,60,60,60,60,60,60,,60',
',60,,,,,,,,,,,,,60,60,60,60,,60,,60,,,,,60,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11',
'11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11',
'11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11',
'11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,,11,786,786,786',
'786,786,786,786,786,786,786,786,786,786,786,786,786,786,786,786,786',
'786,786,786,786,,,,786,786,786,786,786,786,786,786,786,786,,,,,,786',
'786,786,786,786,786,786,786,786,,,786,,,,,,,,,786,786,,786,786,786,786',
'786,786,786,,,786,786,,,,786,786,786,786,,,,,,,,,,,,,,786,786,,786,786',
'786,786,786,786,786,786,786,786,786,,,786,,,,,,,,,,,,,,,,,,,,786,,,',
',786,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424',
'424,424,424,424,424,424,424,424,,,,424,424,424,424,424,424,424,424,424',
'424,,,,,,424,424,424,424,424,424,424,424,424,,,424,,,,,,,,,424,424,',
'424,424,424,424,424,424,424,,,424,424,,,,424,424,424,424,,,,,,,,,,,',
',,424,424,,424,424,424,424,424,424,424,424,424,424,424,,,424,424,,,',
',,,,,,424,,,,,,,,,424,,,,,424,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,,,,103,103,103',
'103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103,103,103',
'103,103,103,,103,,,,,,,103,103,,103,103,103,103,103,103,103,,,103,103',
',,,103,103,103,103,,,,,,,,,,,,,,103,103,,103,103,103,103,103,103,103',
'103,103,103,103,,,103,,,,,,,,,,,,,,,,,,,,103,,,,,103,656,656,656,656',
'656,656,656,656,656,656,656,656,656,656,656,656,656,656,656,656,656',
'656,656,656,,,,656,656,656,656,656,656,656,656,656,656,,,,,,656,656',
'656,656,656,656,656,656,656,,,656,,,,,,,,,656,656,,656,656,656,656,656',
'656,656,,,656,656,,,,656,656,656,656,,,,,,,,,,,,,,656,656,,656,656,656',
'656,656,656,656,656,656,656,656,,,656,656,,,,,,,,,,656,,,,,,,,,656,',
',,,656,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12',
'12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12',
',,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,',
',,12,,,,,,,,,12,,,,,12,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75',
'75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75',
'75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75',
'75,75,75,75,,,75,,,,,,,,,,,,343,343,343,343,343,343,,,75,343,343,,,75',
'343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,,',
'343,,,,,443,343,343,343,343,343,343,343,343,343,343,343,343,,343,343',
'343,,343,343,,343,343,343,443,443,443,443,443,443,443,443,443,443,443',
',443,443,,,443,443,,343,,,343,,,343,343,,,343,,343,443,,443,343,443',
'443,443,443,443,443,443,343,443,,,,343,343,343,343,343,343,,,,343,343',
',443,,443,,,343,,,343,343,343,782,782,782,782,782,782,,,,782,782,,,',
'782,,782,782,782,782,782,782,782,,,,,,782,782,782,782,782,782,782,,',
'782,,,,,449,782,782,782,782,782,782,782,782,782,782,782,782,,782,782',
'782,,782,782,,782,782,782,449,449,449,449,449,449,449,449,449,449,449',
',449,449,,,449,449,,782,,,782,,,782,782,,,782,,782,449,,449,782,449',
'449,449,449,449,449,449,782,449,,,,782,782,782,782,782,782,,,,782,782',
',449,,,,,782,,,782,782,782,783,783,783,783,783,783,,,,783,783,,,,783',
',783,783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,,,783',
',,,,,783,783,783,783,783,783,783,783,783,783,783,783,,783,783,783,,783',
'783,,783,783,783,913,913,913,913,913,913,913,913,913,913,913,,913,913',
',,913,913,,783,,,783,,,783,783,,,783,,783,913,,913,783,913,913,913,913',
'913,913,913,783,913,,,,783,783,783,783,783,783,,,,783,783,,913,,,,,783',
',,783,783,783,829,829,829,829,829,829,,,,829,829,,,,829,,829,829,829',
'829,829,829,829,,,,,,829,829,829,829,829,829,829,,,829,,,,,,829,829',
'829,829,829,829,829,829,829,829,829,829,,829,829,829,,829,829,,829,829',
'829,501,501,501,501,501,501,501,501,501,501,501,,501,501,,,501,501,',
'829,,,829,,,829,829,,,829,,829,501,,501,829,501,501,501,501,501,501',
'501,829,501,,,,829,829,829,829,829,829,,,,829,829,501,501,,,,,829,,',
'829,829,829,423,423,423,423,423,423,,,,423,423,,,,423,,423,423,423,423',
'423,423,423,,,,,,423,423,423,423,423,423,423,,,423,,,,,,423,423,423',
'423,423,423,423,423,423,423,423,423,,423,423,423,,423,423,,423,423,423',
'291,291,291,291,291,291,291,291,291,291,291,,291,291,,,291,291,,423',
',,423,,,423,423,,,423,,423,291,,291,423,291,291,291,291,291,291,291',
'423,291,,,,423,423,423,423,423,423,,,,423,423,,291,,,,,423,,,423,423',
'423,929,929,929,929,929,929,,,,929,929,,,,929,,929,929,929,929,929,929',
'929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,929,929,929,929,929',
'929,929,929,929,929,929,929,,929,929,929,,929,929,,929,929,929,805,805',
'805,805,805,805,805,805,805,805,805,,805,805,,,805,805,,929,,,929,,',
'929,929,,,929,,929,805,,805,929,805,805,805,805,805,805,805,929,805',
',,,929,929,929,929,929,929,,,,929,929,,805,,,,,929,,,929,929,929,846',
'846,846,846,846,846,,,,846,846,,,,846,,846,846,846,846,846,846,846,',
',,,,846,846,846,846,846,846,846,,,846,,,,,,846,846,846,846,846,846,846',
'846,846,846,846,846,,846,846,846,,846,846,,846,846,846,24,24,24,24,24',
'24,24,24,24,24,24,,24,24,,,24,24,,846,,,846,,,846,846,,,846,,846,24',
',24,846,24,24,24,24,24,24,24,846,24,,,,846,846,846,846,846,846,,,,846',
'846,,24,,,,,846,,,846,846,846,930,930,930,930,930,930,,,,930,930,,,',
'930,,930,930,930,930,930,930,930,,,,,,930,930,930,930,930,930,930,,',
'930,,,,,,930,930,930,930,930,930,930,930,930,930,930,930,,930,930,930',
',930,930,,930,930,930,554,554,554,554,554,554,554,554,554,554,554,,554',
'554,,,554,554,,930,,,930,,,930,930,,,930,,930,554,,554,930,554,554,554',
'554,554,554,554,930,554,,,,930,930,930,930,930,930,,,,930,930,,554,',
',,,930,,,930,930,930,855,855,855,855,855,855,,,,855,855,,,,855,,855',
'855,855,855,855,855,855,,,,,,855,855,855,855,855,855,855,,,855,,,,,',
'855,855,855,855,855,855,855,855,855,855,855,855,,855,855,855,,855,855',
',855,855,855,480,480,480,480,480,480,480,480,480,480,480,,480,480,,',
'480,480,,855,,,855,,,855,855,,,855,,855,480,,480,855,480,480,480,480',
'480,480,480,855,480,,,,855,855,855,855,855,855,,,,855,855,,,,,,,855',
',,855,855,855,856,856,856,856,856,856,,,,856,856,,,,856,,856,856,856',
'856,856,856,856,,,,,,856,856,856,856,856,856,856,,,856,,,,,,856,856',
'856,856,856,856,856,856,856,856,856,856,,856,856,856,,856,856,,856,856',
'856,500,500,500,500,500,500,500,500,,500,500,,,,,,500,500,,856,,,856',
',,856,856,,,856,,856,500,,500,856,500,500,500,500,500,500,500,856,500',
',,,856,856,856,856,856,856,,,,856,856,,,,,,,856,,,856,856,856,789,789',
'789,789,789,789,,,,789,789,,,,789,,789,789,789,789,789,789,789,,,,,',
'789,789,789,789,789,789,789,,,789,,,,,,789,789,789,789,789,789,789,789',
'789,789,789,789,,789,789,789,,789,789,,789,789,789,493,493,493,493,493',
'493,493,,,493,493,,,,,,493,493,,789,,,789,,,789,789,,,789,,789,493,',
'493,789,493,493,493,493,493,493,493,789,493,,,,789,789,789,789,789,789',
',,,789,789,,,,,,,789,,,789,789,789,36,36,36,36,36,36,,,,36,36,,,,36',
',36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,36,36',
'36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,492,492,492,492,492',
'492,492,,,492,492,,,,,,492,492,,36,,,36,,,36,36,,,36,,36,492,,492,36',
'492,492,492,492,492,492,492,36,492,,,,36,36,36,36,36,36,,,,36,36,,,',
',,,36,,,36,36,36,311,311,311,311,311,311,,,,311,311,,,,311,,311,311',
'311,311,311,311,311,,,,,,311,311,311,311,311,311,311,,,311,,,,,,311',
'311,311,311,311,311,311,311,311,311,311,311,,311,311,311,,311,311,,311',
'311,311,491,491,491,491,491,491,491,,,491,491,,,,,,491,491,,311,,,311',
',,311,311,,,311,,311,491,,491,311,491,491,491,491,491,491,491,311,491',
',,,311,311,311,311,311,311,,,,311,311,,,,,,,311,,,311,311,311,601,601',
'601,601,601,601,,,,601,601,,,,601,,601,601,601,601,601,601,601,,,,,',
'601,601,601,601,601,601,601,,,601,,,,,,601,601,601,601,601,601,601,601',
'601,601,601,601,,601,601,601,,601,601,,601,601,601,481,481,481,481,481',
'481,481,481,481,481,481,,481,481,,,481,481,,601,,,601,,,601,601,,,601',
',601,481,,481,601,481,481,481,481,481,481,481,601,481,,,,601,601,601',
'601,601,601,,,,601,601,,,,,,,601,,,601,601,601,604,604,604,604,604,604',
',,,604,604,,,,604,,604,604,604,604,604,604,604,,,,,,604,604,604,604',
'604,604,604,,,604,,,,,,604,604,604,604,604,604,604,604,604,604,604,604',
',604,604,604,,604,604,,604,604,604,496,496,496,496,496,496,496,,,496',
'496,,,,,,496,496,,604,,,604,,,604,604,,,604,,604,496,,496,604,496,496',
'496,496,496,496,496,604,496,,,,604,604,604,604,604,604,,,,604,604,,',
',,,,604,,,604,604,604,316,316,316,316,316,316,,,,316,316,,,,316,,316',
'316,316,316,316,316,316,,,,,,316,316,316,316,316,316,316,,,316,,,,,',
'316,316,316,316,316,316,316,316,316,316,316,316,,316,316,316,,316,316',
',316,316,316,499,499,499,499,499,499,499,,,499,499,,,,,,499,499,,316',
',,316,,,316,316,,,316,,316,499,,499,316,499,499,499,499,499,499,499',
'316,499,,,,316,316,316,316,316,316,,,,316,316,,,,,,,316,,,316,316,316',
'881,881,881,881,881,881,,,,881,881,,,,881,,881,881,881,881,881,881,881',
',,,,,881,881,881,881,881,881,881,,,881,,,,,,881,881,881,881,881,881',
'881,881,881,881,881,881,,881,881,881,,881,881,,881,881,881,495,495,495',
'495,495,495,495,,,495,495,,,,,,495,495,,881,,,881,,,881,881,,,881,,881',
'495,,495,881,495,495,495,495,495,495,495,881,495,,,,881,881,881,881',
'881,881,,,,881,881,,,,,,,881,,,881,881,881,360,360,360,360,360,360,',
',,360,360,,,,360,,360,360,360,360,360,360,360,,,,,,360,360,360,360,360',
'360,360,,,360,,,,,,360,360,360,360,360,360,360,360,360,360,360,360,',
'360,360,360,,360,360,,360,360,360,494,494,494,494,494,494,494,,,494',
'494,,,,,,494,494,,360,,,360,,,360,360,,,360,,360,494,,494,360,494,494',
'494,494,494,494,494,360,494,,,,360,360,360,360,360,360,,,,360,360,,',
',,,,360,,,360,360,360,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,',
'1015,,1015,1015,1015,1015,1015,1015,1015,,,,,,1015,1015,1015,1015,1015',
'1015,1015,,,1015,,,,,,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015',
'1015,1015,,1015,1015,1015,,1015,1015,,1015,1015,1015,,,,,,,,,,,,,,,',
',,,,1015,,,1015,,,1015,1015,,,1015,,1015,,,,1015,,,,,,,,1015,,,,,1015',
'1015,1015,1015,1015,1015,,,,1015,1015,,,,,,,1015,,,1015,1015,1015,1014',
'1014,1014,1014,1014,1014,,,,1014,1014,,,,1014,,1014,1014,1014,1014,1014',
'1014,1014,,,,,,1014,1014,1014,1014,1014,1014,1014,,,1014,,,,,,1014,1014',
'1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,,1014,1014,1014,,1014',
'1014,,1014,1014,1014,,,,,,,,,,,,,,,,,,,,1014,,,1014,,,1014,1014,,,1014',
',1014,,,,1014,,,,,,,,1014,,,,,1014,1014,1014,1014,1014,1014,,,,1014',
'1014,,,,,,,1014,,,1014,1014,1014,1009,1009,1009,1009,1009,1009,,,,1009',
'1009,,,,1009,,1009,1009,1009,1009,1009,1009,1009,,,,,,1009,1009,1009',
'1009,1009,1009,1009,,,1009,,,,,,1009,1009,1009,1009,1009,1009,1009,1009',
'1009,1009,1009,1009,,1009,1009,1009,,1009,1009,,1009,1009,1009,,,,,',
',,,,,,,,,,,,,,1009,,,1009,,,1009,1009,,,1009,,1009,,,,1009,,,,,,,,1009',
',,,,1009,1009,1009,1009,1009,1009,,,,1009,1009,,,,,,,1009,,,1009,1009',
'1009,359,359,359,359,359,359,,,,359,359,,,,359,,359,359,359,359,359',
'359,359,,,,,,359,359,359,359,359,359,359,,,359,,,,,,359,359,359,359',
'359,359,359,359,359,359,359,359,,359,359,359,,359,359,,359,359,359,',
',,,,,,,,,,,,,,,,,,359,,,359,,,359,359,,,359,,359,,,,359,,,,,,,,359,',
',,,359,359,359,359,359,359,,,,359,359,,,,,,,359,,,359,359,359,892,892',
'892,892,892,892,,,,892,892,,,,892,,892,892,892,892,892,892,892,,,,,',
'892,892,892,892,892,892,892,,,892,,,,,,892,892,892,892,892,892,892,892',
'892,892,892,892,,892,892,892,,892,892,,892,892,892,,,,,,,,,,,,,,,,,',
',,892,,,892,,,892,892,,,892,,892,,,,892,,,,,,,,892,,,,,892,892,892,892',
'892,892,,,,892,892,,,,,,,892,,,892,892,892,771,771,771,771,771,771,',
',,771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771,771',
'771,771,,,771,,,,,,771,771,771,771,771,771,771,771,771,771,771,771,',
'771,771,771,,771,771,,771,771,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771',
'771,,,771,,771,,,,771,,,,,,,,771,,,,,771,771,771,771,771,771,,,,771',
'771,,,,,,,771,,,771,771,771,243,243,243,243,243,243,,,,243,243,,,,243',
',243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243',
',,,,,243,243,243,243,243,243,243,243,243,243,243,243,,243,243,243,,243',
'243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,243,',
',,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,',
'243,243,243,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2',
'2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,',
',,,,,2,,,2,,,2,2,,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,,,,,,,2',
',,2,2,2,988,988,988,988,988,988,,,,988,988,,,,988,,988,988,988,988,988',
'988,988,,,,,,988,988,988,988,988,988,988,,,988,,,,,,988,988,988,988',
'988,988,988,988,988,988,988,988,,988,988,988,,988,988,,988,988,988,',
',,,,,,,,,,,,,,,,,,988,,,988,,,988,988,,,988,,988,,,,988,,,,,,,,988,',
',,,988,988,988,988,988,988,,,,988,988,,,,,,,988,,,988,988,988,959,959',
'959,959,959,959,,,,959,959,,,,959,,959,959,959,959,959,959,959,,,,,',
'959,959,959,959,959,959,959,,,959,,,,,,959,959,959,959,959,959,959,959',
'959,959,959,959,,959,959,959,,959,959,,959,959,959,,,,,,,,,,,,,,,,,',
',,959,,,959,,,959,959,,,959,,959,,,,959,,,,,,,,959,,,,,959,959,959,959',
'959,959,,,,959,959,,,,,,,959,,,959,959,959,219,219,219,219,219,219,',
',,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219',
'219,219,,,219,,,,,,219,219,219,219,219,219,219,219,219,219,219,219,',
'219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,219,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219',
'219,,,,,,,219,,,219,219,219,717,717,717,,717,,,,717,717,,,,717,,717',
'717,717,717,717,717,717,,,,,,717,717,717,717,717,717,717,,,717,,,,,',
',717,,,717,717,717,717,717,717,717,717,,717,717,717,,717,717,,,,717',
',,,,,,,,,,,,,,,,,,,717,,,717,,,717,717,,979,717,979,979,979,979,979',
',,,,,,,,,979,,,,717,717,717,717,717,717,,,,717,717,,,,,,,717,979,,717',
'717,717,224,224,224,,224,,979,979,224,224,,,,224,,224,224,224,224,224',
'224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,979,,,224,,,224,224',
'224,224,224,224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,',
',,,,,,,,,,224,,,224,,,224,224,,946,224,946,946,946,946,946,224,,,,,',
',,224,946,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,946,,224,224',
'224,221,221,221,,221,,946,946,221,221,,,,221,,221,221,221,221,221,221',
'221,,,,,,221,221,221,221,221,221,221,,,221,,,,946,,,221,,,221,221,221',
'221,221,221,221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,',
',,,,,,221,,,221,,,221,221,,,221,,221,,,,221,,,,,,,,221,,,,,221,221,221',
'221,221,221,,,,221,221,,,,,,,221,,,221,221,221,545,545,545,,545,,,,545',
'545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545,545',
'545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,,545,545,545,',
'545,545,,,,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,944,545,944,944',
'944,944,944,,,,,,,,,,944,,,,545,545,545,545,545,545,,,,545,545,,,,,',
',545,944,,545,545,545,222,222,222,,222,,944,944,222,222,,,,222,,222',
'222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,944',
',,222,,,222,222,222,222,222,222,222,222,,222,222,222,,222,222,,222,222',
'222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,942,222,942,942,942,942',
'942,222,,,,,,,,222,942,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222',
'942,,222,222,222,548,548,548,,548,,942,942,548,548,,,,548,,548,548,548',
'548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,942,,,548',
',,548,548,548,548,548,548,548,548,,548,548,548,,548,548,,548,548,548',
',,,,,,,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,,,,,548,,,,,,,,548,,,',
',548,548,548,548,548,548,,,,548,548,,,,,,,548,,,548,548,548,549,549',
'549,,549,,,,549,549,,,,549,,549,549,549,549,549,549,549,,,,,,549,549',
'549,549,549,549,549,,,549,,,,,,,549,,,549,549,549,549,549,549,549,549',
',549,549,549,,549,549,,549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549,,,549',
'549,,,549,,,,,,549,,,,,,,,549,,,,,549,549,549,549,549,549,,,,549,549',
',,,,,,549,,,549,549,549,550,550,550,,550,,,,550,550,,,,550,,550,550',
'550,550,550,550,550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,,550',
',,550,550,550,550,550,550,550,550,,550,550,550,,550,550,,550,550,550',
',,,,,,,,,,,,,,,,,,,550,,,550,,,550,550,,,550,,,,,,550,,,,,,,,550,,,',
',550,550,550,550,550,550,,,,550,550,,,,,,,550,,,550,550,550,223,223',
'223,,223,,,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223',
',,,,,,223,,,223,223,223,555,555,555,,555,,,,555,555,,,,555,,555,555',
'555,555,555,555,555,,,,,,555,555,555,555,555,555,555,,,555,,,,,,,555',
',,555,555,555,555,555,555,555,555,,555,555,555,,555,555,,555,555,555',
',,,,,,,,,,,,,,,,,,,555,,,555,,,555,555,,,555,,,,,,555,,,,,,,,555,,,',
',555,555,555,555,555,555,,,,555,555,,,,,,,555,,,555,555,555,777,777',
'777,,777,,,,777,777,,,,777,,777,777,777,777,777,777,777,,,,,,777,777',
'777,777,777,777,777,,,777,,,,,,,777,,,777,777,777,777,777,777,777,777',
'777,777,777,777,,777,777,,777,777,777,,,,,,,,,,,,,,,,,,,,777,,,777,',
',777,777,,,777,,777,,777,,777,,,,,,,,777,,,,,777,777,777,777,777,777',
',,,777,777,,,,,,,777,,777,777,777,777,32,32,32,,32,,,,32,32,,,,32,,32',
'32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32',
'32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,',
'32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32',
',,,,,,32,,32,32,32,32,798,798,798,,798,,,,798,798,,,,798,,798,798,798',
'798,798,798,798,,,,,,798,798,798,798,798,798,798,,,798,,,,,,,798,,,798',
'798,798,798,798,798,798,798,,798,798,798,,798,798,,798,798,798,,,,,',
',,,,,,,,,,,,,,798,,,798,,,798,798,,,798,,,,,,798,,,,,,,,798,,,,,798',
'798,798,798,798,798,,,,798,798,,,,,,,798,,,798,798,798,33,33,33,,33',
',,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33',
',,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,',
',,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33',
'33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,743,743,743,,743,,,,743,743',
',,,743,,743,743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743',
',,743,,,,,,,743,,,743,743,743,743,743,743,743,743,,743,743,743,,743',
'743,,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,,,,,,743',
',,,,,,,743,,,,,743,743,743,743,743,743,,,,743,743,,,,,,,743,,,743,743',
'743,806,806,806,,806,,,,806,806,,,,806,,806,806,806,806,806,806,806',
',,,,,806,806,806,806,806,806,806,,,806,,,,,,,806,,,806,806,806,806,806',
'806,806,806,,806,806,806,,806,806,,806,806,806,,,,,,,,,,,,,,,,,,,,806',
',,806,,,806,806,,,806,,,,,,806,,,,,,,,806,,,,,806,806,806,806,806,806',
',,,806,806,,,,,,,806,,,806,806,806,296,296,296,,296,,,,296,296,,,,296',
',296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296',
',,,,,,296,,,296,296,296,296,296,296,296,296,,296,296,296,,296,296,,296',
'296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,,,,,296,,,,,,',
',296,,,,,296,296,296,296,296,296,,,,296,296,,,,,,,296,,,296,296,296',
'819,819,819,,819,,,,819,819,,,,819,,819,819,819,819,819,819,819,,,,',
',819,819,819,819,819,819,819,,,819,,,,,,,819,,,819,819,819,819,819,819',
'819,819,,819,819,819,,819,819,,819,819,819,,,,,,,,,,,,,,,,,,,,819,,',
'819,,,819,819,,,819,,,,,,819,,,,,,,,819,,,,,819,819,819,819,819,819',
',,,819,819,,,,,,,819,,,819,819,819,820,820,820,,820,,,,820,820,,,,820',
',820,820,820,820,820,820,820,,,,,,820,820,820,820,820,820,820,,,820',
',,,,,,820,,,820,820,820,820,820,820,820,820,,820,820,820,,820,820,,820',
'820,820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820,820,,,820,,,,,,820,,,,,,',
',820,,,,,820,820,820,820,820,820,,,,820,820,,,,,,,820,,,820,820,820',
'821,821,821,,821,,,,821,821,,,,821,,821,821,821,821,821,821,821,,,,',
',821,821,821,821,821,821,821,,,821,,,,,,,821,,,821,821,821,821,821,821',
'821,821,,821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,,,,,,,,821,,',
'821,,,821,821,,,821,,,,,,821,,,,,,,,821,,,,,821,821,821,821,821,821',
',,,821,821,,,,,,,821,,,821,821,821,822,822,822,,822,,,,822,822,,,,822',
',822,822,822,822,822,822,822,,,,,,822,822,822,822,822,822,822,,,822',
',,,,,,822,,,822,822,822,822,822,822,822,822,,822,822,822,,822,822,,822',
'822,822,,,,,,,,,,,,,,,,,,,,822,,,822,,,822,822,,,822,,,,,,822,,,,,,',
',822,,,,,822,822,822,822,822,822,,,,822,822,,,,,,,822,,,822,822,822',
'279,279,279,,279,,,,279,279,,,,279,,279,279,279,279,279,279,279,,,,',
',279,279,279,279,279,279,279,,,279,,,,,,,279,,,279,279,279,279,279,279',
'279,279,279,279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279',
',,279,,,279,279,,,279,,279,,279,,279,,,,,,,,279,,,,,279,279,279,279',
'279,279,,,,279,279,,,,,,,279,,279,279,279,279,824,824,824,,824,,,,824',
'824,,,,824,,824,824,824,824,824,824,824,,,,,,824,824,824,824,824,824',
'824,,,824,,,,,,,824,,,824,824,824,824,824,824,824,824,,824,824,824,',
'824,824,,824,824,824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,',
',,,824,,,,,,,,824,,,,,824,824,824,824,824,824,,,,824,824,,,,,,,824,',
',824,824,824,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,',
'34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34',
'34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34',
',34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,298',
'298,298,,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298',
'298,298,298,298,298,298,,,298,,,,,,,298,,,298,298,298,298,298,298,298',
'298,,298,298,298,,298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298',
',,298,298,,,298,,,,,,298,,,,,,,,298,,,,,298,298,298,298,298,298,,,,298',
'298,,,,,,,298,,,298,298,298,300,300,300,,300,,,,300,300,,,,300,,300',
'300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,',
',300,,,300,300,300,300,300,300,300,300,,300,300,300,,300,300,,300,300',
'300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,,,,300,,,,,,,,300',
',,,,300,300,300,300,300,300,,,,300,300,,,,,,,300,,,300,300,300,301,301',
'301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301',
'301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,301',
',301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301',
'301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301',
',,,,,,301,,,301,301,301,724,724,724,,724,,,,724,724,,,,724,,724,724',
'724,724,724,724,724,,,,,,724,724,724,724,724,724,724,,,724,,,,,,,724',
',,724,724,724,724,724,724,724,724,,724,724,724,,724,724,,724,724,724',
',,,,,,,,,,,,,,,,,,,724,,,724,,,724,724,,,724,,724,,,,724,,,,,,,,724',
',,,,724,724,724,724,724,724,,,,724,724,,,,,,,724,,,724,724,724,307,307',
'307,307,307,,,,307,307,,,,307,,307,307,307,307,307,307,307,,,,,,307',
'307,307,307,307,307,307,,,307,,,,,,307,307,,307,307,307,307,307,307',
'307,307,307,,307,307,307,,307,307,,307,307,307,,,,,,,,,,,,,,,,,,,,307',
',,307,,,307,307,,,307,,307,,,,307,,,,,,,,307,,,,,307,307,307,307,307',
'307,,,,307,307,,,,,,,307,,,307,307,307,37,37,37,,37,,,,37,37,,,,37,',
'37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37',
'37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37',
',,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37',
',,37,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,315,315,315,,315',
',,,315,315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315,315,315',
'315,315,315,,,315,,,,,,,315,,,315,315,315,315,315,315,315,315,,315,315',
'315,,315,315,,,,315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315,,,',
',,,,,,,,,,,,,,,315,315,315,315,315,315,,,,315,315,,,,315,,,315,,,315',
'315,315,271,271,271,,271,,,,271,271,,,,271,,271,271,271,271,271,271',
'271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271',
'271,271,271,271,,271,271,271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,',
',,271,,,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,,,271,271,271,271',
'271,271,,,,271,271,,,,,,,271,,,271,271,271,266,266,266,,266,,,,266,266',
',,,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266',
',,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266,266,266,,266',
'266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266',
',,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266',
'266,879,879,879,,879,,,,879,879,,,,879,,879,879,879,879,879,879,879',
',,,,,879,879,879,879,879,879,879,,,879,,,,,,,879,,,879,879,879,879,879',
'879,879,879,,879,879,879,,879,879,,879,879,879,,,,,,,,,,,,,,,,,,,,879',
',,879,,,879,879,,,879,,,,,,879,,,,,,,,879,,,,,879,879,879,879,879,879',
',,,879,879,,,,,,,879,,,879,879,879,265,265,265,,265,,,,265,265,,,,265',
',265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265',
',,,,,,265,,,265,265,265,265,265,265,265,265,,265,265,265,,265,265,,265',
'265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,',
',265,,,,,265,265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265',
'264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,',
',264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264',
'264,264,,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,',
'264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264',
',,,264,264,,,,,,,264,,,264,264,264,893,893,893,,893,,,,893,893,,,,893',
',893,893,893,893,893,893,893,,,,,,893,893,893,893,893,893,893,,,893',
',,,,,,893,,,893,893,893,893,893,893,893,893,,893,893,893,,893,893,,893',
'893,893,,,,,,,,,,,,,,,,,,,,893,,,893,,,893,893,,,893,,,,,,893,,,,,,',
',893,,,,,893,893,893,893,893,893,,,,893,893,,,,,,,893,,,893,893,893',
'263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,',
',263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263',
'263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,',
'263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263',
',,,263,263,,,,,,,263,,,263,263,263,262,262,262,,262,,,,262,262,,,,262',
',262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262',
',,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,,262',
'262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,',
',262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262',
'911,911,911,,911,,,,911,911,,,,911,,911,911,911,911,911,911,911,,,,',
',911,911,911,911,911,911,911,,,911,,,,,,,911,,,911,911,911,911,911,911',
'911,911,911,911,911,911,,911,911,,911,911,911,,,,,,,,,,,,,,,,,,,,911',
',,911,,,911,911,,,911,,,,911,,911,,,,,,,,911,,,,,911,911,911,911,911',
'911,,,,911,911,,,,,,,911,,911,911,911,911,912,912,912,,912,,,,912,912',
',,,912,,912,912,912,912,912,912,912,,,,,,912,912,912,912,912,912,912',
',,912,,,,,,,912,,,912,912,912,912,912,912,912,912,,912,912,912,,912',
'912,,912,912,912,,,,,,,,,,,,,,,,,,,,912,,,912,,,912,912,,,912,,,,,,912',
',,,,,,,912,,,,,912,912,912,912,912,912,,,,912,912,,,,,,,912,,,912,912',
'912,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261',
',,,261,261,,,,,,,261,,,261,261,261,45,45,45,,45,,,,45,45,,,,45,,45,45',
'45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45',
'45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,',
'45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45',
',,45,45,45,332,332,332,,332,,,,332,332,,,,332,,332,332,332,332,332,332',
'332,,,,,,332,332,332,332,332,332,332,,,332,,,,,,,332,,,332,332,332,332',
'332,332,332,332,,332,332,332,,332,332,,,,332,,,,,,,,,,,,,,,,,,,,332',
',,332,,,332,332,,,332,,,,,,,,,,,,,,,,,,,332,332,332,332,332,332,,,,332',
'332,,,,,,,332,,,332,332,332,286,286,286,,286,,,,286,286,,,,286,,286',
'286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,',
',286,,,286,286,286,286,286,286,286,286,286,286,286,286,,286,286,,286',
'286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,286,,286,,286',
',,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,,286,286',
'286,286,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46',
'46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46',
'46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,',
'46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,706,706,706,,706',
',,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,,706,706,706,706',
'706,706,706,,,706,,,,,,,706,,,706,706,706,706,706,706,706,706,,706,706',
'706,,706,706,,,,706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,,706,,,',
',,,,,,,,,,,,,,,706,706,706,706,706,706,,,,706,706,,,,,,,706,,,706,706',
'706,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700',
',,,,,700,700,700,700,700,700,700,,,700,,,,,,,700,,,700,700,700,700,700',
'700,700,700,,700,700,700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700',
',,700,,,700,700,,,700,,,,,,700,,,,,,,,700,,,,,700,700,700,700,700,700',
',,,700,700,,,,,,,700,,,700,700,700,48,48,48,,48,,,,48,48,,,,48,,48,48',
'48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48',
'48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,',
'48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48',
',,48,48,48,924,924,924,,924,,,,924,924,,,,924,,924,924,924,924,924,924',
'924,,,,,,924,924,924,924,924,924,924,,,924,,,,,,,924,,,924,924,924,924',
'924,924,924,924,,924,924,924,,924,924,,,,924,,,,,,,,,,,,,,,,,,,,924',
',,924,,,924,924,,,924,,,,,,,,,,,,,,,,,,,924,924,924,924,924,924,,,,924',
'924,,,,,,,924,,,924,924,924,933,933,933,,933,,,,933,933,,,,933,,933',
'933,933,933,933,933,933,,,,,,933,933,933,933,933,933,933,,,933,,,,,',
',933,,,933,933,933,933,933,933,933,933,,933,933,933,,933,933,,,,933',
',,,,,,,,,,,,,,,,,,,933,,,933,,,933,933,,,933,,,,,,,,,,,,,,,,,,,933,933',
'933,933,933,933,,,,933,933,,,,,,,933,,,933,933,933,340,340,340,,340',
',,,340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340,340,340,340',
'340,340,340,,,340,,,,,,,340,,,340,340,340,340,340,340,340,340,,340,340',
'340,,340,340,,340,340,340,,,,,,,,,,,,,,,,,,,,340,,,340,,,340,340,,,340',
',,,,,340,,,,,,,,340,,,,,340,340,340,340,340,340,,,,340,340,,,,,,,340',
',,340,340,340,342,342,342,,342,,,,342,342,,,,342,,342,342,342,342,342',
'342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342,,,342,342,342',
'342,342,342,342,342,,342,342,342,,342,342,,342,342,342,,,,,,,,,,,,,',
',,,,,,342,,,342,342,,342,342,,,342,,,,,,342,,,,,,,,342,,,,,342,342,342',
'342,342,342,,,,342,342,,,,,,,342,,,342,342,342,260,260,260,,260,,,,260',
'260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260',
'260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,',
'260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,',
',,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,',
',260,260,260,259,259,259,,259,,,,259,259,,,,259,,259,259,259,259,259',
'259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259',
'259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,',
',,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259',
'259,259,259,,,,259,259,,,,,,,259,,,259,259,259,958,958,958,,958,,,,958',
'958,,,,958,,958,958,958,958,958,958,958,,,,,,958,958,958,958,958,958',
'958,,,958,,,,,,,958,,,958,958,958,958,958,958,958,958,,958,958,958,',
'958,958,,958,958,958,,,,,,,,,,,,,,,,,,,,958,,,958,,,958,958,,,958,,958',
',,,958,,,,,,,,958,,,,,958,958,958,958,958,958,,,,958,958,,,,,,,958,',
',958,958,958,345,345,345,345,345,,,,345,345,,,,345,,345,345,345,345',
'345,345,345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,345,345,,345',
'345,345,345,345,345,345,345,345,,345,345,345,,345,345,,345,345,345,',
',,,,,,,,,,,,,,,,,,345,,,345,,,345,345,,,345,,345,,,,345,,,,,,,,345,',
',,,345,345,345,345,345,345,,,,345,345,,,,,,,345,,,345,345,345,258,258',
'258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258',
'258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258',
',258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258',
'258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258',
',,,,,,258,,,258,258,258,257,257,257,,257,,,,257,257,,,,257,,257,257',
'257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257',
',,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257',
',,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,',
',257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,983,983',
'983,,983,,,,983,983,,,,983,,983,983,983,983,983,983,983,,,,,,983,983',
'983,983,983,983,983,,,983,,,,,,,983,,,983,983,983,983,983,983,983,983',
',983,983,983,,983,983,,,,983,,,,,,,,,,,,,,,,,,,,983,,,983,,,983,983',
',,983,,,,,,,,,,,,,,,,,,,983,983,983,983,983,983,,,,983,983,,,,,,,983',
',,983,983,983,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,',
',,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,256,256,,,,256,256,,,,,,,256,,,256,256,256,255,255,255,,255,,,,255',
'255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255,255',
'255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255,',
'255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,',
',,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,',
',255,255,255,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,',
',,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254',
'254,254,254,,,,254,254,,,,,,,254,,,254,254,254,253,253,253,,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,',
'253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,',
',253,253,253,351,351,351,,351,,,,351,351,,,,351,,351,351,351,351,351',
'351,351,,,,,,351,351,351,351,351,351,351,,,351,,,,,,,351,,,351,351,351',
'351,351,351,351,351,351,351,351,351,,351,351,,351,351,351,,,,,,,,,,',
',,,,,,,,,351,,,351,,,351,351,,,351,,,,,,351,,,,,,,,351,,,,,351,351,351',
'351,351,351,,,,351,351,,,,,,,351,,351,351,351,351,677,677,677,,677,',
',,677,677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677,677,677,677',
'677,677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677',
',677,677,,677,677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,',
',,,,677,,,,,,,,677,,,,,677,677,677,677,677,677,,,,677,677,,,,,,,677',
',,677,677,677,676,676,676,,676,,,,676,676,,,,676,,676,676,676,676,676',
'676,676,,,,,,676,676,676,676,676,676,676,,,676,,,,,,,676,,,676,676,676',
'676,676,676,676,676,,676,676,676,,676,676,,676,676,676,,,,,,,,,,,,,',
',,,,,,676,,,676,,,676,676,,,676,,,,,,676,,,,,,,,676,,,,,676,676,676',
'676,676,676,,,,676,676,,,,,,,676,,,676,676,676,252,252,252,,252,,,,252',
'252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252',
'252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,',
'252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,',
',,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,',
',252,252,252,358,358,358,,358,,,,358,358,,,,358,,358,358,358,358,358',
'358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358,,,358,358,358',
'358,358,358,358,358,,358,358,358,,358,358,,358,358,358,,,,,,,,,,,,,',
',,,,,,358,,,358,,,358,358,,,358,,,,,,358,,,,,,,,358,,,,,358,358,358',
'358,358,358,,,,358,358,,,,,,,358,,,358,358,358,671,671,671,,671,,,,671',
'671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671,671,671',
'671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671,671,',
'671,671,,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,',
',,,671,,,,,,,,671,,,,,671,671,671,671,671,671,,,,671,671,,,,,,,671,',
',671,671,671,670,670,670,,670,,,,670,670,,,,670,,670,670,670,670,670',
'670,670,,,,,,670,670,670,670,670,670,670,,,670,,,,,,,670,,,670,670,670',
'670,670,670,670,670,,670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,',
',,,,,,670,,,670,,,670,670,,,670,,,,,,670,,,,,,,,670,,,,,670,670,670',
'670,670,670,,,,670,670,,,,,,,670,,,670,670,670,669,669,669,,669,,,,669',
'669,,,,669,,669,669,669,669,669,669,669,,,,,,669,669,669,669,669,669',
'669,,,669,,,,,,,669,,,669,669,669,669,669,669,669,669,669,669,669,669',
',669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669,,,669,',
',,669,,669,,,,,,,,669,,,,,669,669,669,669,669,669,,,,669,669,,,,,,,669',
',669,669,669,669,668,668,668,,668,,,,668,668,,,,668,,668,668,668,668',
'668,668,668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668,668',
'668,668,668,668,668,668,668,668,668,668,,668,668,,668,668,668,,,,,,',
',,,,,,,,,,,,,668,,,668,,,668,668,,,668,,668,,668,,668,,,,,,,,668,,,',
',668,668,668,668,668,668,,,,668,668,,,,,,,668,,668,668,668,668,251,251',
'251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251',
'251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251',
',251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251',
'251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251',
',,,,,,251,,,251,251,251,665,665,665,,665,,,,665,665,,,,665,,665,665',
'665,665,665,665,665,,,,,,665,665,665,665,665,665,665,,,665,,,,,,,665',
',,665,665,665,665,665,665,665,665,,665,665,665,,665,665,,665,665,665',
',,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,,,,,665,,,,,,,,665,,,',
',665,665,665,665,665,665,,,,665,665,,,,,,,665,,,665,665,665,1031,1031',
'1031,,1031,,,,1031,1031,,,,1031,,1031,1031,1031,1031,1031,1031,1031',
',,,,,1031,1031,1031,1031,1031,1031,1031,,,1031,,,,,,,1031,,,1031,1031',
'1031,1031,1031,1031,1031,1031,1031,1031,1031,1031,,1031,1031,,1031,1031',
'1031,,,,,,,,,,,,,,,,,,,,1031,,,1031,,,1031,1031,,,1031,,1031,,1031,',
'1031,,,,,,,,1031,,,,,1031,1031,1031,1031,1031,1031,,,,1031,1031,,,,',
',,1031,,1031,1031,1031,1031,664,664,664,664,664,,,,664,664,,,,664,,664',
'664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,,,664,,,,,',
'664,664,,664,664,664,664,664,664,664,664,664,,664,664,664,,664,664,',
'664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,,664,,664,,,,664',
',,,,,,,664,,,,,664,664,664,664,664,664,,,,664,664,,,,,,,664,,,664,664',
'664,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63',
'63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63',
'63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,63,,,,,',
',,63,,,,,63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,661,661,661',
',661,,,,661,661,,,,661,,661,661,661,661,661,661,661,,,,,,661,661,661',
'661,661,661,661,,,661,,,,,,,661,,,661,661,661,661,661,661,661,661,661',
'661,661,661,,661,661,,661,661,661,,,,,,,,,,,,,,,,,,,,661,,,661,,,661',
'661,,,661,,661,,661,,661,,,,,,,,661,,,,,661,661,661,661,661,661,,,,661',
'661,,,,,,,661,,661,661,661,661,372,372,372,,372,,,,372,372,,,,372,,372',
'372,372,372,372,372,372,,,,,,372,372,372,372,372,372,372,,,372,,,,,',
',372,,,372,372,372,372,372,372,372,372,,372,372,372,,372,372,,,,372',
',,,,,,,,,,,,,,,,,,,372,,,372,,,372,372,,,372,,,,,,,,,,,,,,,,,,,372,372',
'372,372,372,372,,,,372,372,,,,,,,372,,,372,372,372,374,374,374,,374',
',,,374,374,,,,374,,374,374,374,374,374,374,374,,,,,,374,374,374,374',
'374,374,374,,,374,,,,,,,374,,,374,374,374,374,374,374,374,374,,374,374',
'374,,374,374,,,,374,,,,,,,,,,,,,,,,,,,,374,,,374,,,374,374,,,374,,,',
',,,,,,,,,,,,,,,374,374,374,374,374,374,,,,374,374,,,,,,,374,,,374,374',
'374,660,660,660,,660,,,,660,660,,,,660,,660,660,660,660,660,660,660',
',,,,,660,660,660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660',
'660,660,660,,660,660,660,,660,660,,660,660,660,,,,,,,,,,,,,,,,,,,,660',
',,660,,,660,660,,,660,,,,,,660,,,,,,,,660,,,,,660,660,660,660,660,660',
',,,660,660,,,,,,,660,,,660,660,660,659,659,659,,659,,,,659,659,,,,659',
',659,659,659,659,659,659,659,,,,,,659,659,659,659,659,659,659,,,659',
',,,,,,659,,,659,659,659,659,659,659,659,659,,659,659,659,,659,659,,659',
'659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,659,,,,659,,,',
',,,,659,,,,,659,659,659,659,659,659,,,,659,659,,,,,,,659,,,659,659,659',
'250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,',
',250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250',
'250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,',
'250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,249,249,249,,249,,,,249,249,,,,249',
',249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249',
',,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249',
'249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,',
',249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249',
'248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,',
',248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248',
'248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,',
'248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248',
',,,248,248,,,,,,,248,,,248,248,248,247,247,247,,247,,,,247,247,,,,247',
',247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247',
',,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,,247',
'247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,',
',247,,,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247',
'630,630,630,,630,,,,630,630,,,,630,,630,630,630,630,630,630,630,,,,',
',630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630,630',
'630,630,,630,630,630,,630,630,,630,630,630,,,,,,,,,,,,,,,,,,,,630,,',
'630,,,630,630,,,630,,,,,,630,,,,,,,,630,,,,,630,630,630,630,630,630',
',,,630,630,,,,,,,630,,,630,630,630,246,246,246,,246,,,,246,246,,,,246',
',246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246',
',,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246',
'246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,',
',246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246',
'67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67',
'67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67',
'67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67',
'67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,68,68,68,,68,,,,68,68,,',
',68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,',
'68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,',
',,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68',
'68,,,,,,,68,,,68,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71',
'71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71',
',71,71,71,,71,71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,',
',,,,71,,,,,,,,71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71',
'71,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72',
'72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,',
',72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72',
'72,72,72,72,,,,72,72,,,,,,,72,,,72,72,72,8,8,8,8,8,,,,8,8,,,,8,,8,8',
'8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8',
',8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,',
'8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,433,433,433,,433,,,,433,433,,,,433',
',433,433,433,433,433,433,433,,,,,,433,433,433,433,433,433,433,,,433',
',,,,,,433,,,433,433,433,433,433,433,433,433,,433,433,433,,433,433,,433',
'433,433,,,,,,,,,,,,,,,,,,,,433,,,433,,,433,433,,,433,,,,,,433,,,,,,',
',433,,,,,433,433,433,433,433,433,,,,433,433,,,,,,,433,,,433,433,433',
'624,624,624,,624,,,,624,624,,,,624,,624,624,624,624,624,624,624,,,,',
',624,624,624,624,624,624,624,,,624,,,,,,,624,,,624,624,624,624,624,624',
'624,624,,624,624,624,,624,624,,624,624,624,,,,,,,,,,,,,,,,,,,,624,,',
'624,,,624,624,,,624,,,,,,624,,,,,,,,624,,,,,624,624,624,624,624,624',
',,,624,624,,,,,,,624,,,624,624,624,245,245,245,,245,,,,245,245,,,,245',
',245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245',
',,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245',
'245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,',
',245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245',
'289,289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289,289,,,,',
',289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289,289,289',
'289,289,289,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289',
',,289,,,289,289,,,289,,289,,289,,289,,,,,,,,289,,,,,289,289,289,289',
'289,289,,,,289,289,289,,,,,,289,,289,289,289,289,765,765,765,,765,,',
',765,765,,,,765,,765,765,765,765,765,765,765,,,,,,765,765,765,765,765',
'765,765,,,765,,,,,,,765,,,765,765,765,765,765,765,765,765,,765,765,765',
',765,765,,765,765,765,,,,,,,,,,,,,,,,,,,,765,,,765,,,765,765,,,765,',
'765,,,,765,,,,,,,,765,,,,,765,765,765,765,765,765,,,,765,765,,,,,,,765',
',,765,765,765,475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475',
'475,475,,,,,,475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475',
'475,475,475,475,475,475,475,475,475,,475,475,,475,475,475,,,,,,,,,,',
',,,,,,,,,475,,,475,,,475,475,,,475,,475,,475,,475,,,,,,,,475,,,,,475',
'475,475,475,475,475,,,,475,475,,,,,,,475,,475,475,475,475,477,477,477',
',477,,,,477,477,,,,477,,477,477,477,477,477,477,477,,,,,,477,477,477',
'477,477,477,477,,,477,,,,,,,477,,,477,477,477,477,477,477,477,477,,477',
'477,477,,477,477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477,477',
',,477,,,,,,477,,,,,,,,477,,,,,477,477,477,477,477,477,,,,477,477,,,',
',,,477,,,477,477,477,478,478,478,,478,,,,478,478,,,,478,,478,478,478',
'478,478,478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478',
'478,478,478,478,478,478,478,,478,478,478,,478,478,,478,478,478,,,,,',
',,,,,,,,,,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,,,478,,,,,478',
'478,478,478,478,478,,,,478,478,,,,,,,478,,,478,478,478,479,479,479,',
'479,,,,479,479,,,,479,,479,479,479,479,479,479,479,,,,,,479,479,479',
'479,479,479,479,,,479,,,,,,,479,,,479,479,479,479,479,479,479,479,,479',
'479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479',
',,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479,479,479,,,,479,479,,,',
',,,479,,,479,479,479,612,612,612,,612,,,,612,612,,,,612,,612,612,612',
'612,612,612,612,,,,,,612,612,612,612,612,612,612,,,612,,,,,,,612,,,612',
'612,612,612,612,612,612,612,612,612,612,612,,612,612,,612,612,612,,',
',,,,,,,,,,,,,,,,,612,,,612,,,612,612,,,612,,612,,612,,612,,,,,,,,612',
',,,,612,612,612,612,612,612,,,,612,612,,,,,,,612,,612,612,612,612,123',
'123,123,123,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,',
'123,123,123,123,123,123,123,,,123,,,,,,123,123,123,123,123,123,123,123',
'123,123,123,123,,123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,',
',,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123',
'123,123,,,,123,123,,,,,,123,123,,,123,123,123,128,128,128,,128,,,,128',
'128,,,,128,,128,128,128,128,128,128,128,,,,,,128,128,128,128,128,128',
'128,,,128,,,,,,,128,,,128,128,128,128,128,128,128,128,,128,128,128,',
'128,128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128,128,,,128,,',
',,,128,,,,,,,,128,,,,,128,128,128,128,128,128,,,,128,128,,,,,,,128,',
',128,128,128,129,129,129,,129,,,,129,129,,,,129,,129,129,129,129,129',
'129,129,,,,,,129,129,129,129,129,129,129,,,129,,,,,,,129,,,129,129,129',
'129,129,129,129,129,,129,129,129,,129,129,,129,129,129,,,,,,,,,,,,,',
',,,,,,129,,,129,,,129,129,,,129,,,,,,129,,,,,,,,129,,,,,129,129,129',
'129,129,129,,,,129,129,,,,,,,129,,,129,129,129,242,242,242,,242,,,,242',
'242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242',
'242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,',
'242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,',
',,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,',
',242,242,242,589,589,589,,589,,,,589,589,,,,589,,589,589,589,589,589',
'589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589,,,589,589,589',
'589,589,589,589,589,,589,589,589,,589,589,,589,589,589,,,,,,,,,,,,,',
',,,,,,589,,,589,,,589,589,,,589,,,,,,589,,,,,,,,589,,,,,589,589,589',
'589,589,589,,,,589,589,,,,,,,589,,,589,589,589,231,231,231,,231,,,,231',
'231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231',
'231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,',
'231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,',
',,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,231,,,,,,231',
',,231,231,231,230,230,230,,230,,,,230,230,,,,230,,230,230,230,230,230',
'230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230',
'230,230,230,230,230,,230,230,230,,230,230,,230,230,230,,,,,,,,,,,,,',
',,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230',
'230,230,230,,,,230,230,,,,,,,230,,,230,230,230,229,229,229,,229,,,,229',
'229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229',
'229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229,229,',
'229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,',
',,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,,,,,,,229,',
',229,229,229,130,130,130,,130,,,,130,130,,,,130,,130,130,130,130,130',
'130,130,,,,,,130,130,130,130,130,130,130,,,130,,,,,,,130,,,130,130,130',
'130,130,130,130,130,,130,130,130,,130,130,,130,130,130,,,,,,,,,,,,,',
',,,,,,130,,,130,,,130,130,,,130,,,,,,130,,,,,,,,130,,,,,130,130,130',
'130,130,130,,,,130,130,,,,,,,130,,,130,130,130,131,131,131,,131,,,,131',
'131,,,,131,,131,131,131,131,131,131,131,,,,,,131,131,131,131,131,131',
'131,,,131,,,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131,',
'131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,',
',,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131,131,,,,,,,131,',
',131,131,131,132,132,132,132,132,,,,132,132,,,,132,,132,132,132,132',
'132,132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,132,132,,132',
'132,132,132,132,132,132,132,132,,132,132,132,,132,132,,132,132,132,',
',,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,,132,,,,132,,,,,,,,132,',
',,,132,132,132,132,132,132,,,,132,132,,,,,,,132,,,132,132,132,518,518',
'518,,518,,,,518,518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518',
'518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518',
'518,518,518,518,,518,518,,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,',
',518,518,,,518,,518,,518,,518,,,,,,,,518,,,,,518,518,518,518,518,518',
',,,518,518,,,,,,,518,,518,518,518,518,521,521,521,,521,,,,521,521,,',
',521,,521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,',
',521,,,,,,,521,,,521,521,521,521,521,521,521,521,521,521,521,521,,521',
'521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,521',
',521,,,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,,,,,,,521,,521',
'521,521,521,523,523,523,,523,,,,523,523,,,,523,,523,523,523,523,523',
'523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,,,523,,,523,523,523',
'523,523,523,523,523,,523,523,523,,523,523,,523,523,523,,,,,,,,,,,,,',
',,,,,,523,,,523,,,523,523,,,523,,,,,,523,,,,,,,,523,,,,,523,523,523',
'523,523,523,,,,523,523,,,,,,,523,,,523,523,523,528,528,528,528,528,',
',,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528',
'528,528,,,528,,,,,,528,528,528,528,528,528,528,528,528,528,528,528,',
'528,528,528,,528,528,,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528',
'528,,,528,,528,,,,528,,,,,,,,528,,,,,528,528,528,528,528,528,,,,528',
'528,,,,,,528,528,,,528,528,528,225,225,225,,225,,,,225,225,,,,225,,225',
'225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,',
',225,,,225,225,225,225,225,225,225,225,225,225,225,225,,225,225,,225',
'225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,225,,225,,225',
',,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225,,225,225',
'225,225,564,564,564,,564,,,,564,564,,,,564,,564,564,564,564,564,564',
'564,,,,,,564,564,564,564,564,564,564,,,564,,,,,,,564,,,564,564,564,564',
'564,564,564,564,564,564,564,564,,564,564,,564,564,564,,,,,,,,,,,,,,',
',,,,,564,,,564,,,564,564,,,564,,,,,,564,,,,,,,,564,,,,,564,564,564,564',
'564,564,,,,564,564,,,,,,,564,,564,564,564,564,561,561,561,,561,,,,561',
'561,,,,561,,561,561,561,561,561,561,561,,,,,,561,561,561,561,561,561',
'561,,,561,,,,,,,561,,,561,561,561,561,561,561,561,561,561,561,561,561',
',561,561,,561,561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,,561,',
'561,,,,561,,,,,,,,561,,,,,561,561,561,561,561,561,,,,561,561,,,,,,,561',
',561,561,561,561,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,',
',,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23',
'23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,',
'23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,536',
'536,536,,536,,,,536,536,,,,536,,536,536,536,536,536,536,536,,,,,,536',
'536,536,536,536,536,536,,,536,,,,,,,536,,,536,536,536,536,536,536,536',
'536,,536,536,536,,536,536,,,,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536',
'536,,,536,,,,,,,,,,,,,,,,,,,536,536,536,536,536,536,,,,536,536,,,,,',
',536,,,536,536,536,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220',
'220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220',
'220,220,220,220,220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,',
',,,,,,,,,,220,,,220,,,220,220,,,220,,220,,,,220,,,,,,,,220,,,,,220,220',
'220,220,220,220,,,,220,220,,,,,,,220,,,220,220,220,538,538,538,,538',
',,,538,538,,,,538,,538,538,538,538,538,538,538,,,,,,538,538,538,538',
'538,538,538,,,538,,,,,,,538,,,538,538,538,538,538,538,538,538,538,538',
'538,538,,538,538,,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538',
',,538,,538,,538,,538,,,,,,,,538,,,,,538,538,538,538,538,538,,,,538,538',
'227,227,,,227,,538,,538,538,538,538,,227,227,,227,227,227,227,227,227',
'227,,,227,227,,,,227,227,227,227,,,,,,227,,,,,,,,227,227,,227,227,227',
'227,227,227,227,227,227,227,227,,,227,,,,,,,,,,226,226,,,226,,,,,,227',
',,226,226,227,226,226,226,226,226,226,226,,,226,226,,,,226,226,226,226',
',,,,,226,,,,,,,,226,226,,226,226,226,226,226,226,226,226,226,226,226',
',,226,,,,,,,,,,539,539,,,539,,,,,,226,,,539,539,226,539,539,539,539',
'539,539,539,,,539,539,,,,539,539,539,539,,,,,,539,,,,,,,,539,539,,539',
'539,539,539,539,539,539,539,539,539,539,,,539,,,,,,,,,,614,614,,,614',
',,,,,539,,,614,614,539,614,614,614,614,614,614,614,,,614,614,,,,614',
'614,614,614,,,,,,614,,,,,,,,614,614,,614,614,614,614,614,614,614,614',
'614,614,614,,,614,,,,,,,,,,613,613,,,613,,,,,,614,,,613,613,614,613',
'613,613,613,613,613,613,,,613,613,,,,613,613,613,613,,,,,,613,,,,,,',
',613,613,,613,613,613,613,613,613,613,613,613,613,613,,,613,,,,,,,,',
',552,552,,,552,,,,,,613,,,552,552,613,552,552,552,552,552,552,552,,',
'552,552,,,,552,552,552,552,,,,,,552,,,,,,,,552,552,,552,552,552,552',
'552,552,552,552,552,552,552,,,552,,,,,,,,,,775,775,,,775,,,,,,552,,',
'775,775,552,775,775,775,775,775,775,775,,,775,775,,,,775,775,775,775',
',,,,,775,,,,,,,,775,775,,775,775,775,775,775,775,775,775,775,775,775',
',,775,,,,,,,,,,551,551,,,551,,,,,,775,,,551,551,775,551,551,551,551',
'551,551,551,,,551,551,,,,551,551,551,551,,,,,,551,,,,,,,,551,551,,551',
'551,551,551,551,551,551,551,551,551,551,,784,551,784,784,784,784,784',
',,,,275,275,,,275,784,,,,,551,,,275,275,551,275,275,275,275,275,275',
'275,,,275,275,784,,,275,275,275,275,,,784,784,784,784,,,,,,,,275,275',
',275,275,275,275,275,275,275,275,275,275,275,,,275,,,,,,,,,784,540,540',
',,540,,,,,,275,,,540,540,275,540,540,540,540,540,540,540,,,540,540,',
',,540,540,540,540,,,,,,540,,,,,,,,540,540,,540,540,540,540,540,540,540',
'540,540,540,540,,,540,,,,,,,,,,1027,1027,,,1027,,,,,,540,,,1027,1027',
'540,1027,1027,1027,1027,1027,1027,1027,,,1027,1027,,,,1027,1027,1027',
'1027,,,,,,1027,,,,,,,,1027,1027,,1027,1027,1027,1027,1027,1027,1027',
'1027,1027,1027,1027,,,1027,,,,,,,,,,1032,1032,,,1032,,,,,,1027,,,1032',
'1032,1027,1032,1032,1032,1032,1032,1032,1032,,,1032,1032,,,,1032,1032',
'1032,1032,,,,,,1032,,,,,,,,1032,1032,,1032,1032,1032,1032,1032,1032',
'1032,1032,1032,1032,1032,,,1032,,,,,,,,,,1033,1033,,,1033,,,,,,1032',
',,1033,1033,1032,1033,1033,1033,1033,1033,1033,1033,,,1033,1033,,,,1033',
'1033,1033,1033,,,,,,1033,,,,,,,,1033,1033,,1033,1033,1033,1033,1033',
'1033,1033,1033,1033,1033,1033,,,1033,,,,,,,,,,663,663,,,663,,,,,,1033',
',,663,663,1033,663,663,663,663,663,663,663,,,663,663,,,,663,663,663',
'663,,,,,,663,,,,,,,,663,663,,663,663,663,663,663,663,663,663,663,663',
'663,,,663,,,,,,,,,,662,662,,,662,,,,,,663,,,662,662,663,662,662,662',
'662,662,662,662,,,662,662,,,,662,662,662,662,,,,,,662,,,,,,,,662,662',
',662,662,662,662,662,662,662,662,662,662,662,,,662,,,,,,,,,,776,776',
',,776,,,,,,662,,,776,776,662,776,776,776,776,776,776,776,,,776,776,',
',,776,776,776,776,,,,,,776,,,,,,,,776,776,,776,776,776,776,776,776,776',
'776,776,776,776,,,776,,,,,,,,,,473,473,,,473,,,,,,776,,,473,473,776',
'473,473,473,473,473,473,473,,,473,473,,,,473,473,473,473,,,,,,473,,',
',,,,,473,473,,473,473,473,473,473,473,473,473,473,473,473,,,473,,,,',
',,,,,474,474,,,474,,,,,,473,,,474,474,473,474,474,474,474,474,474,474',
',,474,474,,,,474,474,474,474,,,,,,474,,,,,,,,474,474,,474,474,474,474',
'474,474,474,474,474,474,474,,354,474,354,354,354,354,354,940,,940,940',
'940,940,940,,,354,,,,,474,,940,,977,474,977,977,977,977,977,,,,,,,354',
'354,,977,,,,940,,354,354,354,354,,,,940,940,940,940,,,,,974,977,974',
'974,974,974,974,,,,977,977,977,977,,,974,,,,,354,,,,,,,940,,,,,,,,,',
'974,,,,,,,,977,974,974,974,974,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,974' ]
        racc_action_check = arr = ::Array.new(25561, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1015,  6303,    46,   nil,   325,   nil,   nil, 19634,  1321,
   nil,  1925,  2615,   -52,   nil,   -76,   -48,   682,    75,   394,
   314,   nil,   -69, 23578,  3700,   139,   nil,   -23,   nil,    -2,
  1528,  1188,  8346,  8618,  9978,   nil,  4385, 10794, 10930,   nil,
    49,   216,   271,   155,   319, 12698, 13106,   109, 13514,    92,
   800,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1788,   nil,   -60, 17458,   nil,    61,   nil, 19090, 19226,   nil,
   nil, 19362, 19498,   147,   nil,  2753,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -98,   nil,   nil,   nil,   nil,   nil,   nil,   108,
   114,   128,   145,  2339,   nil,   nil,   nil,   524,   nil,   nil,
   792,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 21130,   nil,   nil,   nil,   nil, 21266, 21402,
 22218, 22354, 22490,   194,   nil,   249,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,   nil,  6714,
 23850,  7122,  7394,  7938,  6986, 23170, 24134, 24061,   nil, 22082,
 21946, 21810,   nil,   nil,    98,   305,   360,   267,   389,   226,
   283,   nil, 21538,  6166,   301, 20042, 18954, 18682, 18546, 18410,
 18274, 16914, 16098, 15554, 15418, 15282, 15146, 14874, 14738, 14330,
 14194, 12562, 12154, 12018, 11746, 11610, 11338,   nil,   nil,   nil,
   nil, 11202,   nil,   nil,   nil, 24645,   nil,   nil,   296,  9706,
   nil,   nil,   319,   nil,   nil,   nil, 12970,   nil,   nil, 20178,
   nil,  3426,   nil,   309,   311,   nil,  9026,   354, 10114,   nil,
 10250, 10386,   nil,   nil,   451,   nil,   nil, 10658,  1208,   nil,
   308,  4522,   324,   435,   420, 11066,  4933,  1098,  1068,  1010,
   503,   934,   nil,   481,   459,   -10,   nil,   nil,   nil,   500,
   287,   476, 12834,   nil,   299,   547,   553,   851,   nil,   559,
 13922,   nil, 14058,  2878,   nil, 14602,   543,   nil,   190,   376,
   541, 15690,   nil,   nil, 25364,   632,     8,   -11, 16234,  5755,
  5207,   220,   629,   518,    26,    25,   661,   604,    23,   658,
   nil,   nil, 17730,   nil, 17866,   495,   585,   605,   618,   606,
   442,   143,   639,   561,   nil,   405,   nil,   nil,   nil,   nil,
   nil,   313,   nil,   392,   nil,   160,   nil,   579,   420,   nil,
   582,   447,   nil,   592,   -41,   nil,   625,    40,   nil,   465,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  3426,  2201,   nil,   nil,   nil,   nil,   637,
   nil,   622,   nil, 19770,   625,   nil,   618,   nil,   528,   255,
   717,   nil,   nil,  2878,   nil,   nil,   nil,   nil,   nil,  3015,
   642,   nil,   nil,   641,   643,   405,   417,  1060,   nil,   nil,
   nil,   658,   128,   683,   nil,   nil,  1656,  1316,   nil,   nil,
   nil,    61,   nil, 25229, 25302, 20450,   265, 20586, 20722, 20858,
  3974,  4659,   557,   480,   716,   727,   728,   736,  1411,  1738,
  1398,  4522,  4385,  4248,  5207,  5070,  4796,  1075,   747,  4933,
  4111,  3289,  1010,   806,   nil,  1448,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   691,   699,   nil,   nil, 22626,   nil,
   nil, 22762,   nil, 22898,   nil,   nil,   nil,   nil, 23034,  1263,
   714,   701,   701,   nil,   nil,   708, 23714,   715, 23986, 24207,
 24718,  1099,   765,   nil,   nil,  7258,   727,   nil,  7530,  7666,
  7802, 24572, 24426,   876,  3837,  8074,   851,   864,  1268,   nil,
   nil, 23442,   nil,   nil, 23306,   nil,   768,   nil,   433,   794,
   nil,   587,   nil,   755,   759,   nil,   761,   763,   773,   nil,
   nil,   nil,   nil,   nil,   nil,   764,   nil,   756,   nil, 21674,
   nil,   nil,   nil,   855,   nil,   nil,   nil,   856,   nil,   nil,
   858,  4659,   904,   nil,  4796,    19,   908,   918,   912,   928,
   nil,   nil, 20994, 24353, 24280,     4,   nil,   200,   329,   -17,
   nil,   595,   nil,   834, 19906,   nil,   854,   nil,   nil,   nil,
 18818,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   188,   nil,   nil,   131,   nil,   nil,   nil,   817,
   nil,   nil,   818,   nil,   836,   nil,  2477,   nil,   821, 18138,
 18002, 17594, 25083, 25010, 17322, 17050,   -81,   866, 16778, 16642,
 16506, 16370,   867,   nil,   nil,   nil, 15962, 15826,   874,   nil,
   nil,   395,   399,   926,   390,   852,   855,   nil,   -51,   957,
    65,   nil,   894,   nil,     8,   nil,   nil,   887,   nil,   930,
 13378,   nil,   nil,   nil,   nil,   -96, 13242,   893,   nil,   900,
   151,   160,   946,   359,   985,   950,   912,  6850,   nil,   976,
   983,   124,   166,   nil, 10522,   nil,   nil,   925,   147,   nil,
   nil,    23,   936,   204,   nil,   nil,   187,   991,   nil,   857,
   nil,  1152,   nil,  8754,   nil,   655,   nil,   942,   260,   nil,
   952,   nil,   nil,   nil,   nil,   679,   nil,  1067,   nil,   nil,
   nil,   nil,   nil,  1073,   nil, 20314,   957,    30,    29,     3,
    57,  6029,   nil,   330,   nil, 24499, 25156,  8210,   nil,   nil,
   nil,   580,  3015,  3152, 24634,  1620,  2063,    59,   790,  4248,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   955,  8482,   972,
   -77,   -75,   256,     0,   nil,  3563,  8890,   nil,   976,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  9162,
  9298,  9434,  9570,   -26,  9842,   nil,   nil,   455,   nil,  3289,
   nil,   nil,   993,   nil,   -53,   nil,   nil,   nil,   978,   259,
   nil,   nil,   nil,   nil,   nil,   nil,  3700,   nil,   979,  1022,
   nil,   nil,   nil,   nil,   nil,  3974,  4111,   981,   991,   989,
   nil,   nil,   nil,  1012,  1018,   nil,  1020,  1023,   nil,  1027,
   nil,  1034,   624,  1041,  1069,   nil,  1166,   nil,   nil, 11474,
   nil,  5070,  1173,   nil,   nil,    20,    28,  1176,   189,   971,
   nil,  1064,  5892, 11882,   -96,  1185,  1190,  1084,    63,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1073,  1083,   122,   nil,
   nil, 12290, 12426,  3152,  1084,  1087,   nil,  1088,  1089,  1091,
   nil,  1112,  1096,  1083, 13650,   nil,   nil,   nil,   nil,  3563,
  3837,   nil,    -9, 13786,   nil,  1113,  1224,  1181,   nil,   nil,
 25371,   nil,  7438,   nil,  7302,   nil,  7030,   nil,   nil,   nil,
   nil,   192,   521,  1108,   nil,    -7,   nil,   nil, 14466,  6577,
   nil,   nil,  1230,   294,   nil,   nil,   nil,   nil,   nil,  1155,
   nil,   312,   nil,   nil, 25426,   nil,   nil, 25389,   nil,  6894,
   nil,   nil,  1145, 15010,   837,  1214,   nil,  1262,  6440,   708,
    94,   703,  1219,   697,   nil,   nil,   nil,    64,   nil,   nil,
   nil,  1146,  1148,  1151,  1152,  1155,   785,  1159,   919,  5618,
   nil,   210,   nil,   nil,  5481,  5344,  1161,   nil,   nil,  1169,
  1171,  1183,  1184,   nil,  1189,   nil,   662, 24791,   nil,   nil,
  1313, 17186, 24864, 24937,   629,   nil,  1189,  1719,   nil,   nil,
   nil,   nil,   935,  1192,   634,   nil,   nil,   nil,  1313,  1318,
   nil,   723,   nil,   321,   nil,  1280,   nil,  1492,   nil,   nil,
  1248,  1249,   nil,  1214,    -8,    17,    -1,   626,   nil,  1216,
  1217,   nil,   nil,   nil,  1219,  1220,  1221,  1222,   -10,   nil,
  1379,   nil,   nil,   nil,   nil,  1225,   nil ]

racc_action_default = [
    -1,  -640,  -639,  -640,    -2,  -626,    -4,    -5,  -640,    -8,
    -9,  -640,  -640,  -640,   -35,  -640,  -640,   -40,  -640,  -640,
  -294,   -52,  -628,  -640,   -57,   -62,   -63,   -64,   -68,  -273,
  -273,  -273,  -308,  -341,  -342,   -80,  -639,   -84,   -92,   -94,
  -640,  -533,  -534,  -640,  -640,  -640,  -640,  -232,  -640,  -628,
  -246,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -613,  -296,  -299,  -639,  -306,  -316,  -421,  -640,  -640,   -59,
   -59,  -626,  -640,  -326,  -333,  -640,  -343,  -344,  -346,  -347,
  -348,  -349,  -350,  -351,  -352,  -353,  -354,  -355,  -364,  -466,
  -467,  -468,  -469,  -470,  -471,  -639,  -474,  -639,  -639,  -639,
  -639,  -639,  -639,  -639,  -511,  -517,  -518,  -611,  -522,  -523,
  -612,  -525,  -526,  -527,  -528,  -529,  -530,  -531,  -532,  -537,
  -538,  1087,    -3,  -627,  -635,  -636,  -637,    -7,  -640,  -640,
  -640,  -640,  -640,  -640,   -23,  -640,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,
  -200,  -201,  -202,  -203,  -204,  -205,  -206,   -28,  -132,  -639,
  -640,  -640,  -640,  -640,  -640,  -639,  -640,  -640,  -623,  -640,
  -640,  -628,  -629,   -56,  -640,  -533,  -534,  -640,  -294,  -640,
  -640,  -238,  -640,  -639,  -640,  -640,  -640,  -640,  -640,  -640,
  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,
  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -247,  -248,  -249,
  -250,  -640,  -357,  -450,  -429,  -640,  -624,  -625,   -69,  -640,
  -315,  -356,  -640,  -443,  -445,   -75,  -639,  -440,   -76,  -628,
   -77,  -253,  -268,  -639,  -639,  -272,  -640,  -278,  -640,  -606,
  -640,  -640,   -78,   -79,  -626,   -16,   -17,  -640,   -20,   -21,
   -82,  -639,  -628,  -640,   -85,   -88,  -639,  -100,  -101,  -640,
  -640,  -108,  -308,  -311,  -628,  -433,  -341,  -342,  -345,  -441,
  -640,   -90,  -640,   -96,  -304,  -519,  -520,  -640,  -226,  -227,
  -640,  -239,  -640,  -639,  -298,  -640,  -640,  -254,  -632,  -632,
  -640,  -639,  -317,  -318,  -565,   -58,  -640,  -640,  -640,  -639,
  -639,  -626,  -640,  -627,  -533,  -534,  -640,  -640,  -294,  -640,
  -374,  -375,  -640,  -329,  -640,  -123,  -124,  -166,  -167,  -168,
  -184,  -189,  -196,  -199,  -336,  -640,  -533,  -534,  -601,  -602,
  -472,  -640,  -495,  -640,  -497,  -640,  -499,  -640,  -640,  -479,
  -640,  -640,  -485,  -640,  -640,  -491,  -640,  -640,  -493,  -640,
  -510,  -512,  -513,  -514,  -515,    -6,  -638,   -29,   -30,   -31,
   -32,   -33,   -10,  -639,  -640,   -25,   -26,   -27,  -133,  -640,
   -36,   -38,   -39,  -640,  -640,   -37,  -640,   -41,  -640,  -294,
   -49,   -51,  -207,  -258,  -278,   -53,   -54,   -42,  -208,  -258,
  -628,  -263,  -264,  -639,  -639,  -614,  -615,  -273,  -438,  -616,
  -617,  -615,  -614,  -273,  -437,  -439,  -616,  -617,   -48,  -215,
   -55,  -628,  -314,  -640,  -640,  -639,  -304,  -640,  -640,  -640,
  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -228,  -229,
  -230,  -231,  -233,  -234,  -235,  -236,  -237,  -240,  -241,  -242,
  -243,  -628,  -251,  -640,  -451,  -273,  -614,  -615,   -66,   -70,
  -274,  -434,  -447,  -450,  -628,  -628,  -310,  -269,  -640,  -277,
  -270,  -640,  -275,  -640,  -279,  -609,  -610,   -15,  -627,   -19,
  -640,  -628,   -81,  -302,   -97,   -86,  -640,  -628,  -639,  -640,
  -640,  -107,  -640,  -519,  -520,  -640,   -93,   -98,  -640,  -640,
  -640,  -640,  -640,  -252,  -244,  -640,  -458,  -640,  -300,  -630,
  -255,  -634,  -633,  -257,  -634,  -305,  -640,  -604,  -632,  -640,
  -422,  -565,  -425,  -600,  -600,  -548,  -550,  -550,  -550,  -564,
  -566,  -567,  -568,  -569,  -570,  -571,  -572,  -640,  -574,  -640,
  -580,  -582,  -583,  -585,  -590,  -592,  -593,  -595,  -596,  -597,
  -640,  -639,  -365,  -366,  -639,  -640,  -640,  -640,  -640,  -640,
  -360,  -453,  -639,  -640,  -640,  -304,   -59,  -118,  -119,  -640,
  -121,  -640,  -294,  -639,  -640,  -334,  -543,  -338,  -621,  -622,
  -640,  -473,  -496,  -501,  -502,  -504,  -475,  -498,  -476,  -500,
  -477,  -478,  -640,  -481,  -483,  -640,  -484,  -487,  -488,  -640,
  -489,  -490,  -640,  -516,  -640,   -24,  -640,   -34,  -284,  -640,
  -640,  -639,  -640,  -640,  -640,  -640,  -442,  -640,  -265,  -267,
  -640,  -640,   -71,  -261,  -262,  -435,  -640,  -640,   -73,  -436,
  -313,  -614,  -615,  -614,  -615,  -628,  -640,  -428,  -639,   -65,
  -430,  -447,  -640,  -448,  -640,  -260,  -309,  -639,  -276,  -280,
  -640,  -607,  -608,   -18,   -22,   -83,  -640,   -89,   -95,  -628,
  -614,  -615,  -639,  -104,  -106,  -640,   -91,  -640,  -214,  -224,
  -225,  -628,  -639,  -358,  -639,  -297,  -363,  -628,  -632,  -307,
  -605,  -640,  -628,  -640,  -546,  -547,  -640,  -640,  -557,  -640,
  -560,  -640,  -562,  -640,  -376,  -640,  -378,  -380,  -387,  -571,
  -628,  -576,  -584,  -594,  -598,  -639,  -367,  -639,   -60,  -368,
  -369,  -321,  -322,  -640,  -324,  -640,  -628,  -614,  -615,  -618,
  -303,  -639,  -118,  -119,  -120,  -640,  -640,  -639,  -327,  -539,
  -541,  -330,  -639,  -639,  -565,  -565,  -640,  -628,  -640,  -639,
  -480,  -482,  -486,  -492,  -494,   -11,  -134,  -282,  -640,  -628,
  -614,  -615,  -615,  -614,   -50,  -259,  -640,  -631,  -639,   -44,
  -210,   -45,  -211,   -72,   -46,  -213,   -47,  -212,   -74,  -640,
  -640,  -640,  -640,  -442,  -640,  -410,  -411,  -628,  -413,  -639,
  -432,  -431,  -640,  -444,  -639,  -446,  -271,  -281,   -87,  -102,
   -99,  -312,   -12,   -14,  -359,  -361,  -639,  -465,  -459,  -639,
  -460,  -461,  -301,  -256,  -423,  -639,  -639,  -415,  -628,  -600,
  -581,  -599,  -549,  -550,  -550,  -575,  -550,  -550,  -591,  -550,
  -586,  -628,  -640,  -385,  -640,  -573,  -640,  -362,  -370,  -640,
  -372,  -639,  -640,   -61,  -323,  -640,  -442,  -640,  -118,  -119,
  -122,  -628,  -639,  -640,  -640,  -640,  -640,  -628,  -640,  -339,
  -603,  -503,  -506,  -507,  -508,  -509,  -640,  -283,  -442,   -43,
  -209,  -266,  -640,  -245,  -600,  -600,  -392,  -639,  -639,  -639,
  -409,  -640,  -628,  -571,  -640,  -578,  -588,  -452,   -67,  -639,
  -639,  -464,  -640,  -640,  -463,  -640,  -640,  -640,  -424,  -545,
  -640,  -553,  -640,  -555,  -640,  -558,  -640,  -561,  -563,  -377,
  -379,  -383,  -640,  -388,  -319,  -640,  -373,  -320,  -640,  -639,
  -325,  -442,  -640,  -640,  -331,  -335,  -337,  -542,  -544,  -543,
  -505,  -640,  -390,  -391,  -400,  -394,  -402,  -640,  -405,  -640,
  -407,  -412,  -640,  -640,  -577,  -640,  -449,  -639,  -639,  -109,
  -110,  -640,  -640,  -117,  -462,  -426,  -427,  -628,  -417,  -419,
  -420,  -550,  -550,  -550,  -550,  -381,  -640,  -386,  -640,  -639,
  -280,  -639,  -328,  -540,  -639,  -639,  -600,  -579,  -393,  -639,
  -639,  -639,  -639,  -589,  -639,  -414,  -587,  -640,  -304,   -13,
  -458,  -639,  -640,  -640,  -116,  -416,  -640,  -640,  -551,  -554,
  -556,  -559,  -640,  -384,  -639,  -454,  -455,  -456,  -640,  -640,
  -389,  -640,  -397,  -640,  -399,  -640,  -403,  -640,  -406,  -408,
  -303,  -618,  -457,  -628,  -614,  -615,  -618,  -115,  -418,  -550,
  -382,  -371,  -332,  -340,  -639,  -639,  -639,  -639,  -442,  -552,
  -640,  -395,  -398,  -401,  -404,  -639,  -396 ]

clist = [
'6,233,230,384,126,274,352,292,292,292,722,609,139,139,287,520,359,360',
'344,226,509,144,144,314,4,422,783,276,450,342,865,411,572,601,604,313',
'142,142,328,328,134,218,457,463,356,357,432,435,361,293,293,293,557',
'560,563,579,355,355,546,9,355,347,447,698,123,9,698,468,734,735,126',
'331,122,328,843,882,139,864,441,866,348,441,278,285,288,876,441,701',
'503,514,310,505,868,392,750,394,396,399,402,405,408,394,312,29,139,417',
'418,419,420,29,858,918,950,774,953,692,1000,355,355,355,355,294,294',
'294,29,127,998,666,829,1023,701,727,351,29,29,29,642,29,362,645,393',
'632,290,302,303,639,409,623,643,625,372,643,349,892,624,894,1014,374',
'782,626,786,969,369,353,566,388,920,919,29,29,690,350,29,340,656,520',
'922,691,275,883,9,758,997,2,1,570,854,472,354,421,731,424,1007,371,217',
'512,513,834,430,440,292,688,440,1023,1045,921,765,440,849,932,458,445',
'446,698,698,1000,390,391,429,470,471,395,398,451,29,1068,530,401,467',
'29,29,29,29,29,473,701,404,434,434,865,415,407,313,901,788,516,1043',
'789,950,732,410,893,871,703,292,930,863,763,1019,842,860,292,707,1017',
'292,133,511,865,532,890,630,716,579,730,929,385,778,32,685,627,1001',
'343,1070,32,451,345,,,,457,463,519,519,868,832,,293,,32,,982,,,126,542',
',293,32,32,32,313,32,,287,1020,313,328,1021,547,539,29,29,29,29,29,29',
'29,,694,1046,29,29,29,328,,605,,551,,1029,,709,32,32,29,,32,355,535',
'567,865,,,,939,712,,,606,607,126,,823,528,529,310,613,712,294,1015,310',
'527,,328,1071,328,,531,294,,29,,537,,,,839,29,,510,29,1074,791,,,791',
',,32,515,,,558,32,32,32,32,32,29,972,973,,29,,813,766,,29,836,,818,6',
'704,,,139,,680,608,712,667,,838,853,144,,,,662,,568,674,,886,29,654',
'29,679,,142,292,519,519,655,,673,698,458,,29,29,29,897,898,799,,,,,',
'695,696,,451,,467,908,701,457,463,9,686,,,1062,579,579,705,,674,,895',
'896,708,32,32,32,32,32,32,32,,,673,32,32,32,,809,811,672,1050,,292,814',
'816,678,441,32,,,,547,458,29,,,441,441,836,,547,,441,441,458,451,328',
',,,467,,,721,,328,,,,850,,,467,32,,,,689,,,32,959,771,32,936,,,961,',
',,,,861,,29,861,,,891,,32,,,,32,292,,,,32,712,,,,,458,,,755,962,,757',
'759,,,697,,988,451,,,781,,467,,,32,787,32,780,,,,,,,,29,,831,1009,32',
'32,32,292,,440,29,,,,,909,,458,,440,440,728,,,,440,440,29,139,,451,1047',
',,441,467,667,144,,916,830,,448,,738,740,742,469,841,,,,142,,852,,796',
'825,,,667,,,547,,,519,674,,32,679,,,29,840,,29,875,328,,,673,,857,29',
'899,,,,328,,847,804,851,1048,1049,29,,744,,,,29,,,,,,,,,1078,434,,900',
',,667,,,,32,,292,880,,880,,808,,,458,29,29,,,29,,,,,887,29,29,,,451',
'467,29,29,667,,,885,,440,,,139,906,,,,,,,,,,,,,,,32,,,519,857,,,,,861',
'32,938,916,,,916,,916,,,,,,,949,927,,32,,825,,1063,,,,,,,,,,,931,,934',
'712,,,,,967,935,,955,,,,,,,,,,,,355,,963,667,29,,,,32,,29,32,956,,355',
'29,29,744,,32,873,,29,,916,964,916,,916,968,916,32,,,857,,867,32,869',
'29,,,,859,,,,975,975,975,,,,916,725,,469,328,448,,986,987,29,,,,328',
'32,32,,,32,,,,,,32,32,29,,,,32,32,,,,29,29,1011,,941,943,1013,945,947',
',948,19,,,,761,762,19,764,,,1035,,,29,,29,,328,847,,1030,234,,,1032',
'917,29,29,718,,234,234,234,,19,319,319,,915,292,,1044,880,,,744,,744',
',458,975,975,975,975,,975,,,,,,467,451,29,29,234,234,467,,234,366,,',
',,880,667,,,32,,,,,,32,,,,,32,32,,29,,,,32,,,,,,,,975,975,975,975,,',
',,,32,,975,,,,,19,29,,1005,744,234,234,234,234,19,1038,1039,1040,1041',
',,32,1002,,1003,,1004,29,,,,,29,29,810,812,,,32,,815,817,,,,884,,32',
'32,29,,,976,978,980,,,,20,1022,,1024,,744,20,744,1016,,,915,,32,915',
'32,915,,,,,,,,,1079,32,32,,,,,,,20,321,321,,,,,744,,19,234,438,234,234',
'438,234,,,,438,234,234,,,,,,1069,,32,32,,,19,,,368,,,,,1075,,1076,,1077',
',,,,,,,,915,,915,,915,32,915,,1052,1054,1056,1058,954,1059,,234,1085',
',957,,,,234,960,910,234,,,,915,,965,966,20,32,,,810,812,817,815,,20',
'19,,,,19,,,,319,19,,,32,,,,,32,32,,1081,1082,1083,1084,,319,,,,,,1086',
',,32,41,19,,19,,,41,,,,,,,,,,234,19,19,,1012,,,,,,,,,,621,,621,,41,317',
'317,,,,,,,,,,,,,,,20,910,439,,,439,,,,,439,,,,,,,,,364,,,386,,20,,,',
',,19,,,,,,,,,,,,,,,,,,,,,,,,,1072,1073,,,,,,,,,,,,,,41,,,,,,,,,41,,',
'234,,,,,,20,,,,20,,,,321,20,,,,,,,,,,,,,,,,321,,,,,,,,,,,20,,20,,,,',
',,,,19,,,,,20,20,,319,,234,,,,,,,319,622,,622,,,,,,,234,,,,41,,,,,,',
',,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,20,,,,19,,,19,,,,,,,,234,,,,,,,,,,',
',234,,,,,,234,,,,,,,,,,,,,,,,,41,,,,41,,,,317,41,,,,438,234,,,19,,,',
',,438,438,317,,,,438,438,,,,,,41,,41,,,,,,,,,,,,,,41,41,,20,,,,319,',
',,321,,386,,386,,,319,,321,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,41,,,,,,,,19,,,,20,,234,20,,,,19,19,,,,,,19,,,,,,,42,,,,,,42,,,,438',
',,,,,,,,,,,,,,,,,,,,,,19,42,318,318,,439,,,,20,,431,444,,,439,439,19',
',,,439,439,,,,19,19,,,,,,,,,,365,,41,387,,,,,,,317,,,234,321,19,,,,317',
',,,,,321,19,234,,,,,,,,,,,,,,,,,,,,,,,522,42,524,,525,526,,,984,,42',
',,19,19,,,991,,,,,,,,41,,,41,20,,,,,,,,,,,20,20,,19,,,905,20,,,,,,,',
'569,,,,,,,,,439,,,1026,,,,,19,,,,,,,,,,,,,,,20,41,,,,,19,,,,42,19,19',
',,,,20,,,,,,18,,,20,20,234,18,,,,,42,,,,,,,,,317,,,,,,,658,,20,,317',
',,18,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,622,,,42,,20,20,42,,993',
',318,42,41,,,,,,,,,,,41,41,,,318,,,41,,,,20,,,,42,699,42,,569,,702,',
',,18,,,,,,42,42,,18,622,,,,,20,,,,387,,387,41,,,,,,,,,,,,699,,20,569',
',41,,20,20,,,,,,41,41,,,,,,,,,,,,,751,,,,16,,,,42,,16,,41,,,,,,,,,,',
'41,,,,,,,,,,,18,,18,,16,18,,,,,18,,,,,,,,,,,386,,,18,,41,41,,,989,,',
',,,797,,,,370,,,,,699,569,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,837,,42,386',
',,,,41,,318,18,,,16,18,,,,318,18,,,16,848,,,,,41,,,,,41,41,,,,,,,,870',
',,,18,,18,,,,,,,,,,,,,,18,18,444,,,,,,,,,,42,,,42,,,,,,,,,,,,,,,,,,',
',907,,,,,,,,,,,,16,,436,,,436,,,,,436,,,,,,,18,,,,,,,16,,,,42,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,318,,,,,,,,,,,318,,,,,,,16,,,,16',
',,,,16,,,,569,,,,,,,,,,,,,,,,,,,,,18,,16,,16,,,,,,,,,42,,,,,16,16,,',
',,42,42,1010,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,18,,',
'18,,,,,,16,,,,,,42,,,,,,,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,',
'18,,42,,18,,,,,,18,18,,,,,18,18,,,,,,,,,,,,,,,,,387,,,,,42,42,,,990',
',,,,,241,,,,,,16,,,291,291,291,,,,,,,,,42,,338,339,,341,,,,,,,,,,,,',
',,291,,,,387,,,,,42,,,,,,,,,,,,,18,,,,,,,,42,,,18,18,42,42,,,16,18,',
'16,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,,18,436',
',,,16,,,,18,18,436,436,,,,,436,436,,,,,,,,,,,,,,,,,18,,,,,,,,,,,18,',
',,,,,,,,,,,,291,443,,,449,291,,,,449,,,,,,,,,,,,,241,18,18,480,481,482',
'483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499',
'500,501,,,,,502,16,18,,,,,,291,,,,16,16,,291,,,291,16,,,,,,291,,291',
',291,291,18,,,,,436,,,,,,,,,,,,,,,,18,,,,,18,18,16,,,,,,,,,,553,,554',
',,,,16,,,,291,,,,,16,16,,,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,16,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,16,,291,994,,,,,,,,,,,,,,,,,,,,,',
',,,,16,,,,,,,,,,,,,,,291,,449,449,449,,,,,,,,,,16,,,,,,,,,,,,,,,,,,',
',,16,,,,,16,16,,291,,,291,,291,,,,,,,,,,,,,,,291,,,,,,,,,,449,719,720',
',,,,,,,,,,291,,,291,,,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,',
',,291,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,449,291,,,,805',
',,291,291,449,449,,,,,449,449,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,',
',,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,291,,,,,,',
',,,,,291,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,449,,,,,,,,,,,,,449,449,449',
'449,,913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,291,449,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,291' ]
        racc_goto_table = arr = ::Array.new(3707, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,26,39,69,117,168,101,45,45,45,14,112,70,70,84,86,41,41,60,37,51,74',
'74,62,2,10,120,37,35,39,204,69,167,105,105,13,73,73,78,78,21,21,49,49',
'23,23,28,28,23,81,81,81,12,82,82,199,30,30,64,9,30,6,32,87,8,9,87,32',
'150,150,117,63,5,78,16,108,70,156,24,156,81,24,50,50,50,106,24,213,169',
'35,58,49,208,6,145,6,6,6,6,6,6,6,59,53,70,23,23,23,23,53,159,155,143',
'67,146,52,162,30,30,30,30,83,83,83,53,7,161,36,157,209,213,125,126,53',
'53,53,189,53,5,189,186,190,57,57,57,190,186,68,190,68,127,190,83,128',
'129,130,131,132,133,134,135,136,114,103,100,97,147,156,53,53,85,80,53',
'79,75,86,153,54,48,44,9,42,160,3,1,163,164,60,165,9,166,31,146,25,22',
'172,173,175,26,26,45,177,26,209,178,159,179,26,180,181,84,30,30,87,87',
'162,184,185,13,30,30,187,188,6,53,161,20,191,70,53,53,53,53,53,37,213',
'192,81,81,204,7,193,13,194,195,60,146,196,143,167,197,198,145,19,45',
'17,203,112,155,15,205,45,64,206,45,11,84,204,60,67,212,64,199,82,157',
'121,116,56,35,122,156,123,146,56,6,124,,,,49,49,6,6,208,52,,81,,56,',
'159,,,117,39,,81,56,56,56,13,56,,84,156,13,78,156,62,37,53,53,53,53',
'53,53,53,,169,108,53,53,53,78,,23,,37,,16,,35,56,56,53,,56,30,63,6,204',
',,,150,49,,,13,13,117,,36,8,9,58,37,49,83,120,58,5,,78,106,78,,59,83',
',53,,59,,,,36,53,,57,53,156,190,,,190,,,56,57,,,9,56,56,56,56,56,53',
'150,150,,53,,51,35,,53,86,,51,6,10,,,70,,60,5,49,39,,64,82,74,,,,37',
',83,84,,36,53,2,53,84,,73,45,6,6,21,,6,87,84,,53,53,53,167,167,35,,',
',,,60,60,,6,,70,36,213,49,49,9,39,,,14,199,199,60,,84,,12,12,60,56,56',
'56,56,56,56,56,,,6,56,56,56,,32,32,50,150,,45,32,32,50,24,56,,,,62,84',
'53,,,24,24,86,,62,,24,24,84,6,78,,,,70,,,30,,78,,,,28,,,70,56,,,,50',
',,56,105,41,56,12,,,36,,,,,,151,,53,151,,,35,,56,,,,56,45,,,,56,49,',
',,,84,,,13,12,,13,117,,,83,,105,6,,,30,,70,,,56,30,56,6,,,,,,,,53,,101',
'105,56,56,56,45,,26,53,,,,,32,,84,,26,26,83,,,,26,26,53,70,,6,112,,',
'24,70,39,74,,151,168,,76,,202,202,202,76,60,,,,73,,60,,21,6,,,39,,,62',
',,6,84,,56,84,,,53,62,,53,60,78,,,6,,39,53,69,,,,78,,6,9,6,12,12,53',
',144,,,,53,,,,,,,,,36,81,,60,,,39,,,,56,,45,6,,6,,83,,,84,53,53,,,53',
',,,,13,53,53,,,6,70,53,53,39,,,81,,26,,,70,13,,,,,,,,,,,,,,,56,,,6,39',
',,,,151,56,60,151,,,151,,151,,,,,,,60,13,,56,,6,,35,,,,,,,,,,,13,,6',
'49,,,,,60,13,,23,,,,,,,,,,,,30,,23,39,53,,,,56,,53,56,13,,30,53,53,144',
',56,144,,53,,151,117,151,,151,117,151,56,,,39,,154,56,154,53,,,,149',
',,,6,6,6,,,,151,99,,76,78,76,,13,13,53,,,,78,56,56,,,56,,,,,,56,56,53',
',,,56,56,,,,53,53,13,,202,202,117,202,202,,202,34,,,,99,99,34,99,,,39',
',,53,,53,,78,6,,13,34,,,37,154,53,53,76,,34,34,34,,34,34,34,,149,45',
',13,6,,,144,,144,,84,6,6,6,6,,6,,,,,,70,6,53,53,34,34,70,,34,34,,,,',
'6,39,,,56,,,,,,56,,,,,56,56,,53,,,,56,,,,,,,,6,6,6,6,,,,,,56,,6,,,,',
'34,53,,144,144,34,34,34,34,34,202,202,202,202,,,56,154,,154,,154,53',
',,,,53,53,76,76,,,56,,76,76,,,,99,,56,56,53,,,152,152,152,,,,38,154',
',154,,144,38,144,149,,,149,,56,149,56,149,,,,,,,,,202,56,56,,,,,,,38',
'38,38,,,,,144,,34,34,34,34,34,34,34,,,,34,34,34,,,,,,154,,56,56,,,34',
',,38,,,,,154,,154,,154,,,,,,,,,149,,149,,149,56,149,,152,152,152,152',
'99,152,,34,154,,99,,,,34,99,76,34,,,,149,,99,99,38,56,,,76,76,76,76',
',38,34,,,,34,,,,34,34,,,56,,,,,56,56,,152,152,152,152,,34,,,,,,152,',
',56,65,34,,34,,,65,,,,,,,,,,34,34,34,,99,,,,,,,,,,34,,34,,65,65,65,',
',,,,,,,,,,,,,38,76,38,,,38,,,,,38,,,,,,,,,65,,,65,,38,,,,,,34,,,,,,',
',,,,,,,,,,,,,,,,,,99,99,,,,,,,,,,,,,,65,,,,,,,,,65,,,34,,,,,,38,,,,38',
',,,38,38,,,,,,,,,,,,,,,,38,,,,,,,,,,,38,,38,,,,,,,,,34,,,,,38,38,,34',
',34,,,,,,,34,38,,38,,,,,,,34,,,,65,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,',
',,,,,,38,,,,34,,,34,,,,,,,,34,,,,,,,,,,,,34,,,,,,34,,,,,,,,,,,,,,,,',
'65,,,,65,,,,65,65,,,,34,34,,,34,,,,,,34,34,65,,,,34,34,,,,,,65,,65,',
',,,,,,,,,,,,65,65,,38,,,,34,,,,38,,65,,65,,,34,,38,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,34,,,,38,,34,38,,,,34,34,,,,,,34',
',,,,,,66,,,,,,66,,,,34,,,,,,,,,,,,,,,,,,,,,,,34,66,66,66,,38,,,,38,',
'29,29,,,38,38,34,,,,38,38,,,,34,34,,,,,,,,,,66,,65,66,,,,,,,65,,,34',
'38,34,,,,65,,,,,,38,34,34,,,,,,,,,,,,,,,,,,,,,,,29,66,29,,29,29,,,34',
',66,,,34,34,,,34,,,,,,,,65,,,65,38,,,,,,,,,,,38,38,,34,,,38,38,,,,,',
',,29,,,,,,,,,38,,,34,,,,,34,,,,,,,,,,,,,,,38,65,,,,,34,,,,66,34,34,',
',,,38,,,,,,33,,,38,38,34,33,,,,,66,,,,,,,,,65,,,,,,,29,,38,,65,,,33',
',,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,66,,38,38,66,,38,,66,66',
'65,,,,,,,,,,,65,65,,,66,,,65,,,,38,,,,66,29,66,,29,,29,,,,33,,,,,,66',
'66,,33,38,,,,,38,,,,66,,66,65,,,,,,,,,,,,29,,38,29,,65,,38,38,,,,,,65',
'65,,,,,,,,,,,,,29,,,,27,,,,66,,27,,65,,,,,,,,,,,65,,,,,,,,,,,33,,33',
',27,33,,,,,33,,,,,,,,,,,65,,,33,,65,65,,,65,,,,,,29,,,,27,,,,,29,29',
',,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,29,,66,65,,,,,65,,66,33,,,27,33,,,,66',
'33,,,27,29,,,,,65,,,,,65,65,,,,,,,,29,,,,33,,33,,,,,,,,,,,,,,33,33,29',
',,,,,,,,,66,,,66,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,27,,27,,,27,,,,,27',
',,,,,,33,,,,,,,27,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66',
',,,,,,,,,,66,,,,,,,27,,,,27,,,,,27,,,,29,,,,,,,,,,,,,,,,,,,,,33,,27',
',27,,,,,,,,,66,,,,,27,27,,,,,66,66,29,,,,,66,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,66,,33,,,33,,,,,,27,,,,,,66,,,,,,,,,66,66,,,,,,,,,,',
',,,,,,,,,,,,,,66,,,,,,,,,33,,66,,33,,,,,,33,33,,,,,33,33,,,,,,,,,,,',
',,,,,66,,,,,66,66,,,66,,,,,,40,,,,,,27,,,40,40,40,,,,,,,,,66,,40,40',
',40,,,,,,,,,,,,,,,40,,,,66,,,,,66,,,,,,,,,,,,,33,,,,,,,,66,,,33,33,66',
'66,,,27,33,,27,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,',
',,,,,33,27,,,,27,,,,33,33,27,27,,,,,27,27,,,,,,,,,,,,,,,,,33,,,,,,,',
',,,33,,,,,,,,,,,,,,40,40,,,40,40,,,,40,,,,,,,,,,,,,40,33,33,40,40,40',
'40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,,,,,40,27,33',
',,,,,40,,,,27,27,,40,,,40,27,,,,,,40,,40,,40,40,33,,,,,27,,,,,,,,,,',
',,,,,33,,,,,33,33,27,,,,,,,,,,40,,40,,,,,27,,,,40,,,,,27,27,,,,,,,,',
',,,,,,,,,,,,,,,,27,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'27,27,,40,27,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,40,,40,40,40',
',,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,27,,,,,27,27,,40,,,40,,40,,,,,,,,,,',
',,,,40,,,,,,,,,,40,40,40,,,,,,,,,,,40,,,40,,,,,,,,,,,,,,,,,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,40,40,40,,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,40,',
',,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40',
',,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,40,,,,,,,,,,,,,40,40,40',
'40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3707, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   184,    22,   183,   nil,    67,    -2,   117,    59,    57,
  -108,   255,  -291,    -1,  -546,  -463,  -648,  -587,   nil,  -275,
   -83,    29,   182,   -23,  -143,   121,   -22,  2176,  -174,  1585,
   -11,    57,  -162,  1989,   965,  -197,  -323,     0,  1139,   -20,
  2675,   -53,  -424,   nil,  -579,   -25,   nil,   nil,   151,  -184,
    53,  -258,  -397,   101,  -331,   nil,   275,   110,    54,    66,
   -44,   nil,   -14,    33,  -274,  1305,  1759,  -506,  -225,   -72,
     1,   nil,   nil,    25,    10,  -254,   447,   nil,     1,   126,
   108,    17,  -295,    89,   -16,  -335,  -279,  -455,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    90,   nil,   365,
  -187,   -59,   nil,    97,   nil,  -323,  -670,   nil,  -682,   nil,
   nil,   nil,  -351,   nil,    90,   nil,  -347,    -1,   nil,   nil,
  -600,   200,  -106,   220,   223,  -427,    68,    77,  -625,  -219,
  -626,  -808,    83,  -467,  -225,  -467,  -738,   nil,   nil,   nil,
   nil,   nil,   nil,  -760,   140,  -493,  -760,  -661,   nil,   178,
  -505,  -159,   218,  -651,   165,  -716,  -660,  -560,   nil,  -622,
  -755,  -811,  -821,  -169,  -545,   122,  -380,  -322,   -20,  -185,
   nil,   nil,   -88,   -88,   nil,  -496,   nil,  -303,  -807,  -405,
  -516,  -640,   nil,   nil,   124,   122,    43,   123,   123,  -262,
  -250,   127,   135,   139,  -545,  -390,  -388,   147,  -528,  -299,
   nil,   nil,    97,  -481,  -707,  -473,  -708,   nil,  -647,  -848,
   nil,   nil,  -119,  -434 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   305,     7,   363,   308,
   nil,   nil,   nil,   556,   nil,   nil,   nil,   nil,   304,   306,
   nil,   nil,   nil,   nil,    14,    15,    21,   239,   nil,   297,
    17,   nil,   437,   240,   337,   nil,   nil,   776,   238,   346,
    24,   nil,   nil,   358,   nil,    25,    26,    27,   nil,   715,
   nil,   nil,   nil,   325,   nil,    28,   322,   452,    35,   nil,
   nil,    37,    40,    39,   nil,   235,   236,   620,   nil,   141,
   460,   140,   143,    90,    91,   nil,   442,    47,    50,   271,
   nil,   453,   nil,   454,   465,   675,   517,   295,   279,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    61,   nil,
   nil,   280,    65,   nil,    67,   nil,   nil,    68,   878,    69,
    70,    71,   nil,    72,   nil,    73,   nil,   602,    74,    75,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   284,   273,   724,
   846,   611,   879,   746,   586,   nil,   747,  1018,   914,   574,
   nil,   575,   nil,   nil,   576,   nil,   578,   nil,   826,   nil,
   nil,   nil,   584,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   464,   282,   nil,   nil,   693,   nil,   504,   nil,   nil,   nil,
   nil,   nil,    89,    92,    94,   nil,   nil,   nil,   nil,   nil,
   637,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   862,
   785,   573,   nil,   577,   588,   590,   925,   593,   594,   926,
   597,   600,   nil,   299 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 145, :_reduce_1,
  2, 143, :_reduce_2,
  2, 144, :_reduce_3,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_6,
  2, 146, :_reduce_none,
  1, 149, :_reduce_8,
  0, 153, :_reduce_9,
  3, 149, :_reduce_10,
  3, 152, :_reduce_11,
  0, 159, :_reduce_12,
  6, 154, :_reduce_13,
  3, 154, :_reduce_14,
  2, 155, :_reduce_15,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_18,
  2, 160, :_reduce_19,
  1, 161, :_reduce_none,
  0, 162, :_reduce_21,
  3, 161, :_reduce_22,
  0, 173, :_reduce_23,
  4, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  2, 151, :_reduce_28,
  3, 151, :_reduce_29,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  3, 151, :_reduce_32,
  3, 151, :_reduce_33,
  4, 151, :_reduce_34,
  1, 151, :_reduce_none,
  3, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  1, 151, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  6, 166, :_reduce_43,
  5, 166, :_reduce_44,
  5, 166, :_reduce_45,
  5, 166, :_reduce_46,
  5, 166, :_reduce_47,
  3, 166, :_reduce_48,
  1, 174, :_reduce_49,
  3, 174, :_reduce_50,
  1, 174, :_reduce_none,
  1, 172, :_reduce_none,
  3, 172, :_reduce_53,
  3, 172, :_reduce_54,
  3, 172, :_reduce_55,
  2, 172, :_reduce_56,
  1, 172, :_reduce_none,
  1, 165, :_reduce_58,
  0, 185, :_reduce_59,
  0, 186, :_reduce_60,
  4, 183, :_reduce_61,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 188, :_reduce_none,
  4, 188, :_reduce_65,
  0, 196, :_reduce_66,
  4, 193, :_reduce_67,
  1, 195, :_reduce_68,
  2, 187, :_reduce_69,
  3, 187, :_reduce_70,
  4, 187, :_reduce_71,
  5, 187, :_reduce_72,
  4, 187, :_reduce_73,
  5, 187, :_reduce_74,
  2, 187, :_reduce_75,
  2, 187, :_reduce_76,
  2, 187, :_reduce_77,
  2, 187, :_reduce_78,
  2, 187, :_reduce_79,
  1, 167, :_reduce_none,
  3, 167, :_reduce_81,
  1, 201, :_reduce_none,
  3, 201, :_reduce_83,
  1, 200, :_reduce_84,
  2, 200, :_reduce_85,
  3, 200, :_reduce_86,
  5, 200, :_reduce_87,
  2, 200, :_reduce_88,
  4, 200, :_reduce_89,
  2, 200, :_reduce_90,
  4, 200, :_reduce_91,
  1, 200, :_reduce_92,
  3, 200, :_reduce_93,
  1, 204, :_reduce_none,
  3, 204, :_reduce_95,
  2, 203, :_reduce_96,
  3, 203, :_reduce_97,
  1, 206, :_reduce_98,
  3, 206, :_reduce_99,
  1, 205, :_reduce_100,
  1, 205, :_reduce_101,
  4, 205, :_reduce_102,
  3, 205, :_reduce_103,
  3, 205, :_reduce_104,
  3, 205, :_reduce_105,
  3, 205, :_reduce_106,
  2, 205, :_reduce_107,
  1, 205, :_reduce_108,
  1, 169, :_reduce_109,
  1, 169, :_reduce_110,
  4, 169, :_reduce_111,
  3, 169, :_reduce_112,
  3, 169, :_reduce_113,
  3, 169, :_reduce_114,
  3, 169, :_reduce_115,
  2, 169, :_reduce_116,
  1, 169, :_reduce_117,
  1, 209, :_reduce_118,
  1, 209, :_reduce_none,
  2, 210, :_reduce_120,
  1, 210, :_reduce_121,
  3, 210, :_reduce_122,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_126,
  1, 211, :_reduce_127,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 163, :_reduce_130,
  1, 163, :_reduce_none,
  1, 164, :_reduce_132,
  0, 217, :_reduce_133,
  4, 164, :_reduce_134,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  3, 182, :_reduce_207,
  3, 182, :_reduce_208,
  6, 182, :_reduce_209,
  5, 182, :_reduce_210,
  5, 182, :_reduce_211,
  5, 182, :_reduce_212,
  5, 182, :_reduce_213,
  4, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  3, 182, :_reduce_223,
  4, 182, :_reduce_224,
  4, 182, :_reduce_225,
  2, 182, :_reduce_226,
  2, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_229,
  3, 182, :_reduce_230,
  3, 182, :_reduce_231,
  1, 182, :_reduce_none,
  3, 182, :_reduce_233,
  3, 182, :_reduce_234,
  3, 182, :_reduce_235,
  3, 182, :_reduce_236,
  3, 182, :_reduce_237,
  2, 182, :_reduce_238,
  2, 182, :_reduce_239,
  3, 182, :_reduce_240,
  3, 182, :_reduce_241,
  3, 182, :_reduce_242,
  3, 182, :_reduce_243,
  3, 182, :_reduce_244,
  6, 182, :_reduce_245,
  1, 182, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_251,
  3, 219, :_reduce_252,
  1, 171, :_reduce_253,
  1, 222, :_reduce_none,
  2, 222, :_reduce_255,
  4, 222, :_reduce_256,
  2, 222, :_reduce_257,
  1, 218, :_reduce_none,
  3, 218, :_reduce_259,
  3, 226, :_reduce_260,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 177, :_reduce_263,
  1, 177, :_reduce_264,
  2, 177, :_reduce_265,
  4, 177, :_reduce_266,
  2, 177, :_reduce_267,
  1, 199, :_reduce_268,
  2, 199, :_reduce_269,
  2, 199, :_reduce_270,
  4, 199, :_reduce_271,
  1, 199, :_reduce_272,
  0, 230, :_reduce_273,
  2, 192, :_reduce_274,
  2, 229, :_reduce_275,
  2, 228, :_reduce_276,
  1, 228, :_reduce_none,
  1, 223, :_reduce_278,
  2, 223, :_reduce_279,
  3, 223, :_reduce_280,
  4, 223, :_reduce_281,
  3, 170, :_reduce_282,
  4, 170, :_reduce_283,
  2, 170, :_reduce_284,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_295,
  0, 265, :_reduce_296,
  4, 220, :_reduce_297,
  2, 220, :_reduce_298,
  0, 266, :_reduce_299,
  0, 267, :_reduce_300,
  5, 220, :_reduce_301,
  3, 220, :_reduce_302,
  3, 220, :_reduce_303,
  2, 220, :_reduce_304,
  3, 220, :_reduce_305,
  0, 268, :_reduce_306,
  4, 220, :_reduce_307,
  1, 220, :_reduce_308,
  4, 220, :_reduce_309,
  3, 220, :_reduce_310,
  1, 220, :_reduce_311,
  5, 220, :_reduce_312,
  4, 220, :_reduce_313,
  3, 220, :_reduce_314,
  2, 220, :_reduce_315,
  1, 220, :_reduce_none,
  2, 220, :_reduce_317,
  2, 220, :_reduce_318,
  6, 220, :_reduce_319,
  6, 220, :_reduce_320,
  4, 220, :_reduce_321,
  4, 220, :_reduce_322,
  5, 220, :_reduce_323,
  4, 220, :_reduce_324,
  6, 220, :_reduce_325,
  0, 269, :_reduce_326,
  0, 270, :_reduce_327,
  7, 220, :_reduce_328,
  0, 271, :_reduce_329,
  0, 272, :_reduce_330,
  0, 273, :_reduce_331,
  9, 220, :_reduce_332,
  0, 274, :_reduce_333,
  0, 275, :_reduce_334,
  6, 220, :_reduce_335,
  0, 276, :_reduce_336,
  6, 220, :_reduce_337,
  0, 277, :_reduce_338,
  0, 278, :_reduce_339,
  9, 220, :_reduce_340,
  1, 220, :_reduce_341,
  1, 220, :_reduce_342,
  1, 220, :_reduce_343,
  1, 220, :_reduce_344,
  1, 176, :_reduce_345,
  1, 240, :_reduce_none,
  1, 246, :_reduce_none,
  1, 249, :_reduce_none,
  1, 251, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 255, :_reduce_none,
  1, 257, :_reduce_none,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 279, :_reduce_none,
  1, 280, :_reduce_none,
  1, 281, :_reduce_none,
  1, 282, :_reduce_none,
  1, 283, :_reduce_none,
  1, 157, :_reduce_none,
  1, 284, :_reduce_none,
  1, 241, :_reduce_none,
  1, 198, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  2, 247, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 248, :_reduce_none,
  5, 248, :_reduce_371,
  1, 250, :_reduce_none,
  2, 250, :_reduce_373,
  1, 256, :_reduce_none,
  1, 256, :_reduce_375,
  1, 285, :_reduce_none,
  3, 285, :_reduce_377,
  1, 288, :_reduce_378,
  3, 288, :_reduce_379,
  1, 287, :_reduce_380,
  4, 287, :_reduce_381,
  6, 287, :_reduce_382,
  3, 287, :_reduce_383,
  5, 287, :_reduce_384,
  2, 287, :_reduce_385,
  4, 287, :_reduce_386,
  1, 287, :_reduce_387,
  3, 287, :_reduce_388,
  4, 289, :_reduce_389,
  2, 289, :_reduce_390,
  2, 289, :_reduce_391,
  1, 289, :_reduce_392,
  2, 294, :_reduce_393,
  1, 294, :_reduce_none,
  6, 295, :_reduce_395,
  8, 295, :_reduce_396,
  4, 295, :_reduce_397,
  6, 295, :_reduce_398,
  4, 295, :_reduce_399,
  2, 295, :_reduce_400,
  6, 295, :_reduce_401,
  2, 295, :_reduce_402,
  4, 295, :_reduce_403,
  6, 295, :_reduce_404,
  2, 295, :_reduce_405,
  4, 295, :_reduce_406,
  2, 295, :_reduce_407,
  4, 295, :_reduce_408,
  1, 295, :_reduce_409,
  1, 299, :_reduce_410,
  1, 299, :_reduce_411,
  3, 300, :_reduce_412,
  1, 300, :_reduce_413,
  4, 300, :_reduce_414,
  1, 301, :_reduce_none,
  4, 301, :_reduce_416,
  1, 302, :_reduce_417,
  3, 302, :_reduce_418,
  1, 303, :_reduce_419,
  1, 303, :_reduce_none,
  0, 307, :_reduce_421,
  0, 308, :_reduce_422,
  4, 245, :_reduce_423,
  4, 305, :_reduce_424,
  1, 305, :_reduce_425,
  3, 306, :_reduce_426,
  3, 306, :_reduce_427,
  3, 310, :_reduce_428,
  2, 189, :_reduce_429,
  4, 189, :_reduce_430,
  5, 189, :_reduce_431,
  5, 189, :_reduce_432,
  0, 313, :_reduce_433,
  3, 244, :_reduce_434,
  4, 244, :_reduce_435,
  4, 244, :_reduce_436,
  3, 244, :_reduce_437,
  3, 244, :_reduce_438,
  3, 244, :_reduce_439,
  2, 244, :_reduce_440,
  1, 244, :_reduce_441,
  4, 244, :_reduce_442,
  0, 314, :_reduce_443,
  4, 243, :_reduce_444,
  0, 315, :_reduce_445,
  4, 243, :_reduce_446,
  0, 316, :_reduce_447,
  0, 317, :_reduce_448,
  4, 194, :_reduce_449,
  0, 318, :_reduce_450,
  0, 319, :_reduce_451,
  4, 311, :_reduce_452,
  0, 321, :_reduce_453,
  6, 254, :_reduce_454,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  6, 156, :_reduce_457,
  0, 156, :_reduce_458,
  1, 322, :_reduce_459,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  2, 323, :_reduce_462,
  1, 323, :_reduce_none,
  2, 158, :_reduce_464,
  1, 158, :_reduce_none,
  1, 231, :_reduce_466,
  1, 231, :_reduce_467,
  1, 231, :_reduce_none,
  1, 232, :_reduce_469,
  1, 325, :_reduce_470,
  1, 325, :_reduce_none,
  2, 325, :_reduce_472,
  3, 326, :_reduce_473,
  1, 326, :_reduce_474,
  3, 233, :_reduce_475,
  3, 234, :_reduce_476,
  3, 235, :_reduce_477,
  3, 235, :_reduce_478,
  1, 330, :_reduce_479,
  3, 330, :_reduce_480,
  1, 331, :_reduce_none,
  2, 331, :_reduce_482,
  3, 237, :_reduce_483,
  3, 237, :_reduce_484,
  1, 333, :_reduce_485,
  3, 333, :_reduce_486,
  3, 236, :_reduce_487,
  3, 236, :_reduce_488,
  3, 238, :_reduce_489,
  3, 238, :_reduce_490,
  1, 334, :_reduce_491,
  3, 334, :_reduce_492,
  1, 335, :_reduce_493,
  3, 335, :_reduce_494,
  1, 327, :_reduce_495,
  2, 327, :_reduce_496,
  1, 328, :_reduce_497,
  2, 328, :_reduce_498,
  1, 329, :_reduce_499,
  2, 329, :_reduce_500,
  1, 332, :_reduce_501,
  0, 337, :_reduce_502,
  3, 332, :_reduce_503,
  0, 338, :_reduce_504,
  4, 332, :_reduce_505,
  1, 336, :_reduce_506,
  1, 336, :_reduce_507,
  1, 336, :_reduce_508,
  1, 336, :_reduce_none,
  2, 215, :_reduce_510,
  1, 215, :_reduce_511,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  3, 216, :_reduce_516,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  2, 324, :_reduce_519,
  2, 324, :_reduce_520,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_526,
  1, 208, :_reduce_527,
  1, 208, :_reduce_528,
  1, 208, :_reduce_529,
  1, 208, :_reduce_530,
  1, 208, :_reduce_531,
  1, 208, :_reduce_532,
  1, 239, :_reduce_533,
  1, 239, :_reduce_534,
  1, 175, :_reduce_535,
  1, 175, :_reduce_536,
  1, 180, :_reduce_537,
  1, 180, :_reduce_538,
  0, 340, :_reduce_539,
  4, 258, :_reduce_540,
  1, 258, :_reduce_541,
  3, 262, :_reduce_542,
  0, 342, :_reduce_543,
  3, 262, :_reduce_544,
  4, 341, :_reduce_545,
  2, 341, :_reduce_546,
  2, 341, :_reduce_547,
  1, 341, :_reduce_none,
  2, 344, :_reduce_549,
  0, 344, :_reduce_550,
  6, 309, :_reduce_551,
  8, 309, :_reduce_552,
  4, 309, :_reduce_553,
  6, 309, :_reduce_554,
  4, 309, :_reduce_555,
  6, 309, :_reduce_556,
  2, 309, :_reduce_557,
  4, 309, :_reduce_558,
  6, 309, :_reduce_559,
  2, 309, :_reduce_560,
  4, 309, :_reduce_561,
  2, 309, :_reduce_562,
  4, 309, :_reduce_563,
  1, 309, :_reduce_564,
  0, 309, :_reduce_565,
  1, 304, :_reduce_566,
  1, 304, :_reduce_567,
  1, 304, :_reduce_568,
  1, 304, :_reduce_569,
  1, 286, :_reduce_none,
  1, 286, :_reduce_571,
  1, 346, :_reduce_none,
  3, 346, :_reduce_573,
  1, 296, :_reduce_574,
  3, 296, :_reduce_575,
  2, 347, :_reduce_576,
  2, 348, :_reduce_577,
  1, 290, :_reduce_none,
  3, 290, :_reduce_579,
  1, 343, :_reduce_none,
  3, 343, :_reduce_581,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  2, 291, :_reduce_584,
  1, 291, :_reduce_585,
  3, 350, :_reduce_586,
  3, 351, :_reduce_587,
  1, 297, :_reduce_588,
  3, 297, :_reduce_589,
  1, 345, :_reduce_590,
  3, 345, :_reduce_591,
  1, 352, :_reduce_none,
  1, 352, :_reduce_none,
  2, 298, :_reduce_594,
  1, 298, :_reduce_595,
  1, 353, :_reduce_none,
  1, 353, :_reduce_none,
  2, 293, :_reduce_598,
  2, 292, :_reduce_599,
  0, 292, :_reduce_600,
  1, 263, :_reduce_none,
  0, 354, :_reduce_602,
  4, 263, :_reduce_603,
  1, 242, :_reduce_604,
  2, 242, :_reduce_605,
  1, 225, :_reduce_none,
  3, 225, :_reduce_607,
  3, 355, :_reduce_608,
  2, 355, :_reduce_609,
  2, 355, :_reduce_610,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 179, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 202, :_reduce_none,
  2, 178, :_reduce_none,
  0, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 259, :_reduce_635,
  1, 259, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_638,
  0, 148, :_reduce_639 ]

racc_reduce_n = 640

racc_shift_n = 1087

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tEQL => 140,
  :tLOWEST => 141 }

racc_nt_base = 142

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@3",
  "stmts",
  "stmt_or_begin",
  "@4",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "rel_expr",
  "primary",
  "relop",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@10",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@25",
  "@26",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@27",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "@38",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      _, _, block = val
                      result = block
                    
    result
end

def _reduce_11(val, _values, result)
                      _, stmt, _ = val
                      result = new_iter s(:preexe), 0, stmt
                    
    result
end

def _reduce_12(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res
                    
    result
end

def _reduce_13(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]
                    
    result
end

def _reduce_14(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_22(val, _values, result)
                      _, _, stmt = val
                      result = stmt
                    
    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_24(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_28(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_29(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_30(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val
                      result = new_rescue body, new_resbody(s(:array), resbody)
                    
    result
end

def _reduce_34(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_37(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_43(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr
                    
    result
end

def _reduce_50(val, _values, result)
                      expr, _, resbody = val
                      expr = value_expr expr
                      result = new_rescue(expr, new_resbody(s(:array), resbody))
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_55(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_56(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_60(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_61(val, _values, result)
                      _, expr, _, _ = val
                      result = expr
                    
    result
end

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_66(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_67(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend
                    
    result
end

def _reduce_68(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_70(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_71(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_72(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_73(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_74(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_75(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_79(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_84(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_87(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_89(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_90(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_91(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_98(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_107(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_108(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_109(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_110(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_111(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_112(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_113(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_114(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_115(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_116(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_117(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_118(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_121(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_122(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

def _reduce_126(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_127(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = :expr_end
                      result = sym
                    
    result
end

# reduce 128 omitted

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 131 omitted

def _reduce_132(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_133(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_134(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

def _reduce_207(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_209(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_212(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_213(val, _values, result)
                      # TODO: assignment
                      raise "not yet: %p" % [val]
                    
    result
end

def _reduce_214(val, _values, result)
                      # TODO: assignment
                      raise "not yet: %p" % [val]
                    
    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn
                    
    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

# reduce 232 omitted

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_238(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_239(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_240(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_252(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

# reduce 258 omitted

def _reduce_259(val, _values, result)
                      body, _, resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody
                      result  = new_rescue(body, new_resbody(s(:array), resbody))
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_266(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_268(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_269(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_273(val, _values, result)
                      result = lexer.cmdarg.store true
                    
    result
end

def _reduce_274(val, _values, result)
                      lexer.cmdarg.restore val[0]
                      result = val[1]
                    
    result
end

def _reduce_275(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_280(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_296(val, _values, result)
                      result = self.lexer.lineno
                      # TODO:
                      # $<val>1 = cmdarg_stack;
                      # CMDARG_SET(0);
                    
    result
end

def _reduce_297(val, _values, result)
                      # TODO: CMDARG_SET($<val>1);
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_298(val, _values, result)
                      # TODO: lex_state = :expr_endarg in between
                      debug20 13, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      result = lexer.cmdarg.store false
                      # result = self.lexer.cmdarg.stack.dup
                      # lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_301(val, _values, result)
                      _, cmdarg, stmt, _, _, = val
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.restore cmdarg
                      result = stmt
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_303(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_304(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_306(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_308(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_312(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_314(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_315(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 316 omitted

def _reduce_317(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_318(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f
                    
    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t
                    
    result
end

def _reduce_321(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true
                    
    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true
                    
    result
end

def _reduce_323(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_324(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_325(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_331(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_334(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_337(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_338(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_339(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_340(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_343(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_345(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_380(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_381(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_382(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_383(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_384(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_385(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_386(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_387(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_388(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_389(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_410(val, _values, result)
 result = 0 
    result
end

def _reduce_411(val, _values, result)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:args)
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_417(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_418(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.cmdarg.store(false), self.lexer.lineno]
                    
    result
end

def _reduce_423(val, _values, result)
                      lpar, args, (cmdarg, lineno), body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.lexpop

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      result.line = lineno
                      self.env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_425(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      # TODO: maybe fix lineno to kDO's lineno?
                      result = val[1]
                    
    result
end

def _reduce_429(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_431(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_432(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_443(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_444(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_447(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_448(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_449(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?
                    
    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                    
    result
end

def _reduce_453(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 455 omitted

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_470(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_487(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_494(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_496(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_502(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_503(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_505(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_506(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_507(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_508(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_520(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

def _reduce_526(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_527(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_528(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_529(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_530(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_531(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_532(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_533(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_534(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_535(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_537(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_538(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_539(val, _values, result)
                      lexer.lex_state = :expr_beg
                      lexer.command_start = true
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_543(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      # TODO: self.lexer.lex_state |= :expr_label
                    
    result
end

def _reduce_544(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = :expr_beg
                      lexer.command_start = true
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

# reduce 548 omitted

def _reduce_549(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_551(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_552(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_553(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_554(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_555(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_556(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_557(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_558(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_559(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_560(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_562(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_564(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_566(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_567(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_574(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_575(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_576(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_577(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      result = args val
                    
    result
end

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"
                    
    result
end

def _reduce_585(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_586(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_587(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_588(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_595(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 596 omitted

# reduce 597 omitted

def _reduce_598(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_599(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_600(val, _values, result)
                      result = nil
                    
    result
end

# reduce 601 omitted

def _reduce_602(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_603(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_604(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_605(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_608(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_609(val, _values, result)
                      (label, _), arg = val
                      result = s(:array, s(:lit, label.to_sym), arg)
                    
    result
end

def _reduce_610(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

def _reduce_635(val, _values, result)
 yyerrok 
    result
end

# reduce 636 omitted

# reduce 637 omitted

def _reduce_638(val, _values, result)
 yyerrok 
    result
end

def _reduce_639(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
